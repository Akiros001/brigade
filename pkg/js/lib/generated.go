// Code generated by go-bindata.
// sources:
// js/runner.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x39\x6b\x6f\x1b\x39\x70\xdf\xf5\x2b\xe6\x16\x87\x8b\x94\x28\x2b\xa7\x69\x8b\x83\x52\xa1\xf0\xd9\x4e\xe2\xe4\xec\xb8\x76\x2e\xd7\x22\x35\x0c\x6a\x77\xa4\xa5\xc5\x25\xf7\x48\xae\x1c\x21\xf0\x7f\x2f\x66\xc8\x7d\xf9\x11\x07\x0d\x10\x4b\x22\x39\xef\x37\x39\x7b\x0e\x6b\x65\x96\x42\x41\x55\xbb\xe2\x1c\x33\x63\x73\xb8\x02\xa7\x10\x2b\xd8\xd4\x4b\xb4\x1a\x3d\x3a\x70\x98\x9d\x8a\x12\xc1\xe2\x5a\x3a\x8f\xf6\x68\x8b\xda\x3b\x40\xfa\xe0\x8d\xe7\xb3\xd1\xec\x39\xe0\xb7\xca\x58\x8f\x39\x7c\x30\x4b\xf8\x5b\x48\xff\xce\x9a\xba\x02\x5b\x6b\x3a\x30\x9a\xcd\xe0\x73\x21\x1d\x48\x07\xbe\x40\x5a\xd6\x68\xe1\xc6\x8a\xaa\x92\x7a\x0d\x2e\xb3\xb2\xf2\xe9\x28\x33\xda\x19\x85\xa9\x32\xeb\x71\xf2\xa7\x11\x39\x6d\xee\x1f\x1c\x1f\x42\x66\x2c\x26\x93\xc1\x81\x8e\xef\xd4\x62\x65\x9c\xf4\xc6\xee\x52\x2d\x4a\x9c\x44\x82\x08\x39\xae\x44\xad\x3c\xc8\x52\xac\x91\xa8\x3b\x6f\xb2\x0d\xd4\xcb\x5a\xfb\x1a\x5e\xfd\x7b\xba\xf7\xaf\xf0\x02\x4a\xb1\x41\x10\x3a\x87\xb5\xf4\xe9\x68\x2b\x2c\x88\x4c\xe6\xc7\x0c\xb3\x80\x84\x7e\xbc\x0c\x20\x73\x25\x3c\x3a\x9f\x30\x01\x56\xc5\x7b\xa1\x73\x85\x16\x72\x24\x21\x96\x18\x04\x54\xd2\x79\x30\xab\xa0\x26\x5a\x12\x1e\xf6\x33\x99\x13\x0b\xe2\x46\x58\x04\xb3\x4a\x47\xab\x5a\x67\x5e\x1a\x3d\xc0\x34\x9e\xc0\xf7\x11\x80\x2f\xa4\x4b\xd7\xd2\x17\xf5\x12\x16\xbc\x02\x6c\xa9\x39\x34\x50\xe3\x5c\x78\x31\xf9\x7e\x3b\x8d\x7b\x4a\x9d\xe3\x3f\x35\x3a\x7f\xff\xc8\x08\xe0\x76\x74\xdb\x31\xdd\xe3\x56\xe8\xc0\x64\xe0\xf1\x46\x38\xf0\x56\xae\xd7\x68\x31\x4f\xe9\xfc\x7e\xb3\x2f\x1d\x54\xc2\x39\xcc\xc1\x9b\x0e\xaa\x10\x5a\xe5\x68\x53\xd6\x76\xbb\xc4\x1a\xc9\x84\x86\xda\x21\x4b\x42\x98\xcc\xf2\x1a\x33\xcf\xd0\xd9\x3f\xb5\xb4\xc8\x9a\x22\x0e\x03\xed\x96\x2e\xaf\x33\xae\x3b\x1a\x1a\xb7\x5e\x37\x05\x8b\xff\x04\x45\xcd\x66\x40\x36\x6f\x5c\x2b\xf0\xc0\x2b\x63\x4c\xd7\x29\x3c\x0b\x4a\x4c\x49\x79\xcf\x26\x8d\x66\xf9\xc0\xa2\x73\xe3\x80\xc8\x06\x05\x0e\x71\x31\x87\x2b\x6b\xca\xe0\xba\xe1\x48\x1a\x00\xde\x1a\x0b\x02\xde\x49\xff\xbe\x5e\x42\x61\xcc\x66\x0a\xd2\x3f\x0b\xd0\x95\xd8\x29\x23\x72\xb0\x98\xa1\xdc\x62\x1e\x70\x84\xb3\x0d\x1b\x0d\xc1\x05\xe1\x0d\x28\x33\xa3\x57\x72\x4d\x1f\x5e\x48\x1d\x50\x85\xb5\xda\x0a\xd6\xc5\xca\x58\x86\xbe\xc3\x4b\x13\x60\x02\x72\xc9\x4a\x13\x76\x97\x36\x84\x22\xd6\x05\x7c\x6f\x1c\xe1\xcc\x1a\x6f\xfc\xae\x42\xc6\xf7\xc1\x2c\x7b\xfe\xf8\xc1\x2c\xc7\x9a\xd5\xec\x85\xdb\xb8\xa0\x68\x8a\x8b\x72\x07\x8b\x60\xd0\x40\x93\x33\xc0\x8d\x54\x0a\x96\x98\x99\x32\x98\xb4\xb2\xb8\x92\xdf\x22\x9b\x08\x95\xc9\x67\x81\x7c\x29\x2a\xb6\x8c\x4b\xef\x98\x81\x3e\xde\x44\x29\x88\x60\x63\x80\x26\x8c\x98\x0b\xf2\x1c\x5b\x6b\x76\xb5\x1d\x50\x0c\xe1\x37\xcc\x6a\x4a\x3a\x52\x83\x23\x5d\xe8\x0c\x41\x6a\x27\x73\x8a\xaf\x80\x4f\x80\x2b\x50\x29\x18\xcf\x96\x52\xcf\x5c\x31\x69\x69\x07\xa4\x8b\x80\xfc\x4d\x14\x68\x1f\x32\xa3\x14\x06\x35\x98\x15\x73\x36\xdb\x0a\x55\x93\x3d\xa5\x75\x1c\xd4\x7a\x2b\xad\xd1\x25\x39\xc7\x56\x58\x29\x96\xaa\x27\x12\xea\x2d\xab\xb9\xc1\x48\x81\x11\xd2\x0f\x65\x18\xa1\xc1\x54\x6c\x1c\x05\x5e\xac\x5b\x28\x19\x93\x4d\x9b\x78\x3a\x86\x48\x6b\x66\x05\x47\xa7\x5f\xae\xbe\xec\x9f\x07\x05\x32\xae\x0b\xcc\x2c\xfa\xa8\xd1\x60\x7e\x36\x45\x65\xaa\x9a\xf2\x54\xf0\xe1\x8e\xd9\x80\xb0\xe1\x18\x6e\xa4\x2f\xf8\x48\x10\x6f\x65\x6a\xcd\x9a\xa4\x25\xc7\xa8\xfb\x8e\xc5\x98\xcd\x16\xad\x25\xed\x0a\x28\x85\xcf\x0a\x4a\xcf\x24\x2f\xb9\x46\x1b\x21\xb4\x50\x8a\xaa\x15\x2d\xe0\x72\xc1\xf7\x02\xc6\xca\xe4\xa7\x31\x66\x1d\x7a\x58\xee\xc8\xb0\xe3\xc9\x94\xc5\x1a\x78\x3e\x3b\x08\x79\x40\x70\x24\xc8\x2c\x0a\x4f\xa9\x29\x22\x8f\x98\x22\x5e\x2a\x37\x0e\x75\xee\x42\x7c\x5c\x9b\x25\x39\xcd\xc7\xb6\x9a\xb5\x60\x74\x70\xd1\xa5\xc9\x49\x4c\xb0\xbc\xb7\x14\xd9\x66\x6d\x49\x1b\xbd\x12\x33\xe9\xf6\x6f\x84\xf4\xe3\xc9\x88\x17\x2c\xfa\xda\xea\x10\x11\x00\xc1\xe6\x77\x90\x3c\x4a\xa7\x51\xc2\x82\x85\xa7\xa5\x69\xaf\x16\x4f\xde\xb4\x08\x67\x33\x20\x9a\x7f\x69\x2f\xd5\xa1\xd1\xac\xb6\x02\x6d\x08\x5c\x22\x74\x23\x6c\xee\x20\x33\x65\x25\xbc\x5c\x4a\x25\xfd\x6e\x0a\xcb\xda\x43\x6e\xd0\x81\x36\x9e\x0c\x15\x8d\x79\x78\x74\x76\x7e\x74\xb0\xff\xf9\xe8\x70\x0e\x7f\x87\xc0\x05\x8b\xa5\xa1\x04\x95\xd7\x96\x0b\xae\xaa\x0a\x31\xea\x49\xdb\x51\xbe\x23\xcb\x43\x3a\xe8\x71\xcc\x7f\x1c\xd4\x04\x0e\x82\xed\x57\xd0\x42\x72\x51\x67\x19\x62\x8e\x79\xc2\x87\x3b\x88\xf1\x84\xcb\xc6\x12\x21\x13\x4a\x61\x0e\x46\x43\xa7\x4a\xfa\xcd\x45\xc4\xa5\xf7\xe1\x28\xf3\xd5\xde\x94\xc2\x4b\x82\xdd\x35\x18\x96\xbb\xd6\xe4\x7d\xa8\xe3\x15\xf3\x13\x98\x77\x90\xbc\x15\x52\x61\x9e\x4c\x83\xe7\xf8\xc2\x9a\x9b\x50\x1c\xbf\x65\xc8\x01\x9b\x0e\xe1\x6a\xed\x58\xff\xa5\xe1\x42\x26\x34\xbc\xfa\x37\x28\xa5\xae\xa9\x69\x1a\xbf\xde\xdb\x83\xe7\xf0\xfa\xa5\xc3\xcc\x70\x54\x79\xb4\x5b\xa1\xdc\x64\xda\xa2\x06\x2f\x4b\x34\xb5\x1f\x52\x68\x75\xfe\x90\xdb\x10\xbd\x31\xc5\x9a\x84\x05\xec\xbd\x01\x09\xff\x01\xaf\xf7\xe8\xcb\x8b\x17\xcd\x19\x80\x41\x13\x95\x15\x98\x6d\xb8\xc5\xf2\xc2\xd7\x9c\xbe\x12\xea\x78\x76\x8d\xfb\x4d\x22\x14\xa1\xdd\xc0\xa2\xd7\xfa\xa5\x94\x20\x4e\x2f\xc6\x49\x6c\xa2\x92\xfe\xd1\x72\x47\x5a\x58\xc0\x26\xa5\xce\xec\xcb\x2b\x42\x97\xae\xd1\x8f\xfb\x98\x1f\x60\xe8\xc3\xc5\xa7\xd3\xd4\x79\xf2\x33\xb9\xda\x8d\x19\xcd\x64\xf2\x10\xe7\x67\x26\xbf\xc3\x2a\xbc\x80\x84\xcc\x4c\xd9\xde\x53\x7e\x0b\xdb\x44\x39\x48\x97\x56\x85\x70\x1d\x5d\xb9\x82\xf1\xfd\x6d\x58\x2c\x5a\x6b\x77\x4a\x83\x60\x17\x78\x8c\xec\x8a\x01\x62\x09\xa2\x0f\x8a\x36\x85\x64\x9e\xe4\x4d\xc4\x71\xfb\x34\xdd\xce\xf1\xfb\xa4\x9b\x08\xb2\x35\xde\x41\x35\x9b\xc1\x05\x77\xe4\x2b\x6e\x34\x72\x5c\x49\x8d\x39\x88\xd2\xd4\x3a\x54\x46\x59\x62\x1a\x0f\x73\xef\x3e\x7e\x1d\xb4\x79\x3b\xea\x09\x45\xa7\x72\x20\x67\x23\xd7\x22\x77\x20\x7c\xd5\xc3\xa2\x06\x19\x93\x90\x7e\x42\xaf\xd0\x35\xf4\x21\xa2\xd9\xf1\x6b\xe5\x65\xa5\x90\xb2\x2c\xd7\xe6\x95\xd4\xd2\x15\x29\x1c\xfb\x50\x2c\x02\x6d\x0a\x21\x6b\x8d\x25\x34\xc2\x81\x33\x46\xd3\xa7\xe0\xe4\x4c\x7d\xbb\xf5\xae\x3d\xd4\x6b\x41\x5a\x92\xfd\x7e\x98\x49\x2d\xe0\xeb\x65\x4c\x32\x22\xcf\xe9\x3f\xa1\xd3\x78\xd3\xe4\x7b\xaa\x15\xc4\x27\x25\x8d\xaa\x01\xa5\xa3\xbd\x90\xba\x36\xcb\x41\x32\x26\xcc\xdc\x22\xf2\x4e\x2f\x8f\x91\xb9\x39\xd8\x71\x8b\x76\xc7\x24\x62\x8d\x64\xf4\xa1\x64\xf9\x02\x75\x4f\x35\xbe\xc0\xb2\xe7\x23\xf8\x53\x65\x87\x39\x58\x19\x7b\x24\xb2\x62\xdc\xaa\x61\x7c\xdd\x39\xca\x75\xbf\x34\x45\x2b\xdf\xaf\x4b\x3f\x48\xc1\xac\x3e\x6a\x9c\x5a\xc6\xe0\xd4\x70\x9f\x40\xed\x37\xe5\xbd\xa6\x60\x04\x2f\x2f\x82\x71\x43\xc7\x15\x70\x96\xb5\xf3\x94\x9e\x9d\x17\x3c\xee\xe1\x37\x8f\x56\x53\xbe\x4d\x61\x7c\x81\xd8\xd9\x8d\x85\x8d\x9d\x65\xc7\xf7\xe4\xa9\x1c\xf7\xd3\xba\x68\xc5\x8d\x5a\x68\xfa\xda\xd6\x60\xc1\xc5\x42\xe0\xf4\x66\x45\xf2\xcf\x56\x4c\xe6\xa2\x69\x54\xa3\xfb\x74\x56\x1b\x34\xd5\xca\xdc\xbc\x54\xb8\x45\x05\x95\x95\xa5\xf4\x72\x8b\x3d\x77\xa5\x12\x7e\x6d\x96\x83\x0a\xde\x8c\x27\xbf\x7e\xf8\xf4\xc7\xcb\x5f\x3f\x1f\x9f\x1c\xbd\xfc\xf5\xdd\xf1\xe7\x8b\xf7\xfb\xb1\x9b\xde\xfc\xee\x62\x07\x70\x6d\x96\xa1\x17\x7e\x01\xc9\x4b\x8a\xc9\x43\xe1\x31\xd5\xe6\x66\x3c\x69\x97\x7a\x32\x14\x28\xf2\xab\xcc\x94\xa5\xf4\xa9\xcc\x53\x57\x2f\x43\x4a\x1d\xef\x4d\xe1\x77\xee\x1c\x08\x7d\x56\x46\xec\x91\x4e\x5c\x0e\xc3\xf7\x83\x5b\x59\x49\xcd\x38\xde\x1c\x9c\x8c\x03\xf0\x64\x00\x13\x36\xcf\xf9\xfb\x99\xc9\xc7\x1d\x26\xce\xb9\xe1\x67\x5a\xa2\x17\x34\x33\xa5\x4a\x2c\x51\xb1\x31\xf5\x50\xca\xc7\xcf\x2e\x51\x19\xbd\x76\xde\xc0\x02\x1e\x9e\xef\xcd\x0d\xc1\x0d\x74\xf5\xf8\x45\xc0\xe3\x84\x82\xf2\x86\x54\x86\x5a\x6d\xfa\xef\x3c\x6f\x5a\x5c\xee\x3a\x48\x1b\xa8\xb7\x5f\x84\x1d\x64\xa2\xab\x14\xc9\x57\x49\x42\xd4\xdb\x69\xe7\xd7\x5b\xa1\xa6\xb0\xc1\xdd\x14\x54\x70\x88\x27\x4f\x36\x4e\x1e\xa9\x84\xac\xf4\x9d\xc4\x99\x07\x44\xdc\xaf\xcf\xe9\xe3\x36\x74\x89\x93\x37\x1d\xaf\x4d\xb7\x2d\xdc\x80\xed\x1e\xd5\x78\xe2\x11\xca\xa3\xa6\xec\xd0\x34\xd7\x20\xbb\xa1\x59\xab\x52\x32\x93\x5e\xed\x60\xa9\x4c\xb6\x09\x45\x87\x4a\xdd\x55\xda\x74\xec\xe3\xaf\x49\x80\x48\x2e\x99\xcb\x49\x17\xaf\xa1\xc4\xc5\xca\xd4\xd0\x78\x87\xbe\x25\xd1\x8e\x0f\x6b\xb9\x45\xdd\x5c\x3b\x3d\xa0\x88\x88\xb0\xd3\x47\xdb\x95\xa8\x1a\xdf\x5a\x53\xce\x7b\x95\x35\x60\xff\x88\xbb\x73\x5c\xcd\x21\x2a\x31\xe2\x66\x91\x83\x1a\x07\x55\xb7\x53\xea\x28\x08\xe8\x5c\xf1\xf1\x31\xb3\x0c\xb8\x49\xf6\x0f\x8e\x0f\xaf\xce\x8f\xce\x3e\x5d\x7d\x3c\xfa\x9f\x64\xc0\xd9\x1c\x02\x9a\x7e\xc2\xea\xac\xe6\x4d\x15\x93\x4b\x6b\x34\x4a\xba\x0e\x43\xc2\xed\xe6\x2e\xbd\x03\xe1\x3d\x96\x15\x5f\xa4\xd0\xf0\xd4\x4e\x70\x2e\xa0\xa3\x65\x53\xa2\x0f\xc3\x99\x72\x5c\x7d\x86\x4c\x37\xec\x1e\xfc\xf9\xe9\xf4\xe8\xea\xaf\xf3\x3f\x93\xd6\xa9\x1e\x8e\xa5\x4c\x19\x8d\x57\xb5\x55\x81\xf3\x87\xb1\x5d\x5c\xbc\xff\x19\x5c\xce\x15\x4f\x61\x7a\x77\xfc\xf9\x67\x30\xad\xa5\x7f\x0a\xd3\xfb\xa3\xfd\xc3\xab\x83\x4f\x27\x27\xc7\x9f\xaf\x8e\x0f\x1f\x44\x38\x8c\xfa\x80\x2c\x26\x0d\x57\x61\xd6\x38\x37\x5a\xf7\x75\xef\x32\x4e\xf7\x91\x58\xcf\x80\xf1\x7e\x85\x66\xf5\xad\x51\x75\x3f\xf5\x30\x96\xb0\xc8\x29\x83\x3d\xa0\xe1\x30\xa4\xd9\x69\x84\x3f\x11\x55\xeb\xa5\x31\x7b\xdf\xde\x36\xd1\x32\x6d\x81\x12\x99\x5b\x27\x92\x69\x74\xef\x39\x7c\x8f\xdf\x4e\xfb\xfe\x1d\x40\x2f\xdf\xfc\x50\x9e\xc0\xd7\x09\xb5\x93\x8f\x33\xc7\xdd\xe6\x99\xf0\xc5\x1c\x92\x59\x61\xcc\x66\x46\xa9\x34\x89\x37\x8f\x0f\xb3\x76\x1f\xc6\xb9\x22\x99\x82\x45\x91\x7f\xd2\x6a\x37\xe7\x76\x37\x72\x18\xf4\xf8\xa9\xf1\x72\xdf\x5e\x99\x18\xad\x76\x14\x83\xb4\x52\x3b\xb4\xe4\xf1\x0e\x8c\x66\xa7\xa6\xd8\xa4\x84\xc6\x47\x9b\xf0\x7c\x5c\xd4\xe6\x8a\xa5\x05\xe9\xc5\xe0\x07\x13\x9b\xba\xf6\xa6\x29\xdc\x09\x73\x5b\x49\xce\x21\x74\x3e\x8f\xd9\x9f\xea\x63\x99\x47\x44\x7c\x3e\xbd\x36\x52\x8f\x13\xf8\xed\x37\x48\xb8\x12\x66\x65\x4a\x1a\xfa\x9a\x94\x42\xea\xd4\x15\xc9\x65\xac\xab\x25\x97\x95\x9f\x9a\xb5\x46\x77\xe6\xa1\x03\x8b\x82\x5b\xf7\xee\x2e\x8d\x8a\x5f\x56\x76\xb5\x4d\xc7\x8a\xfd\x83\x81\x2b\x2b\x79\xda\xda\xa4\xd4\xb8\x69\x27\x8d\x6e\xee\x06\x4b\x51\xa5\xe1\x76\x85\x0e\x3d\x4a\xbd\x19\x1a\x1e\xd7\xf3\x4f\x70\x11\x80\x23\x27\xbd\x01\x32\xd2\x8f\xdb\x77\x79\xa0\x65\xa9\xd7\x69\x9a\x06\xf5\xc4\xb1\xa9\xeb\x42\x78\x5c\x69\x5b\xb2\x41\xab\x52\x99\x9c\xf9\x62\x2f\x89\x80\xc1\x61\x92\x8d\xd4\x79\x32\xe7\xc9\x2f\xa6\xec\x44\x54\xf2\x0b\x5a\xd2\x0e\x6d\x6c\x5f\x35\xeb\x8d\xa6\x93\xae\xc6\x24\x84\x36\x99\x43\x24\x30\xed\x2f\xbb\x4a\x64\xb4\xd7\x5a\xb5\xdd\x0d\x5d\x48\xd2\x2f\x55\x49\x81\x56\x7a\xb1\x66\x80\xff\xaa\xcd\x66\x23\xda\xf3\x44\x5a\x68\xb1\xc6\xfc\x8f\x1d\x6d\x8b\x4c\xf2\xd5\x49\xaf\x68\x45\x0e\xc9\x1e\x7d\xee\x2c\x72\xa7\x7e\x66\x94\xcc\x18\xf4\x94\xe6\x98\x8e\x91\xce\x74\xc9\x3c\x46\x3f\x67\x80\xf6\x5b\x27\x21\x53\xa5\xc9\x70\xda\xdf\xe4\x48\x4a\xe6\xdd\xc5\xe5\x60\x37\x86\xce\x00\x37\x6f\x70\x4a\xa0\xc8\xe8\x2d\x5f\xf6\x41\x67\x33\x78\x7b\xfc\xdf\x27\x47\x73\x38\x28\x84\x5e\x23\xc5\x64\x72\xbc\x3a\x35\xfe\xcc\xa2\x43\xed\x93\x7b\x5c\x9c\xd5\x4a\x75\x82\xee\xab\x1b\xb1\x73\xdd\xa9\xa6\xc8\x5f\xb6\xe3\x71\x18\x6f\x07\x0e\x73\x70\x32\x7e\xca\x4d\x0e\x9a\x4c\xfd\xff\x70\x96\x4e\x99\x7d\x5f\x79\xca\x5b\x1e\xf6\x97\xa7\x7d\x26\xfa\x44\xe3\x1a\xf7\x79\x69\xb2\xd3\x1c\x12\xcc\x0a\x03\x05\x2a\x65\x28\x8b\xf1\xaf\xb5\x31\xf9\x72\x87\x49\x87\xe4\x76\x18\x60\xca\x98\x4d\x5d\x85\x97\x99\xf0\x5a\x10\x9f\x7e\xda\xc9\x27\x5a\xf0\xad\xb1\xdc\x93\x50\xf2\x77\x46\x4f\xc1\x55\x4a\xf6\xa7\x30\x63\x37\x3c\x97\x65\xa2\x76\xe8\x9a\x9b\x31\x6e\x5c\x2b\x61\xb9\x32\x11\x81\x94\xe1\xc6\xcf\xfe\x37\x7d\x36\x85\x97\xaf\x26\xb1\x06\xf0\x91\x54\xa1\x5e\xfb\x02\x7e\x59\xc0\xbf\x74\xb3\x24\xdf\x7e\x1c\x7d\xab\x30\xe3\x61\xb5\x7b\x1b\x92\xfc\x8c\x52\x42\xab\xf8\x34\x48\xb0\x36\x9e\xd3\x5b\x9c\x1e\x6e\x7b\x79\x26\x0a\xf7\x95\xc9\x7d\xdd\xbb\xbc\x8c\xdf\x5e\x5d\x5e\xc6\xd1\x73\xf1\xf8\x3f\xda\x3e\x11\x92\x94\x26\x72\xb4\x4f\x9d\xbe\xff\x12\x8a\x39\x3f\x84\x52\xe6\x23\x99\x7f\x19\xbe\xc7\x36\x77\x24\x2c\xef\xa9\x19\xbe\xc4\xb9\xe6\xde\x28\x61\x7f\xc7\x50\x8b\xee\x3f\xa9\xf5\x6f\xbb\xb1\xf7\x62\x14\x6c\x79\x72\xf6\xc7\x1c\x8e\x21\x37\xfa\x19\x5f\x16\xe8\x0d\x15\x4c\xcb\xb7\xd1\xd4\x96\x06\xdb\x52\x98\x56\xc2\xc5\x0b\x78\xa9\xa7\xf1\x29\xc7\xe2\x7f\x32\x9a\x24\x74\xc1\x49\xd3\x0e\x93\x5b\x25\x81\xd4\x69\x88\x8c\xee\x07\x71\x8b\xfd\x37\xd6\x1e\xdf\xed\x63\xe9\xe8\x07\x65\xa6\x0f\x3c\x99\x8c\x86\x2a\x1b\xee\xde\xd1\x78\x7c\xb7\x65\x63\xe5\x29\xbc\x95\x7c\x31\x4e\x8e\xd1\xea\x8b\x1f\x99\x57\x1a\x16\x83\x38\xe8\xa9\x73\x88\x9f\xce\x0e\xde\x13\xfa\xdb\x69\xef\x8d\x72\x4c\x98\xff\x2f\x00\x00\xff\xff\xf3\xd8\x13\x24\x9e\x1f\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/runner.js": jsRunnerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

