// Code generated by go-bindata.
// sources:
// js/event.js
// js/job.js
// js/mock8s.js
// js/run.js
// js/run_mock.js
// js/runner.js
// js/waitgroup.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsEventJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4a\xc6\x30\x10\x85\xf7\x39\xc5\xdb\x55\x41\xd2\x13\x74\xe1\x42\x70\xed\x0d\xa6\xc9\xd4\x04\x62\x52\x33\x53\x6b\x91\xde\x5d\x42\x94\x9f\xf2\xef\x86\x79\x8f\xef\x9b\x19\x47\xbc\x7c\x71\xd6\x57\xca\x3e\x71\x85\x67\x71\x35\xce\x2c\xd0\xc0\x48\x51\x14\x65\x01\xb7\x4a\x5b\x91\xe2\xd9\x45\x8f\x28\xa0\x9d\x2a\xa3\x2c\xd6\x2c\x5b\x76\x1a\x4b\xbe\x90\x1e\x1e\xf1\x63\x80\xce\xaf\x47\x47\x20\xfc\x69\xde\x59\xbb\x61\xa5\x4a\x1f\x18\x3c\x29\x0d\x4f\xd8\x43\x74\xa1\xc1\x5b\x34\x17\x7f\x34\x79\x9b\x2b\x7f\x6e\x2c\x6a\x0d\xa0\x21\x8a\x5d\x37\x09\x98\xf0\x6f\x6e\xb2\xf3\x96\xa5\xf4\xd6\xfb\x77\x95\xd3\x18\xfe\x5e\x4b\x55\xb1\x97\xb7\xa7\xcb\xed\xe6\x37\x00\x00\xff\xff\x38\xd9\xc5\x1d\x16\x01\x00\x00")

func jsEventJsBytes() ([]byte, error) {
	return bindataRead(
		_jsEventJs,
		"js/event.js",
	)
}

func jsEventJs() (*asset, error) {
	bytes, err := jsEventJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/event.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsJobJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xc1\x8e\xdb\x36\x10\xbd\xeb\x2b\x5e\x7d\xb2\x5b\x47\xda\x20\x6d\x0f\x59\xf8\xb0\xe8\x6e\x80\xa4\x40\x10\x24\xdb\xf4\x18\x50\xd4\xc8\x62\x96\x22\x55\x72\x68\xaf\x11\xec\xbf\x17\x43\xda\xb2\xb3\x4d\x2f\x02\x38\xe2\xbc\x99\x79\xef\x0d\x9b\x06\xf7\x03\xa1\xa3\x5e\x25\xcb\x30\xa3\xda\x12\x4c\x44\x64\xaf\x1f\x90\xda\xe4\x38\xe1\xe5\xef\xf5\xd5\xaf\xf8\x05\xa3\x7a\x20\x28\xd7\x61\x6b\xb8\xae\x76\x2a\x40\x69\xd3\xbd\xcd\x39\x1b\x2c\xe4\xf0\xa2\xa4\xbc\xb6\x8a\x29\xf2\xa2\xaa\x9a\x06\x1f\x82\x67\xcf\x87\x89\xd0\xfb\x80\x77\xbe\xad\xab\x3e\x39\xcd\xc6\x3b\x39\x2d\x9d\x1a\x69\x0d\x56\xf1\x21\xae\xf0\xad\x02\x04\x79\x3c\x60\x03\x1e\x4c\xac\x2a\xc0\xf4\x58\xfe\x44\x8f\x93\x0f\x1c\xeb\x2f\xb4\x23\xc7\xe5\x26\xc0\x43\xf0\x7b\x2c\x72\x0c\xce\x33\x7a\x9f\x5c\xb7\xa8\x80\x27\xc9\x6c\x1a\xbc\x57\x23\x61\x6f\xac\x45\x4b\xda\x8f\x04\x1e\x08\x53\xa0\xde\x3c\xe6\x86\xf2\xd1\x77\x8d\xf6\xae\x37\xdb\x51\x4d\x90\x86\x62\x5d\x21\xd7\xaf\xe5\x84\x4d\x0e\x5e\x17\xc4\x7b\x69\x55\x58\x92\x54\x6b\x22\xc3\xf7\xa5\x7f\xb0\x47\x48\xae\x16\x52\x0f\x50\x81\x40\x8f\xa4\x13\x53\x07\xe3\x10\xe9\x9f\x44\x4e\x13\x8c\x8b\xa6\x23\xf8\xbe\xe0\x29\xc4\x81\xac\xc5\xb2\x69\x8d\x6b\xe2\xb0\x9a\x6b\x17\xd0\x4d\x01\xbf\x3e\x0e\x74\x03\xed\xad\xa5\x42\xa0\xef\x73\x67\xcd\x4e\xd9\x44\x98\x94\x09\x51\x62\xe4\x76\x26\x78\x37\x0a\x2b\x3b\x15\x8c\x6a\xed\xc5\x48\xe4\x76\xd8\xe0\xdb\xd3\x09\x51\x2c\x50\xa4\x17\x75\x95\x83\x9f\x04\x5c\x59\xb0\xda\xce\x59\xe6\x28\xf4\x2c\xfa\xb9\x21\x61\xcd\xf7\xb8\x7b\xff\xf9\xcb\xe7\x9b\x8f\x85\xc0\x8c\xf5\x89\x74\x20\x3e\x32\x8a\xfb\xc1\xc4\x22\xc5\xe4\xa7\x24\x1e\xc9\x14\x5e\x34\x5b\x00\x4f\x1d\x63\x6f\x78\xc8\x57\xca\x78\x59\x5b\x61\x52\x42\x31\x43\xd7\xa7\x09\x4e\xc8\x7e\x47\x21\x08\xbb\x0a\xa3\x62\x3d\x18\xb7\x95\x02\xd9\x54\x7d\xf0\xe3\xa9\xa2\xf4\x3c\x8f\x56\xb0\x62\x26\xe5\x38\xd4\xe4\xbb\xec\x1c\x59\x06\x62\xb4\x07\x11\x76\xb9\x5a\xe7\xb1\xb4\x77\xac\x8c\x2b\x0e\xc8\x06\x11\x07\x14\x23\x41\x07\x52\x4c\xdd\x0c\x7e\x44\x3a\xe2\x86\x24\x46\x70\x5d\xcc\x3f\xf1\xd5\xb7\x62\x9a\x3f\x53\x4b\xc1\x11\x5f\x88\x24\x17\x37\x38\x6d\xca\xf2\x6c\x78\x13\xeb\x56\xe9\x87\x6d\x10\x36\x96\xcf\xd6\xe2\x7c\x67\xaf\x0c\x2f\x57\x55\x0e\x04\xe2\x14\x5c\xd9\x27\xa0\xe8\xfe\x0c\xe8\x7f\x6b\x9d\x88\xd8\x64\x02\x24\xb4\xc6\xb3\xa2\xd7\x33\x68\xd3\x40\xea\xfe\xe5\xd8\xd8\x5b\xef\x32\x7d\x03\x85\xb2\xfa\x52\x6c\xaf\x42\x17\xa1\xfd\x38\x29\x36\xad\xb1\x86\x0f\x6b\xb4\x89\xd1\x79\x8a\xb2\xc0\x22\xd8\x51\xd4\xdb\xbb\x0f\x1f\xef\xfe\xb8\xb9\xbf\xbb\x7d\x8d\xbf\xcb\x02\x23\xd0\xe8\x77\xd4\xa1\x4b\x41\x94\xbd\xb1\xd3\xa0\xaa\x8b\x89\xcf\x95\x9f\xcd\xf3\x23\x1e\x2e\x3a\xce\x9f\x88\x24\xe9\x50\x59\xc7\x41\x02\x8b\x4f\x49\x6b\xa2\x8e\xf2\x9b\xd2\x34\xe7\x8c\xe5\x0a\x5a\x39\xe9\x49\x2b\x6b\xa9\x83\x77\x38\xd3\x29\xe7\xf6\x2b\x69\x8e\xf5\x7f\xf3\x4c\x84\x4a\xec\x47\xc5\x46\x72\x0f\x27\x84\xf6\x30\x4b\x7f\x99\xf5\xb6\xcf\xfd\x94\xe6\x23\x16\x6f\x94\xb1\xd4\x2d\xd6\xc5\x41\xf9\x05\x94\x6d\x03\x3d\x6a\xca\x8b\x5b\x7f\x9f\x97\x5c\xcc\xfc\x8f\x3e\xc8\xc2\x29\x87\x97\xbf\x61\x34\x2e\x31\x45\x2c\x5f\x5d\x5d\xe1\x67\xbc\x7a\x11\x49\xfb\xbc\x5d\x4c\x61\xa7\x6c\x5c\xad\x67\x68\xb0\x19\xc9\x27\xfe\xbe\xc2\xcc\xf9\x8f\xac\x23\xf1\x37\x3e\xc8\xfb\x3e\x1e\x56\xc5\x1f\x4f\x55\x75\x32\xce\x3b\xdf\x62\x23\xaf\x7f\xf5\x6f\x00\x00\x00\xff\xff\xdd\x8d\x70\x61\x82\x06\x00\x00")

func jsJobJsBytes() ([]byte, error) {
	return bindataRead(
		_jsJobJs,
		"js/job.js",
	)
}

func jsJobJs() (*asset, error) {
	bytes, err := jsJobJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/job.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsMock8sJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x8b\xdb\x30\x14\xc4\xef\xfe\x14\x83\xe9\x21\x01\xe3\xd0\xab\xc1\xa7\x42\x6f\x2d\xa5\x81\x5e\x4a\x29\x8a\x34\x4e\xb4\xb1\x25\xa3\x3f\xbb\x0b\x8b\xbf\xfb\x22\xc7\x56\x92\xbd\xe4\xb2\x17\xe5\x45\x9a\xf7\xe3\xcd\xf8\xed\x76\xd8\x07\xeb\x88\xc1\xca\x33\x46\xab\xa0\xd8\x69\xa3\x83\xb6\xc6\xe3\x44\x47\x08\x8f\xd2\x88\x81\x25\x1a\x7c\x71\xf4\x36\x3a\xc9\x22\xe9\x7f\x59\xe5\xd1\xe2\xad\x98\x8a\x22\x83\xa4\x35\x9d\x3e\x0e\x62\x7c\xd8\xfe\x6d\x56\xfe\x48\xca\x05\x72\x8e\x07\x3a\xc3\xc0\xcb\x0d\xf0\xa2\xc3\xe9\xe7\xbe\x41\x17\x8d\x4c\x23\x6d\x8c\xdf\xce\x0f\x80\x63\x88\xce\xe0\x02\x72\x2c\x80\x29\x21\xd6\xff\x0b\x40\x5a\xc7\x3f\x5f\x9b\xa5\x67\xb4\x6a\x2d\x81\x23\xc3\x2d\x58\x0c\xdc\xe6\xb7\x8c\xff\x5f\x77\xda\xa8\xcd\xea\xb6\xba\x36\xb0\xbf\xd3\xe7\x0e\xf6\xac\x07\x06\xa1\x44\x10\x75\xa2\xa2\x6d\x91\x7e\xb3\x74\xda\x2e\xe5\x54\x2d\x85\x74\x14\x81\x37\xd3\x28\x76\xb7\xf0\x14\x6e\x94\x92\x54\x54\x15\x7e\x47\x63\xb4\x39\x56\x10\x46\xe1\xbb\xd0\x3d\x15\x84\x23\xbc\x1d\x88\x67\xd1\x6b\x95\xce\x48\x5f\x67\x80\x62\x57\xfb\x20\x42\x9c\x83\xc5\x78\x12\x9e\x0d\xca\x0c\x2d\x31\x65\xed\xea\xf5\x6f\x6a\xca\x4e\x7a\x71\x60\xef\xeb\x27\x7b\x48\x5e\xfe\xa1\x4d\xcc\x8f\x69\x5d\xaf\x2e\xb8\x74\xce\x26\xf9\x1a\x68\x7c\xda\xa9\x35\xff\xbc\x26\xd7\x0f\xf2\x28\x85\xfb\x9d\xf9\xac\xf1\x8a\xa9\x78\x0f\x00\x00\xff\xff\x1e\x5a\xf4\x09\x05\x03\x00\x00")

func jsMock8sJsBytes() ([]byte, error) {
	return bindataRead(
		_jsMock8sJs,
		"js/mock8s.js",
	)
}

func jsMock8sJs() (*asset, error) {
	bytes, err := jsMock8sJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/mock8s.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x5b\x6f\x1b\xb7\xf2\x7f\xd7\xa7\x98\x12\x45\x2b\x21\xf2\x6e\x8a\x02\x7f\x14\xca\x5f\x0f\xae\xec\x24\x4a\x62\xcb\xc7\x76\x83\x73\x60\x18\x06\xb5\x3b\xd2\xd2\xe2\x92\x0b\x92\x2b\x47\x0d\xfc\xdd\x0f\x86\xe4\x5e\x64\xcb\x71\x71\x5e\xe2\x15\x39\xf3\x9b\xfb\x85\x49\x53\xb8\x2e\x10\x84\x72\x68\x14\x97\x16\x56\xda\x80\xa9\x95\x12\x6a\x0d\x8e\xdb\x8d\x4d\xe0\xba\x10\x16\xca\xda\x3a\x58\x22\x48\xcd\x73\xcc\x61\x89\x2b\x6d\x10\xb8\xda\x81\x5e\x81\x2b\x70\x90\xa6\xa0\x97\xf7\x98\x39\x0b\xae\xe0\x0e\x6a\x8b\x04\x34\x1c\x25\x83\x34\xa5\xdb\x63\x29\xe1\x73\xbd\x44\xa3\xd0\xa1\x85\xe3\x8b\x39\x64\x5c\x4a\x0b\xb6\xd0\xb5\xcc\x03\x78\xc6\xa5\xf8\x1b\x73\x28\xd0\x60\x02\x0b\x57\xa0\x81\x52\xe7\xb5\xc4\x96\x4e\x69\x47\x70\xc4\x0b\xbf\x6e\x5a\xc0\x5f\x21\x17\x06\x33\x27\x77\xc9\x60\xb0\xe5\x06\xac\xc8\x31\xe3\x66\x5e\xf2\x35\xc2\x14\x18\xcf\x44\x2e\xb2\x84\xff\x5d\x1b\xcc\x4c\x22\x74\xba\xcd\xec\x51\xa4\x9a\x48\xee\xd0\x3a\x36\x20\xe8\x07\x2e\x1c\x38\xbe\x41\x0b\x1c\xee\xf5\xf2\x48\x8a\x0d\x46\xeb\x80\xab\xdc\x13\x58\xa8\x95\x13\x12\x84\x03\x5b\x67\x19\x62\x6e\x41\x1b\x58\x71\x21\x6d\x32\x58\xd5\x2a\x73\x42\x2b\x4f\xfa\x5e\x9b\x4f\x7a\x39\xbc\xd7\xcb\x11\x7c\x1f\x00\x90\x76\xe5\x0e\xa6\x84\x3d\x18\x80\xf7\xf9\x90\x0e\x05\x4c\xe1\xed\x3b\x10\xf0\xff\xf0\xfb\x5b\xfa\x78\xf3\x26\x70\x00\x64\x5a\x59\x2d\x31\x91\x7a\x3d\x64\x59\x81\xd9\x86\x22\x64\x1d\x77\xb5\xa5\x10\x30\x78\x03\xe5\x2e\xa9\x74\x7e\xce\x4b\x1c\x79\x1e\x82\xdc\xc0\x14\x3a\x27\x25\x0f\xc2\x15\xe7\x57\x43\x96\xe3\x8a\xd7\xd2\xb1\x8e\xb0\xdc\x55\x3a\x27\xe2\x24\xd3\x06\xbf\xfe\x46\x50\xc9\x1a\xdd\xb0\x8f\xfa\x4c\x95\x4f\x57\x8b\xf3\xc4\x3a\x23\xd4\x5a\xac\x76\x43\x0f\x32\x1a\x3d\xd7\xf8\x42\xe7\x4f\x54\x84\x37\xc0\x40\x58\x10\xca\x5b\x81\xf1\x9a\xa4\x06\xab\x92\xaa\xe0\xb6\x91\x29\x56\x30\x7c\x7e\x09\xd3\x29\xb0\xf7\x5c\x48\xcc\x59\xe3\x28\x00\x57\x18\xfd\x00\x2f\x89\x5c\x79\x72\x70\x9a\xb2\x93\xfe\x64\xba\xac\x24\x52\xb0\xd8\x3b\x8f\xf0\xf8\x9a\xc4\xab\x10\xef\x3d\xa1\x06\x5d\x6d\x14\x38\x53\x63\x0f\x24\x4d\xe1\x4a\x22\x56\x3e\xc4\x1c\x72\x5c\x09\x85\x39\xf0\x52\xd7\xca\xf9\xca\x11\x25\x26\x9e\xd4\x12\xdd\xf0\x77\xf2\x1d\xf1\x46\x23\xe8\x3e\x07\x5d\x3b\x9f\x48\x14\x72\x42\xaa\x0e\x9b\x16\x6c\x62\x83\x47\x9f\xc5\x64\x9e\xa9\x55\xcc\xe1\xa0\x81\x02\xdc\xa2\x72\x30\xc4\x51\x02\x73\x07\xb9\x46\x4b\x05\x15\x52\x9e\x48\x5c\x81\x9e\xbc\x73\x0c\x52\x01\x87\x26\x20\x08\x4c\xea\x87\x23\x89\x5b\x94\x50\x19\x51\x0a\x27\xb6\xd8\xcb\x77\x2a\xf9\x7b\xbd\x1c\x03\x06\xdf\xa4\x29\xfc\xfc\x69\xf1\xe7\xd1\xcf\xd7\xf3\xb3\xd3\xa3\x9f\x3f\xcc\xaf\xaf\x3e\x1e\xc7\x1a\xd8\xfc\x61\xbd\xee\xbe\x10\x12\x15\xcd\x38\x22\xcb\x4e\xb8\xc3\x44\xe9\x87\xe1\xa8\x3d\xc2\x24\xd3\x65\x29\x5c\x62\xeb\x65\xc8\xb8\xe1\xdb\x31\xfc\x31\x7a\x17\xd1\xb2\x32\x82\x45\xd8\x78\x4c\xcd\x0c\xcd\xc1\xab\xac\x84\x29\x28\x7c\x98\x9d\x0d\x03\xf3\x68\x8f\x27\x5c\x5e\xfa\xef\x0b\x9d\x0f\x3b\xa4\xb1\x57\x58\x50\x67\xf1\xf9\x19\x6e\x92\x12\x1d\xcf\xb9\xe3\x89\xe4\x4b\x94\x36\xb9\xd7\x4b\xb5\x6f\xdf\xcb\xb4\x4b\x94\x5a\xad\xad\xd3\x30\x05\x4c\x0c\x56\xda\x33\xd0\x97\xe4\x19\x0e\x59\xca\xc6\xe4\x88\xd1\xcb\x10\xc1\x3d\x9e\x3f\x7c\x0e\x82\xff\x8f\xf3\x1c\x50\x6d\xc9\x32\x9b\x44\x0b\x51\x6d\xbf\x72\x63\x61\x0a\x37\xb7\x91\xec\x2e\x41\x9e\x15\x14\xbc\x04\xd5\x76\x0c\x4d\x48\x87\x5b\x2e\xc7\xb0\xc1\xdd\x18\x64\x88\xe9\xab\x94\x4d\x59\x44\x29\x49\x55\xdb\x62\xf8\x9d\xec\x99\x04\xa0\x2d\x97\x35\x4e\xe8\xcf\xa3\x8f\x5f\xf8\x37\xea\x6a\x31\x33\xe8\x2c\x70\xbb\xa7\x76\x4f\x6a\xa4\x78\x41\x72\x5b\x79\xba\xc4\x16\xec\x01\x01\xbf\x55\x52\x64\xc2\xc9\x1d\x2c\xa5\xce\x36\x49\x5b\xe7\x77\x49\xa6\x95\xe3\x42\xd9\xe1\x0d\x0b\x1c\xec\xd6\x6b\x39\x7a\x5a\xe1\xb1\xb8\x1b\x19\x1f\xd0\xb5\x22\x56\x46\x97\xbe\x7e\xd6\x62\x8b\x8a\x8e\x63\xae\x3d\x75\x44\x04\xec\xfc\x11\x0f\xbc\x57\xde\x1b\x5d\x4e\x5a\xa1\x10\xd1\x3f\xe3\xee\x12\x57\x13\x88\x4e\xc4\xa4\x32\x9a\xc6\xd1\x3c\xf7\x66\x07\x57\x46\x9e\xf0\xb7\x73\xec\x20\x18\x19\xb3\xca\xda\xe2\xf3\x4b\x11\xda\x53\x8c\x1d\xcf\xe6\x27\x77\x97\xa7\x17\x8b\xbb\xcf\xa7\xff\x61\x7b\x4a\x4e\x60\x0f\x2d\x0a\x1c\x44\xcf\xc4\x38\x3a\x5d\xc5\x46\xd1\x86\x91\x96\x0d\x8b\x61\x99\xd0\x5b\x34\x46\xe4\x61\x89\xe0\xce\x61\x59\x39\x6a\x3b\x16\x9d\xf7\xa2\x17\x64\x03\x1c\x1d\xeb\x12\x5d\x41\x1d\x10\xa5\xf5\x3d\x73\x5f\xf7\x46\xeb\xd9\x97\xc5\xf9\xe9\xdd\x5f\x97\x5f\xd8\xf8\x89\xae\x99\xd4\x0a\xff\xba\xfc\x12\x34\x3d\xcc\x7d\x75\xf5\xf1\x20\xaf\xb5\xc5\x2b\x9c\x1f\xe6\xd7\x07\x39\xd7\xc2\xbd\xc2\xf9\xf1\xf4\xf8\xe4\x6e\xb6\x38\x3b\x9b\x5f\xdf\xcd\x4f\xfa\x00\xb1\xa2\x1f\x7b\x45\x6f\x2b\xcc\x9a\x6c\x45\x63\x6f\xde\xde\x52\x0d\x52\xd1\x07\xec\x9e\xff\x33\xad\x56\x62\x0d\x25\xaf\x60\xab\x65\xdd\xef\x3e\x1e\x25\x1c\xfa\x1e\xe0\x03\xd8\x28\x14\x7a\xe1\x38\xf2\x9f\xf1\xaa\x4d\xbb\xd8\x62\x1f\x1f\xc7\x7b\x0c\xac\xb7\x48\xb1\x31\x50\x20\x77\x27\xc2\x4c\xe0\xfb\x63\x3b\x06\xc7\x1d\xb5\xc8\x8d\xe5\x6c\x1c\x33\x7b\x02\xdf\xe3\xd7\xb9\xbf\x8e\x65\x03\x9e\xf5\xf6\xdd\x0f\x2d\x0f\x16\x9c\xd1\x30\x7d\xd9\x0c\x3f\x6b\x2f\xb8\x2b\x26\xc0\xd2\x42\xeb\x0d\xfb\xb1\xfa\x7b\xf4\xd6\x64\xec\x47\x36\x3c\x03\x4f\xad\x2d\xd8\x18\x0c\xf2\x7c\xa1\xe4\x6e\xe2\x37\x82\x68\x4a\xaf\x34\x0a\x6c\xf6\xd3\xa6\x23\xc7\x9f\x30\x6d\xbe\xae\x2a\xcc\x86\x38\x8e\x4a\x8c\xf7\xf6\xd9\x51\xc4\xba\x5e\x9c\x2c\x26\x14\xa8\x2d\x1a\xaa\x1a\x61\xa9\x54\xb8\x02\xa1\x84\x83\xd6\x59\x40\x6b\x9f\x5f\xbe\xe1\xb7\xe4\xff\x02\x6b\xdf\xab\x44\x3d\x6b\x3d\x4b\x9e\x8c\xc2\x6e\x0f\x4c\x1b\xae\x94\x76\x9c\xba\xae\xbd\x61\xb4\x1f\x2d\xd1\xf1\xa4\xb7\x63\x0a\x9d\x12\xe0\x51\x17\x2b\x76\x4b\x0b\xf8\x0d\x4d\xf1\x27\x0b\x63\x94\xe3\xa7\xfc\x2d\x8b\x56\x7d\xd2\x42\x79\x17\xf9\x07\x08\x59\x54\xf2\x0d\x02\xa7\x71\x4c\x5b\x49\xc9\x55\x3e\x89\x6e\xa3\xf1\x5d\xe6\x71\xc4\x86\x07\xcb\xbd\x16\x6a\xc8\xe0\x97\x5f\x80\x79\x3f\x65\x65\x42\x8a\xdf\xb0\x92\x0b\x95\xd8\xc2\x6b\x13\xf8\x06\x83\x7f\xb8\x25\x0f\x9e\xec\xb3\x33\x83\xdc\xaf\x63\xa1\x48\xa8\xc6\xc8\xba\xac\xec\xfc\xa4\xe2\x42\x91\xa6\x3f\x58\x98\xb3\xd2\x6f\xcb\x9b\x04\xbf\x39\x54\x96\x9c\x9a\xb4\x90\x49\x46\x52\x90\x88\x5e\x94\xdf\xac\x82\x2f\x17\xc9\x3f\xd2\x23\xb0\x47\x5d\x7a\x0f\x80\xa8\x41\xbc\x7e\xaa\x45\x7c\x28\x26\x49\x12\x5c\x14\x97\xe0\x6e\x51\x7a\x47\xbb\x68\xbb\x1b\x3e\x49\x6c\xff\xda\x1b\x43\x58\xa3\xda\x87\x91\xff\x79\xcd\xd7\x30\x0d\x9f\xcd\x4a\x86\x95\xa6\x3e\x3a\x7d\xda\xcd\x9b\xf1\xf6\x53\xc3\xd8\x8c\xb6\x1e\x90\x7f\xfb\x1d\x7c\xee\xc5\x89\xf5\x6c\x3e\xc2\x4f\x53\x60\xed\x7a\xff\x4c\x78\x18\x07\x0d\x77\x34\x3b\xd0\xc6\x06\x41\x12\x8f\xf6\x1a\x4b\x33\x6f\x27\xb1\x4f\xf5\x1a\xd0\xd7\xd9\x95\x1f\xb4\x5d\xef\x6f\x24\x3e\x8e\x0f\xd1\x7e\x59\xcc\x8e\xbf\xdc\x5d\x1c\x5f\x7f\xec\x38\xbc\x37\x5f\xa0\xbf\x3c\xfd\x3a\xbf\x9a\x2f\xce\x0f\xcd\x96\xc0\x70\x3b\xee\x7c\x36\x69\x5d\x37\x8e\x0f\xb9\x50\x71\x70\xc3\xfa\x3e\x64\x7d\x9e\x8b\x5a\xca\x0b\x2d\x45\xb6\xa3\xc5\x41\x3e\xf0\x9d\x8d\x16\xf7\x7b\xf4\x01\xd3\x5f\xec\xbd\xde\x9e\x46\x3b\xef\xe9\x7e\x2a\xed\x2d\xe6\x95\xce\x95\x6f\xf5\xe4\xf4\x79\x97\x4e\x7b\x71\x61\x1b\xa1\x72\x36\xf1\xef\xc2\xa8\x1a\xe3\x95\xf8\x8a\x86\xaa\x8e\x2e\xb6\xbf\x35\xe7\x4d\x0d\xb3\x6e\x11\x63\x24\x81\x4d\xa0\x91\xd5\x3f\xb6\x15\xcf\xe8\xae\xed\x17\xed\x6d\xd8\xcc\x59\x7f\x9f\x63\x05\x1a\xe1\xf8\xda\x33\xfc\xab\xd6\x9b\x0d\x6f\xe9\x49\x34\x57\x7c\x8d\xf9\x9f\x3b\x16\x93\x88\x35\x5b\x5d\x0b\xda\x6b\xc0\x84\x1c\xd7\xbd\xa8\x3a\x35\x80\xbe\xda\x06\xad\xe3\xc6\x85\xd8\x10\xe6\x39\x6e\xd1\x74\x1a\xf6\x9a\x74\x17\x1d\xe8\xe9\xdb\x99\xee\xd5\xa1\x07\xe6\xb8\x7f\xe9\xc3\xcf\x26\x9d\xef\xf7\x6e\x63\xee\xec\x61\xfb\x8b\x74\x29\x54\x4a\xa3\xf2\xc9\xb1\x9f\xa1\x4d\xa3\xee\xdd\xdd\xf6\x09\xd3\x14\xde\xcf\xff\x7d\x76\x3a\x81\x59\xc1\xd5\x1a\x69\x44\xb0\xf9\xea\x5c\xbb\x0b\x83\x16\x95\x63\xcf\x34\xec\x12\x94\x75\x19\xda\x52\x35\xab\xf3\x6d\xfb\x76\x7f\xf4\xad\x6b\x2f\xe1\x66\x67\x43\xdf\x4b\x7f\x90\x5b\xb3\x66\x65\xfa\x1f\x32\xac\x73\x74\x3f\xc1\x5e\x4b\xb1\xc3\x49\xf6\x7a\xa2\xc5\x7c\x69\xd2\xe6\xb9\x2e\x4d\x0c\x26\xc0\x30\x2b\x34\x14\x28\xa5\xa6\xa1\xea\x7f\xad\xb5\xce\x97\x3b\x64\x1d\x48\x70\x18\x7e\xab\xb4\x71\x36\x31\xb5\x82\x29\x0d\x82\xf6\xa4\xfb\x8f\x30\x98\xf6\xfe\x57\x6c\xf0\xdf\x00\x00\x00\xff\xff\x86\xa8\xef\xe2\x82\x14\x00\x00")

func jsRunJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunJs,
		"js/run.js",
	)
}

func jsRunJs() (*asset, error) {
	bytes, err := jsRunJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRun_mockJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xcf\x4a\x03\x41\x0c\xc7\xf1\xfb\x3c\xc5\x8f\x9e\x76\x69\x4d\x3d\x0a\xd2\x9b\x08\x7a\xf6\x05\x66\x87\xb8\x9d\xad\x9b\x2c\x49\x86\x0a\xe2\xbb\xcb\x1e\xec\x9f\x6b\xf2\x81\xdf\x37\xed\xf7\xf8\x38\x56\xc7\x92\xcb\x29\x8f\x8c\x59\xcb\xc9\x11\x47\x86\x35\xa1\xc9\xf1\xd9\xa4\x44\x55\x71\xc2\x5b\xa0\x64\x81\xf1\xf2\x95\xcb\x15\xa8\x21\xd8\xa3\xca\x48\x29\xfd\x73\x9c\x73\x8d\x57\xb5\x77\x1d\xba\x49\x87\x1e\x3f\x09\x30\x8e\x66\x82\xb0\xc6\xe9\xf7\xc6\x5a\x93\x15\xed\xc0\x77\x6e\xd2\x81\x24\xcf\x8c\x2d\x36\x0f\x1b\x6c\xf1\x92\x83\x49\xf4\xdc\xf5\x97\x13\x53\xd1\x79\xae\x41\xde\x06\x0f\xab\x32\x76\x8f\x3b\x3c\xf5\xcf\xeb\x00\x7f\x2f\x6a\xe1\x74\x6d\xc1\xe1\x26\xec\xf2\xb7\x26\x38\xac\x15\xe9\x2f\x00\x00\xff\xff\x05\x8c\x6a\x5e\x10\x01\x00\x00")

func jsRun_mockJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRun_mockJs,
		"js/run_mock.js",
	)
}

func jsRun_mockJs() (*asset, error) {
	bytes, err := jsRun_mockJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run_mock.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\xdf\x3e\x75\xe3\xd2\xfb\x04\x73\x10\x5d\x51\xf0\xe8\x4d\x44\x42\x52\xdd\x1d\x08\x55\x6d\x55\x7a\x7b\x17\xd9\x77\x97\x74\xdc\x71\x66\xf0\xe0\x31\xf9\xc9\x97\xbf\x3e\xea\xfe\x1e\x5f\x97\x64\x48\x86\xb2\x10\x74\x63\x26\xc5\xae\x7e\x5d\x13\xcf\xb0\xa0\x69\x2d\xa3\x0b\xc2\x26\x99\xc6\x2c\x73\xdf\x7d\x11\x1f\x6b\xf8\xee\xfd\xe7\x0f\x08\xa2\xd4\x0d\xce\x4d\x1b\x87\x92\x84\x31\x25\xa5\x87\x47\xe2\xd2\xd3\x80\x5f\x0e\x78\xf4\x0a\xaa\x17\x9f\x3c\xc7\x4c\x8a\x13\x98\x76\x3c\x5c\x5c\xf5\x83\x73\xc0\x6b\x97\x59\xc8\x90\xf8\x28\x64\x41\x56\xaa\x87\x7d\x49\x61\xc1\xd4\x0f\xb5\x2a\x3d\x51\xd8\x0a\x45\x98\xa0\x2c\xbe\x60\x27\x04\xcf\xf0\x21\x90\x59\x43\xd5\xd7\xa2\x69\x4e\xec\x73\xfb\x1f\x7b\x2a\x8b\x6c\x05\x4a\x3f\xb7\xa4\x75\x84\x5e\xf4\x0e\x4a\x3e\xe7\xe7\x3b\xf8\x9c\x65\x4f\x3c\x0f\xc7\xdb\xcd\x48\x51\xa4\xc1\x56\x6f\x4d\x50\x03\x79\x95\x8d\xe3\xe8\x00\x7a\x5a\x45\x8b\x8d\x3f\x5a\x70\x02\xd5\x49\xd2\x84\xfe\x8d\xd2\x9c\xac\x90\x1e\x83\x5a\x73\x01\x5c\x99\x64\xf9\x03\x5c\x9a\x07\x43\xa4\x29\x31\xc5\xee\x10\x02\x28\x95\x4d\xd9\x01\x2f\xf5\x7c\x4d\xec\x2f\xa5\x0e\xee\x06\x7d\x84\x86\x2c\x3e\x52\x1c\xf1\xb1\xcd\xdb\xe1\x2d\x68\x2c\xcf\x2b\x0d\xe7\x9e\x97\x98\x6f\x2d\xfc\xfe\x5f\x6d\xcf\x7d\x28\x62\x12\xbd\x85\xdf\xb6\xaf\x7b\x30\x55\x43\xff\xf8\xaf\xe6\x53\x4f\x83\x7b\x71\xee\x55\xe9\x79\x91\x70\xfa\xbb\x54\xee\x77\x00\x00\x00\xff\xff\x0b\x8b\xea\xff\xb1\x02\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsWaitgroupJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x8e\x9c\x30\x10\x86\x7b\x3f\xc5\x5f\x82\x14\x99\x27\xd8\x32\x8a\x92\x22\x4d\x22\xa5\x88\x52\x18\x18\x62\x73\xc6\x83\xec\xe1\xd8\xd5\x89\x77\x3f\xd9\xbb\x2c\x48\x57\x5e\x61\xad\xd6\x78\xbe\xff\x9b\xb1\x9b\x06\x7f\x8c\x93\x6f\x91\x97\x19\xab\x71\x92\x30\x70\xc4\xb4\x78\x71\xb3\x27\x8c\xdc\x26\x08\x63\x70\xc1\x25\xab\xf1\x5d\xb0\x3a\xef\x21\x36\xf2\x0a\x13\x40\x31\x72\x54\x4d\x03\x93\x90\x98\x43\xfe\x35\xb9\x0c\x91\x66\x8e\x92\x9e\x87\xb4\x1a\x96\xd0\x89\xe3\x70\x44\x56\x35\xde\x14\x20\xd6\x25\x5d\xa2\x2e\xf8\xfb\x4f\x29\x20\x03\xfb\x3e\xaf\x8c\x0b\xb4\x16\xa4\x30\xc4\x52\xf1\xfc\x9f\xcb\xf7\xd2\x7c\xf4\x82\x1d\x5f\x8d\xdc\xde\xb9\x27\xb2\x9e\x97\x64\xcb\x17\x05\x6c\x8f\x88\xb8\x84\xbc\x12\xe8\x95\xe2\xad\x44\xb8\x50\x22\x0a\xfe\x0b\x4c\xe8\xf3\xdf\x70\x1a\x8d\x58\x9a\xb2\x48\xc7\xd3\xec\x49\x48\xef\x12\x19\x76\x92\xf8\x68\x30\x70\xfc\x6a\x3a\x5b\x3d\xc7\x50\x8d\xfb\x21\x60\xd4\xad\xe9\x5e\x72\x6c\xe8\xab\xba\x6c\x6e\xf5\x01\xc8\xf9\xd5\x59\x3d\x6f\x3c\xac\x96\x20\xce\xdf\x6f\xca\x44\x3a\xc4\xf0\x93\x85\x20\xd6\x48\x61\xa0\x67\x4a\x08\x2c\xa5\xed\xdc\x64\xb1\xc2\x6f\x4b\xb7\x3b\x73\x5a\x92\xa0\x25\x24\x31\x51\xa8\x07\x5d\x85\x62\x30\xde\xdf\x34\xaa\x5f\x44\xc7\xbd\x95\x66\x39\xe2\x07\xb7\x27\xef\x5a\x9d\x6c\x3f\x35\x8b\x67\xbb\x8f\x29\x6c\x6a\x53\x8a\xae\xe5\x41\xe9\xe3\xc1\x5e\x0e\x23\xf5\x1e\x00\x00\xff\xff\x60\x6f\x0e\xe7\xca\x02\x00\x00")

func jsWaitgroupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsWaitgroupJs,
		"js/waitgroup.js",
	)
}

func jsWaitgroupJs() (*asset, error) {
	bytes, err := jsWaitgroupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/waitgroup.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/event.js": jsEventJs,
	"js/job.js": jsJobJs,
	"js/mock8s.js": jsMock8sJs,
	"js/run.js": jsRunJs,
	"js/run_mock.js": jsRun_mockJs,
	"js/runner.js": jsRunnerJs,
	"js/waitgroup.js": jsWaitgroupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"event.js": &bintree{jsEventJs, map[string]*bintree{}},
		"job.js": &bintree{jsJobJs, map[string]*bintree{}},
		"mock8s.js": &bintree{jsMock8sJs, map[string]*bintree{}},
		"run.js": &bintree{jsRunJs, map[string]*bintree{}},
		"run_mock.js": &bintree{jsRun_mockJs, map[string]*bintree{}},
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
		"waitgroup.js": &bintree{jsWaitgroupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

