// Code generated by go-bindata.
// sources:
// js/event.js
// js/job.js
// js/mock8s.js
// js/run.js
// js/run_mock.js
// js/runner.js
// js/waitgroup.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsEventJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4a\xc6\x30\x10\x85\xf7\x39\xc5\xdb\x55\x41\xd2\x13\x74\xe1\x42\x70\xed\x0d\xa6\xc9\xd4\x04\x62\x52\x33\x53\x6b\x91\xde\x5d\x42\x94\x9f\xf2\xef\x86\x79\x8f\xef\x9b\x19\x47\xbc\x7c\x71\xd6\x57\xca\x3e\x71\x85\x67\x71\x35\xce\x2c\xd0\xc0\x48\x51\x14\x65\x01\xb7\x4a\x5b\x91\xe2\xd9\x45\x8f\x28\xa0\x9d\x2a\xa3\x2c\xd6\x2c\x5b\x76\x1a\x4b\xbe\x90\x1e\x1e\xf1\x63\x80\xce\xaf\x47\x47\x20\xfc\x69\xde\x59\xbb\x61\xa5\x4a\x1f\x18\x3c\x29\x0d\x4f\xd8\x43\x74\xa1\xc1\x5b\x34\x17\x7f\x34\x79\x9b\x2b\x7f\x6e\x2c\x6a\x0d\xa0\x21\x8a\x5d\x37\x09\x98\xf0\x6f\x6e\xb2\xf3\x96\xa5\xf4\xd6\xfb\x77\x95\xd3\x18\xfe\x5e\x4b\x55\xb1\x97\xb7\xa7\xcb\xed\xe6\x37\x00\x00\xff\xff\x38\xd9\xc5\x1d\x16\x01\x00\x00")

func jsEventJsBytes() ([]byte, error) {
	return bindataRead(
		_jsEventJs,
		"js/event.js",
	)
}

func jsEventJs() (*asset, error) {
	bytes, err := jsEventJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/event.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsJobJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\x41\x6f\x1b\x37\x13\xbd\xef\xaf\x78\x9f\x4e\xd2\x57\x65\xd7\x41\xda\x1e\x62\xe8\x60\xd4\x0e\x90\x14\x08\x82\xc4\x4d\x0f\x45\x11\x70\xb9\xb3\x5a\xc6\x5c\x72\x4b\x0e\x65\x0b\x81\xff\x7b\x31\xa4\xb4\x96\x95\xf4\x62\x83\x23\xce\x9b\x37\x6f\xde\x70\x9b\x06\xb7\x03\xa1\xa3\x5e\x25\xcb\x30\xa3\xda\x12\x4c\x44\x64\xaf\xef\x90\xda\xe4\x38\xe1\xe5\xaf\xf5\xc5\xcf\xf8\x09\xa3\xba\x23\x28\xd7\x61\x6b\xb8\xae\x76\x2a\x40\x69\xd3\xbd\xcd\x39\x1b\x2c\xe4\xf0\xa2\xa4\xbc\xb6\x8a\x29\xf2\xa2\xaa\x9a\x06\x1f\x82\x67\xcf\xfb\x89\xd0\xfb\x80\x77\xbe\xad\xab\x3e\x39\xcd\xc6\x3b\x39\x2d\x9d\x1a\x69\x0d\x56\xf1\x2e\xae\xf0\xad\x02\x04\x79\xdc\x63\x03\x1e\x4c\xac\x2a\xc0\xf4\x58\xfe\x8f\x1e\x26\x1f\x38\xd6\x5f\x68\x47\x8e\xcb\x4d\x80\x87\xe0\xef\xb1\xc8\x31\x38\xcf\xe8\x7d\x72\xdd\xa2\x02\x1e\x25\xb3\x69\xf0\x5e\x8d\x84\x7b\x63\x2d\x5a\xd2\x7e\x24\xf0\x40\x98\x02\xf5\xe6\x21\x13\xca\x47\xdf\x35\xda\xbb\xde\x6c\x47\x35\x41\x08\xc5\xba\x42\xae\x5f\xcb\x09\x9b\x1c\xbc\x2c\x88\xb7\x42\x55\x54\x92\x54\x6b\x22\xc3\xf7\x85\x3f\xd8\x23\x24\x57\x8b\xa8\x7b\xa8\x40\xa0\x07\xd2\x89\xa9\x83\x71\x88\xf4\x4f\x22\xa7\x09\xc6\x45\xd3\x11\x7c\x5f\xf0\x14\xe2\x40\xd6\x62\xd9\xb4\xc6\x35\x71\x58\xcd\xb5\x0b\xe8\x06\x7f\xfd\x7d\x79\x90\xe1\x44\xa6\xb3\x3b\xf9\xff\x49\xdf\x57\xd0\xde\x5a\x2a\x3a\xfb\x3e\x37\xd0\xec\x94\x4d\x84\x49\x99\x10\x25\x46\x6e\x67\x82\x77\xa3\x88\xb7\x53\xc1\xa8\xd6\x9e\x74\x4e\x6e\x87\x0d\xbe\x3d\x5e\x1e\x10\xc5\x29\xc5\x21\x62\x02\xe5\xe0\x27\x01\x57\x16\xac\xb6\x73\x96\x39\xf8\x61\xf6\xc6\xe5\x4c\x48\xc4\xf5\x3d\x6e\xde\x7f\xfe\xf2\xf9\xea\x63\xd1\x39\x63\x7d\x22\x1d\x88\x0f\xc2\xe3\x76\x30\xb1\x4c\x6c\xf2\x53\x12\x2b\x65\xa5\x4f\xc8\x16\xc0\x23\x63\xdc\x1b\x1e\xf2\x95\xd2\x5e\xb6\x80\x08\x2e\xa1\x98\xa1\xeb\x63\x07\x47\x64\xbf\xa3\x10\x64\x08\x0a\xa3\x62\x3d\x18\xb7\x95\x02\xd9\x7b\x7d\xf0\xe3\xb1\xa2\x70\x9e\x5b\x2b\x58\x31\x8b\x72\x68\x6a\xf2\x5d\x36\x98\xec\x0c\x31\xda\xbd\xcc\x7f\xb9\x5a\xe7\xb6\xb4\x77\xac\x8c\x2b\x46\xc9\x3e\x12\xa3\x14\xbf\x41\x07\x52\x4c\xdd\x0c\x7e\x40\x3a\xe0\x86\x24\x7e\x71\x5d\xcc\x3f\xe2\xab\x6f\xc5\x5b\xbf\xa7\x96\x82\x23\x3e\x19\x92\x5c\xdc\xe0\xb8\x50\xcb\x67\xd6\x68\x95\xbe\xdb\x06\x51\x63\x79\xb6\x3d\x4f\x77\xee\x95\xe1\xe5\xaa\xca\x81\x40\x9c\x82\x2b\x6b\x07\x94\xb9\x9f\x01\xfd\x67\xad\xa3\x10\x9b\x2c\x80\x84\xd6\x38\x2b\x7a\x39\x83\x36\x0d\xa4\xee\x1f\x8e\x8d\xbd\xf6\x2e\xcb\x37\x50\x28\x2f\x84\x14\xbb\x57\xa1\x8b\xd0\x7e\x9c\x14\x9b\xd6\x58\xc3\xfb\x35\xda\xc4\xe8\x3c\x45\xd9\x73\x19\xd8\x61\xa8\xd7\x37\x1f\x3e\xde\xfc\x76\x75\x7b\x73\xfd\x1a\x7f\x96\x3d\x47\xa0\xd1\xef\xa8\x43\x97\x82\x4c\xf6\xca\x4e\x83\xaa\x4e\x3a\x7e\xaa\x7c\xd6\xcf\x8f\x74\x38\x61\x9c\xff\x44\x24\x49\x87\xca\x73\x1c\x24\xb0\xf8\x94\xb4\x26\xea\x28\x3f\x3d\x4d\xf3\x94\xb1\x5c\x41\x2b\x27\x9c\xb4\xb2\x96\x3a\x78\x87\x27\x39\xe5\xdc\x7e\x25\xcd\xb1\xfe\x3e\xcf\x44\xa8\xc4\x7e\x54\x6c\x24\x77\x7f\x44\x68\xf7\xf3\xe8\x4f\xb3\xde\xf6\x99\x4f\x21\x1f\xb1\x78\xa3\x8c\xa5\x6e\xb1\x2e\x0e\xca\x0f\xa5\x6c\x1b\xe8\x41\x53\x5e\xdc\xfa\x79\x5e\x72\x31\xeb\x3f\xfa\x20\x0b\xa7\x1c\x5e\xfe\x82\xd1\xb8\xc4\x14\xb1\x7c\x75\x71\x81\xff\xe3\xd5\x8b\x48\xda\xe7\xed\x62\x0a\x3b\x65\xe3\x6a\x3d\x43\x83\xcd\x48\x3e\xf1\xf3\x0a\xb3\xe6\x3f\xb2\x8e\xc4\xdf\xf8\x20\x9f\x81\x71\xff\x9d\x61\x8a\x5f\x1e\xab\xea\x18\x7f\xe7\x5b\x6c\xe4\xa3\x51\xfd\x1b\x00\x00\xff\xff\x5d\x97\x1d\x50\xb9\x06\x00\x00")

func jsJobJsBytes() ([]byte, error) {
	return bindataRead(
		_jsJobJs,
		"js/job.js",
	)
}

func jsJobJs() (*asset, error) {
	bytes, err := jsJobJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/job.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsMock8sJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8a\xdb\x30\x14\x85\xf7\x7e\x8a\x43\xe8\x62\x02\xc1\x43\xb7\x81\xac\x0a\xdd\xb5\x94\x0e\x74\x53\x4a\xb9\x91\x8e\x13\x75\x6c\xc9\xe8\x67\x3a\x50\xfc\xee\x45\xae\xa5\xd8\xd9\xb4\x8b\x6e\x94\x9b\xfb\xf3\x59\xe7\xea\x3c\x3e\xe2\x29\x3a\x4f\x0c\x4e\x3d\x63\x74\x1a\x9a\x9d\xb1\x26\x1a\x67\x03\xae\xf4\x84\x04\xec\xac\x0c\xdc\xe1\x88\x37\x9e\xc1\x25\xaf\xd8\xbc\x88\x9f\x67\x3e\x39\x1d\x70\xc2\xaf\x66\x6a\x9a\x0a\x53\xce\x76\xe6\x32\xc8\xf8\x4f\x88\x77\x73\xf7\x87\xdc\xbd\x80\x72\xe5\x39\x9d\xe9\x2d\x23\xff\x64\x81\x9f\x26\x5e\x3f\x3e\x1d\xd1\x25\xab\xf2\xf5\x1e\x6c\xd8\xcf\x05\xc0\x33\x26\x6f\x17\x98\x67\x03\x4c\x05\x53\x72\x0b\x44\x39\xcf\x2f\x6f\x8f\xcb\xdc\xe8\x74\x09\x81\x0b\xe3\x1a\x2e\x03\xf7\xb5\x56\x3f\xf1\xbd\xed\x8c\xd5\x0f\x45\xf9\xe1\x36\xc0\x7e\xd3\x5f\x27\xd8\xb3\x1d\x18\x45\x4b\x94\x36\x53\x71\x3a\x21\xff\xd6\xd6\x69\xbf\x84\xd3\x61\x09\x94\xa7\x44\xae\x6e\xa3\xd9\xad\xe1\x79\xd1\x49\x29\x52\x53\x1f\xf0\x39\x59\x6b\xec\xe5\x00\xb1\x1a\xef\xc5\xf4\xd4\x10\x4f\x04\x37\x10\x2f\xd2\x1b\x9d\xcf\xc4\xd0\x56\x80\x66\xd7\x86\x28\x31\xcd\xcb\xc5\x78\x95\xc0\x23\x76\x15\xba\xc3\x54\x7b\x8b\xd6\xaf\x79\xa8\x2a\xe9\xe5\xcc\x3e\xb4\x3f\xdc\x39\x6b\xf9\x86\x53\x66\x36\xf7\xeb\xca\xb9\x45\x5b\x53\xce\x59\x25\x5f\x23\x6d\xc8\x26\x2b\x0f\x50\x3d\x73\x7b\x91\xbf\xad\x61\x6b\x9e\xff\x76\xbf\x6c\x1d\xbe\x8e\xce\xc7\xd0\xae\x2c\x5e\xc2\x4d\x6d\xe3\xdd\x6d\xa2\xf6\x6d\x9c\x7c\xfb\x73\xc7\x99\x2d\x5a\x1d\xfc\x3b\x00\x00\xff\xff\xc6\x15\x83\xe4\x98\x03\x00\x00")

func jsMock8sJsBytes() ([]byte, error) {
	return bindataRead(
		_jsMock8sJs,
		"js/mock8s.js",
	)
}

func jsMock8sJs() (*asset, error) {
	bytes, err := jsMock8sJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/mock8s.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6b\x6f\xdb\x38\xd6\xfe\xee\x5f\x71\x86\x28\x3a\x32\xaa\xc8\x2d\x06\x78\x31\x70\x5f\x63\x91\x49\xd2\xd6\x6d\x73\xd9\x24\xd3\xdd\x45\x10\x04\xb4\x74\x6c\xb1\xa6\x48\x81\xa4\x9c\x7a\x8a\xfc\xf7\xc5\x21\xa9\x8b\x93\xb8\x05\x06\xfb\x25\x51\xc8\x73\x9e\x73\xbf\x30\x93\x09\x5c\x97\x08\x42\x39\x34\x8a\x4b\x0b\x4b\x6d\xc0\x34\x4a\x09\xb5\x02\xc7\xed\xda\x66\x70\x5d\x0a\x0b\x55\x63\x1d\x2c\x10\xa4\xe6\x05\x16\xb0\xc0\xa5\x36\x08\x5c\x6d\x41\x2f\xc1\x95\x38\x9a\x4c\x40\x2f\xbe\x62\xee\x2c\xb8\x92\x3b\x68\x2c\x12\x50\x32\xce\x46\x93\x09\xdd\x1e\x4a\x09\x9f\x9a\x05\x1a\x85\x0e\x2d\x1c\x5e\xcc\x21\xe7\x52\x5a\xb0\xa5\x6e\x64\x11\xc0\x73\x2e\xc5\x5f\x58\x40\x89\x06\x33\x38\x77\x25\x1a\xa8\x74\xd1\x48\xec\xe8\x94\x76\x04\x47\xbc\xf0\xeb\xba\x03\xfc\x15\x0a\x61\x30\x77\x72\x9b\x8d\x46\x1b\x6e\xc0\x8a\x02\x73\x6e\xe6\x15\x5f\x21\xcc\x80\xf1\x5c\x14\x22\xcf\xf8\x5f\x8d\xc1\xdc\x64\x42\x4f\x36\xb9\x3d\x88\x54\x53\xc9\x1d\x5a\xc7\x46\x04\x7d\xcf\x85\x03\xc7\xd7\x68\x81\xc3\x57\xbd\x38\x90\x62\x8d\xd1\x3a\xe0\xaa\xf0\x04\x16\x1a\xe5\x84\x04\xe1\xc0\x36\x79\x8e\x58\x58\xd0\x06\x96\x5c\x48\x9b\x8d\x96\x8d\xca\x9d\xd0\xca\x93\xbe\xd3\xe6\xa3\x5e\x24\x5f\xf5\x22\x05\x1c\xc3\xf7\x11\x00\x29\x58\x6d\x61\x46\xf0\xa3\x11\x78\xb7\x27\x74\x28\x60\x06\xaf\xdf\x82\x80\xff\x87\xdf\x5e\xd3\xc7\xab\x57\x81\x03\x20\xd7\xca\x6a\x89\x99\xd4\xab\x84\xe5\x25\xe6\x6b\x0a\x92\x75\xdc\x35\x96\xa2\xc0\xe0\x15\x54\xdb\xac\xd6\xc5\x19\xaf\x70\xec\x79\x08\x72\x0d\x33\xe8\xfd\x94\xdd\x0b\x57\x9e\x5d\x25\x98\x0d\xce\x14\xaf\xd0\xd6\x3c\x1f\x70\x55\xdb\x5a\x17\xc4\x99\xe5\xda\xe0\x97\x37\x84\x9b\xad\xd0\x25\x43\x11\x4f\xf4\xfa\x78\x75\x7e\x96\x59\x67\x84\x5a\x89\xe5\x36\xf1\x20\xe3\xf1\x53\xf5\x2f\x74\xf1\x48\x5f\x78\x05\x0c\x84\x05\xa1\xbc\x49\x18\xaf\x49\x6a\x30\x31\xab\x4b\x6e\x5b\x99\x62\x09\xc9\xd3\x4b\x98\xcd\x80\xbd\xe3\x42\x62\xc1\x5a\xaf\x01\xb8\xd2\xe8\x7b\xd8\x27\x72\xe9\xc9\xc1\x69\xca\x56\xfa\x95\xeb\xaa\x96\x48\xc1\x63\x6f\x3d\xc2\xc3\xcf\x24\x5e\x85\xf8\xef\x08\x35\xe8\x1a\xa3\xc0\x99\x06\x07\x20\x93\x09\x5c\x49\xc4\xda\xc7\x9b\x43\x81\x4b\xa1\xb0\x00\x5e\xe9\x46\x39\x5f\x49\xa2\xc2\xcc\x93\x5a\xa2\x4b\x7e\x23\xdf\x11\x6f\x34\x82\xee\x0b\xd0\x8d\xf3\x89\x45\xf1\x27\xa4\xfa\x79\xd3\x82\x4d\x6c\xf4\xe0\xb3\x9a\xcc\x33\x8d\x8a\x39\x1d\x34\x50\x80\x1b\x54\x0e\x12\x1c\x67\x30\x77\x50\x68\xb4\x54\x60\xa1\x04\x88\xc4\x95\xe8\xc9\x7b\xc7\x20\x15\x74\x68\x0a\x82\xc0\xa4\xbe\x3f\x90\xb8\x41\x09\xb5\x11\x95\x70\x62\x83\x83\xfc\xa7\x16\x30\x4c\xfc\xc9\x04\x5e\x7c\x3c\xff\xe3\xe0\xc5\xf5\xfc\xf4\xe4\xe0\xc5\xfb\xf9\xf5\xd5\x87\xc3\x58\x10\xeb\xdf\xad\xd7\xdd\x57\x85\xcf\x49\x32\xe3\x80\x2c\x3b\xe6\x0e\x33\xa5\xef\x93\x71\x77\x84\x59\xae\xab\x4a\xb8\xcc\x36\x8b\x90\x71\xc9\xeb\x14\x7e\x1f\xbf\x8d\x68\x79\x15\xc1\x22\x6c\x3c\xa6\xe6\x86\xe6\xd9\xab\xbc\x82\x19\x28\xbc\x3f\x3a\x4d\x02\xf3\x78\x87\x27\x5c\x5e\xfa\xef\x0b\x5d\x24\x3d\x52\xea\x15\x16\xd4\x69\x7c\x7e\x86\x9b\xac\x42\xc7\x0b\xee\x78\x26\xf9\x02\xa5\xcd\xbe\xea\x85\xda\xb5\x6f\x3f\xed\x02\xa5\x56\x2b\xeb\x34\xcc\x00\x33\x83\xb5\xf6\x0c\xf4\x25\x79\x8e\x09\x9b\xb0\x94\x1c\x31\xde\x0f\x11\xdc\xe3\xf9\xc3\xe7\x28\xf8\xff\xb0\x28\x00\xd5\x86\x2c\xb3\x59\xb4\x10\xd5\xe6\x0b\x37\x16\x66\x70\x73\x4b\x64\x77\x19\xf2\xbc\xa4\xc8\x65\xa8\x36\x29\xb4\xf1\x4c\x36\x5c\xa6\xb0\xc6\x6d\x9b\xe9\x91\x31\xab\x1b\x5b\x26\xdf\x49\xc5\x29\x5d\xa7\xb0\xe1\xb2\xc1\x29\xfd\x7a\xf0\x21\xa1\x9f\xbd\x7c\x8b\xb9\x41\x67\x81\xdb\x1d\x55\x06\x62\x23\xc5\x1e\xd1\x5d\x35\xe9\x0a\x3b\xb0\x7b\x04\xfc\x56\x4b\x91\x0b\x27\xb7\xb0\x90\x3a\x5f\x67\x5d\xed\xde\x65\xb9\x56\x8e\x0b\x65\x93\x1b\x16\x38\xd8\xad\x57\x73\xfc\xb8\x6a\x63\xc1\xb6\x32\xde\xa3\xeb\x44\x2c\x8d\xae\x7c\x4d\xac\xc4\x06\x15\x1d\xc7\xfc\x79\xec\x89\x08\xd8\x3b\x24\x1e\x78\xb7\xbc\x33\xba\x9a\x76\x42\x21\xa2\x7f\xc2\xed\x25\x2e\xa7\x10\xbd\x88\x59\x6d\x34\x8d\x9c\x79\xe1\xcd\x0e\xbe\x8c\x3c\xe1\xf7\x63\xcf\x1e\x6b\xf2\x81\x75\x42\x4a\xb8\xe7\xca\x51\xd5\xf2\xa2\x00\x47\xc5\xea\xb4\x57\xdc\x67\x69\x37\x2b\xff\x01\xff\x2a\x85\x44\x9a\x62\xbe\x98\x2d\xe6\x8d\x11\x6e\x1b\xf0\x5c\x29\xd4\x2a\xf5\x0d\x81\x17\x05\x75\x1b\xe1\xe0\xde\x4f\x61\x83\xb6\x91\x8e\xba\x75\x63\xd1\x84\xa6\xb1\x40\x22\xe1\x0b\x89\x24\x8c\xfc\x40\x0b\x82\x07\x09\x78\x4d\x6d\x9d\x41\x5e\xd1\xbe\x11\xb4\xa1\x7e\x3a\x0a\x01\x8a\x59\x6e\x6d\xf9\x69\x5f\x7a\xed\x38\x95\x1d\x1e\xcd\x8f\xef\x2e\x4f\x2e\xce\xef\x3e\x9d\xfc\x87\xed\x38\x78\x0a\x3b\x68\xd1\x59\xa3\x18\xd5\x98\x83\x4e\xd7\xb1\x71\x75\x29\x48\xcb\x90\xc5\xb0\xec\xe8\x0d\x1a\x23\x8a\xb0\xe4\x70\xe7\xb0\xaa\xbd\x43\x2d\x3a\xaf\xba\x17\x64\xa3\xa3\x34\x58\x5d\xa1\x37\x15\x50\x5a\xdf\xc3\x77\x75\x6f\xb5\x3e\xfa\x7c\x7e\x76\x72\xf7\xe7\xe5\x67\x96\x3e\xd2\x35\x97\x5a\xe1\x9f\x97\x9f\x83\xa6\xcf\x73\x5f\x5d\x7d\x78\x96\xd7\xda\xf2\x27\x9c\xef\xe7\xd7\xcf\x72\xae\x84\xfb\x09\xe7\x87\x93\xc3\xe3\xbb\xa3\xf3\xd3\xd3\xf9\xf5\xdd\xfc\x78\x08\x10\x3b\xcc\xc3\xa0\x09\xd9\x1a\xf3\xb6\xd2\xd0\xd8\x9b\xd7\xb7\xd4\x40\xa8\x09\x05\xec\x81\xff\x73\xad\x96\x62\x05\x15\xaf\x61\xa3\x65\x33\xec\x86\x1e\x25\x1c\xfa\x9e\xe4\x03\xd8\x2a\x14\x7a\x73\x1a\xf9\x4f\x79\xdd\x95\x4c\x6c\xf9\x0f\x0f\xe9\x0e\x03\x1b\x2c\x7a\x2c\x05\x0a\xe4\xf6\x58\x98\x29\x7c\x7f\xe8\xc6\x72\xda\x53\x8b\xc2\x58\xce\xd2\x58\x95\x53\xf8\x1e\xbf\xce\xfc\x75\x2c\x79\xf0\xac\xb7\x6f\x7f\x68\x79\xb0\xe0\x94\x86\xfb\x7e\x33\xfc\xec\xbf\xe0\xae\x9c\x02\x9b\x94\x5a\xaf\xd9\x8f\xd5\xdf\xa1\xb7\x26\x67\x3f\xb2\xe1\x09\xf8\xc4\xda\x92\xa5\x60\x90\x17\xe7\x4a\x6e\xa7\x7e\x43\x89\xa6\x0c\x4a\xa3\xc4\x76\x7f\x6e\x27\x44\xfc\x13\x66\xed\xd7\x55\x8d\x79\x82\x69\x54\x22\xdd\xd9\xb7\xc7\x11\xeb\xfa\xfc\xf8\x7c\x4a\x81\xda\xa0\x71\x5d\x1b\xe2\x0a\x84\x12\x0e\x3a\x67\x01\xed\xa4\xfe\x71\x00\x6f\xb2\xff\x0b\xac\x43\xaf\x12\xf5\x51\xe7\x59\xf2\x64\x14\x76\xfb\xcc\xf4\xe3\x4a\x69\xc7\x69\x62\xd8\x1b\x46\xfd\x65\x81\x8e\x0f\x97\x5d\xa1\x27\x04\x78\xd0\xc7\x8a\xdd\xd2\x03\xe1\x86\xb6\x8a\x47\x0b\x6c\x94\xe3\xb7\x8e\x5b\x16\xad\xfa\xa8\x85\xf2\x2e\xf2\x0f\x24\xb2\xa8\xe2\x6b\x04\x4e\xeb\x01\x6d\x49\x15\x57\xc5\x74\xe8\x00\xbf\x2c\xc5\xe7\x4b\x6d\xf4\x82\x2f\xe4\x16\x56\xa8\xd0\xd0\xa2\xcb\xc1\x96\x28\x25\xd8\xdc\x88\xda\xa5\xb4\xfe\x1a\xbf\xda\x91\x57\x02\x4c\xdf\x5c\xfc\x53\x84\x5a\xd0\x01\x6a\xa8\x45\x8d\xb4\xbf\xa6\xfe\x55\xd2\x58\x22\x50\x78\x2f\x85\x42\x5a\xa4\xad\x43\x5e\xd0\x56\xf9\xf2\x65\x1b\x45\xda\x6e\x2a\x5a\xeb\x99\x37\x86\xfa\x2e\x0d\x5b\x6f\x48\xdb\x73\x3b\x9a\xee\x26\xfb\xaa\x85\x4a\x18\xbc\x7c\x09\xac\xeb\xa2\x79\x95\x91\xbf\x6f\x58\xc5\x85\xca\x6c\xe9\x9d\x18\x78\x47\xa3\xbf\xf3\xf2\x18\x3d\x7a\x23\x1c\x19\xe4\xde\x0f\xa1\xd0\xa9\x4f\x50\x84\xf2\xaa\x8f\xb5\x8a\x4b\xda\x3a\xc3\x6f\x0e\x95\xa5\xa0\x67\x1d\x79\x96\x13\x02\x26\x79\x35\xde\x8b\xdd\xae\xce\xfb\x8b\xb8\x97\x31\x78\x08\x45\xe4\xc0\xf5\x04\x3d\x3e\xa0\xb3\x2c\x63\x61\x1f\x0c\x8f\x81\x7e\x61\x7c\x4b\x3b\x79\xb7\x23\x3f\x2a\x28\xff\x0a\x4e\xc3\xa0\xee\x5f\x8b\xfe\xcf\x6b\xbe\x82\x59\xf8\x6c\x57\x53\xac\x35\xf5\xef\xd9\xe3\x29\xd2\x86\xf7\x97\x96\xb1\x0d\xef\x00\xc8\xbf\x89\x9f\x7d\x06\xc7\x18\x3f\x99\xcb\xf0\x0b\xa5\x4e\x0b\xf5\x44\x78\x18\x43\x2d\xb7\x6f\x1b\x35\xe6\x30\x6b\x33\x2b\x34\x27\x92\x7a\xb0\xd3\xd4\xda\x59\x3f\x8d\x3d\x72\xd0\xfc\xbe\x1c\x5d\xf9\x21\xdf\xcf\x9d\x56\xea\x43\xfa\x1c\xed\xe7\xf3\xa3\xc3\xcf\x77\x17\x87\xd7\x1f\x7a\x0e\xef\xd1\x3d\xf4\x97\x27\x5f\xe6\x57\xf3\xf3\xb3\xe7\xe6\x5a\x60\xb8\x4d\x7b\xbf\x4d\x3b\xf7\xa5\xf1\x51\x1b\xaa\x1d\x6e\xd8\xd0\x8f\x6c\xc8\x73\xd1\x48\x79\xa1\xa5\xc8\xb7\xb4\xb4\xc8\x7b\xbe\xb5\xd1\xe2\xe1\x7c\x78\xc6\xf4\xbd\x7d\xdf\xdb\xd3\x6a\xb7\x37\x56\x31\x4a\x3e\xa5\x51\x6d\xfe\xb7\x3b\x54\x4c\x69\x02\xdf\xc9\xe5\x9d\x17\x52\xad\x0b\xe5\x67\x1c\x45\x7c\xde\xe7\x73\x64\x0e\xba\xb0\xb5\x50\x05\x9b\xfa\x07\x7a\xd4\x80\xf1\x5a\x7c\x41\x43\xe5\x4c\x17\x9b\x37\xed\x79\x5b\xf8\xac\xdf\x9e\x19\x49\x60\x53\x68\x65\xb5\xc7\xe1\x11\xc4\x86\x6b\x36\x2b\xd1\x08\xc7\x57\x44\xce\xfe\xd9\xe8\xf5\x9a\x77\x26\x13\x38\x57\x7c\x85\xc5\x1f\x5b\x16\x73\x94\xb5\xcb\x76\x07\x3a\x98\x2d\x84\x1c\xb7\xf0\xa8\x1c\xf9\x62\xa8\x98\x41\xdf\xc9\x43\xe8\x09\xf3\x0c\x37\x68\x3a\x89\x6c\x30\x7f\xfa\xe0\xc3\x40\xdf\xde\x38\xaf\x0e\xbd\xe5\xd3\xe1\xa5\xcf\x2e\x36\xed\xbd\xbb\x73\x1b\x53\x73\x07\xdb\x5f\x4c\x16\x42\x4d\x68\x0b\x78\x74\xec\xd7\x83\xb6\x99\x0f\xee\x6e\x87\x84\x93\x09\xbc\x9b\xff\xfb\xf4\x64\x0a\x47\x25\x57\x2b\xbf\xe9\xb3\xf9\xf2\x4c\xbb\x0b\x83\x16\x95\x63\x4f\x34\xec\xf3\x9f\xf5\x05\xd0\x51\xb5\x2f\x9a\xdb\xee\xdf\x24\x0f\xbe\x3b\xee\xa4\xd4\xd1\x69\xe2\xdb\xf0\x0f\xb2\xe7\xa8\xdd\x06\xff\x46\x0e\xf5\x8e\x1e\xa6\xd0\xf3\x49\xf4\xf3\x44\x8a\xf9\xd0\xa6\xc5\x53\x59\xad\x8f\xa7\xc0\x30\x2f\x35\xd0\xf4\xd7\x34\x5c\xfd\x5f\x2b\xad\x8b\xc5\x16\x59\x0f\x12\x1c\x82\xdf\x6a\x6d\x9c\xcd\x4c\xa3\x60\x46\xb3\xa4\x3b\xe9\xff\xc7\x08\xb3\xc1\x3f\x1c\x47\xff\x0d\x00\x00\xff\xff\x59\xe3\xdd\x3a\xdd\x15\x00\x00")

func jsRunJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunJs,
		"js/run.js",
	)
}

func jsRunJs() (*asset, error) {
	bytes, err := jsRunJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRun_mockJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcd\x4a\x03\x51\x0c\x85\xf7\xf7\x29\x0e\x5d\x75\x68\x4d\x5d\x0a\xd2\x9d\x08\xba\xf6\x05\xee\x5c\xe2\xf4\xb6\x33\xc9\x90\xe4\x52\x41\x7c\x77\x19\xb4\x3f\xdb\x93\x2f\xe7\x7c\x69\xb7\xc3\xc7\xa1\x3a\xe6\x5c\x4e\x79\x60\x4c\x5a\x4e\x8e\x38\x30\xac\x09\x1d\x1d\x9f\x4d\x4a\x54\x15\x27\xbc\x05\x4a\x16\x18\xcf\x63\x2e\x37\x40\x0d\xc1\x1e\x55\x06\x4a\xe9\x82\xe3\x9c\x6b\xbc\xaa\xbd\x6b\xbf\x3e\x6a\xdf\xe1\x3b\x01\x45\xc5\x75\x64\x1a\x75\x58\x42\x92\x3c\x71\x97\x12\x60\x1c\xcd\x04\x61\x8d\xd3\xcf\x5d\x89\x35\x59\xc0\x2d\xf8\xaf\xe0\x9f\xbb\xfc\x62\x83\xd5\xc3\x0a\x1b\xbc\xe4\x60\x12\x3d\xaf\xbb\x6b\xc4\x54\x74\x9a\x6a\x90\xb7\xde\xc3\xaa\x0c\xeb\xc7\x2d\x9e\xba\xe7\x65\x80\xbf\x66\xb5\x70\xba\x49\x62\x7f\x67\x7c\xbd\x5b\x13\xec\x17\x8b\xf4\x1b\x00\x00\xff\xff\xf2\x0f\x52\xe5\x29\x01\x00\x00")

func jsRun_mockJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRun_mockJs,
		"js/run_mock.js",
	)
}

func jsRun_mockJs() (*asset, error) {
	bytes, err := jsRun_mockJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run_mock.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\xdf\x3e\x75\xe3\xd2\xfb\x04\x73\x10\x5d\x51\xf0\xe8\x4d\x44\x42\x52\xdd\x1d\x08\x55\x6d\x55\x7a\x7b\x17\xd9\x77\x97\x74\xdc\x71\x66\xf0\xe0\x31\xf9\xc9\x97\xbf\x3e\xea\xfe\x1e\x5f\x97\x64\x48\x86\xb2\x10\x74\x63\x26\xc5\xae\x7e\x5d\x13\xcf\xb0\xa0\x69\x2d\xa3\x0b\xc2\x26\x99\xc6\x2c\x73\xdf\x7d\x11\x1f\x6b\xf8\xee\xfd\xe7\x0f\x08\xa2\xd4\x0d\xce\x4d\x1b\x87\x92\x84\x31\x25\xa5\x87\x47\xe2\xd2\xd3\x80\x5f\x0e\x78\xf4\x0a\xaa\x17\x9f\x3c\xc7\x4c\x8a\x13\x98\x76\x3c\x5c\x5c\xf5\x83\x73\xc0\x6b\x97\x59\xc8\x90\xf8\x28\x64\x41\x56\xaa\x87\x7d\x49\x61\xc1\xd4\x0f\xb5\x2a\x3d\x51\xd8\x0a\x45\x98\xa0\x2c\xbe\x60\x27\x04\xcf\xf0\x21\x90\x59\x43\xd5\xd7\xa2\x69\x4e\xec\x73\xfb\x1f\x7b\x2a\x8b\x6c\x05\x4a\x3f\xb7\xa4\x75\x84\x5e\xf4\x0e\x4a\x3e\xe7\xe7\x3b\xf8\x9c\x65\x4f\x3c\x0f\xc7\xdb\xcd\x48\x51\xa4\xc1\x56\x6f\x4d\x50\x03\x79\x95\x8d\xe3\xe8\x00\x7a\x5a\x45\x8b\x8d\x3f\x5a\x70\x02\xd5\x49\xd2\x84\xfe\x8d\xd2\x9c\xac\x90\x1e\x83\x5a\x73\x01\x5c\x99\x64\xf9\x03\x5c\x9a\x07\x43\xa4\x29\x31\xc5\xee\x10\x02\x28\x95\x4d\xd9\x01\x2f\xf5\x7c\x4d\xec\x2f\xa5\x0e\xee\x06\x7d\x84\x86\x2c\x3e\x52\x1c\xf1\xb1\xcd\xdb\xe1\x2d\x68\x2c\xcf\x2b\x0d\xe7\x9e\x97\x98\x6f\x2d\xfc\xfe\x5f\x6d\xcf\x7d\x28\x62\x12\xbd\x85\xdf\xb6\xaf\x7b\x30\x55\x43\xff\xf8\xaf\xe6\x53\x4f\x83\x7b\x71\xee\x55\xe9\x79\x91\x70\xfa\xbb\x54\xee\x77\x00\x00\x00\xff\xff\x0b\x8b\xea\xff\xb1\x02\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsWaitgroupJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x8e\x9c\x30\x10\x86\x7b\x3f\xc5\x5f\x82\x14\x99\x27\xd8\x32\x8a\x92\x22\x4d\x22\xa5\x88\x52\x18\x18\x62\x73\xc6\x83\xec\xe1\xd8\xd5\x89\x77\x3f\xd9\xbb\x2c\x48\x57\x5e\x61\xad\xd6\x78\xbe\xff\x9b\xb1\x9b\x06\x7f\x8c\x93\x6f\x91\x97\x19\xab\x71\x92\x30\x70\xc4\xb4\x78\x71\xb3\x27\x8c\xdc\x26\x08\x63\x70\xc1\x25\xab\xf1\x5d\xb0\x3a\xef\x21\x36\xf2\x0a\x13\x40\x31\x72\x54\x4d\x03\x93\x90\x98\x43\xfe\x35\xb9\x0c\x91\x66\x8e\x92\x9e\x87\xb4\x1a\x96\xd0\x89\xe3\x70\x44\x56\x35\xde\x14\x20\xd6\x25\x5d\xa2\x2e\xf8\xfb\x4f\x29\x20\x03\xfb\x3e\xaf\x8c\x0b\xb4\x16\xa4\x30\xc4\x52\xf1\xfc\x9f\xcb\xf7\xd2\x7c\xf4\x82\x1d\x5f\x8d\xdc\xde\xb9\x27\xb2\x9e\x97\x64\xcb\x17\x05\x6c\x8f\x88\xb8\x84\xbc\x12\xe8\x95\xe2\xad\x44\xb8\x50\x22\x0a\xfe\x0b\x4c\xe8\xf3\xdf\x70\x1a\x8d\x58\x9a\xb2\x48\xc7\xd3\xec\x49\x48\xef\x12\x19\x76\x92\xf8\x68\x30\x70\xfc\x6a\x3a\x5b\x3d\xc7\x50\x8d\xfb\x21\x60\xd4\xad\xe9\x5e\x72\x6c\xe8\xab\xba\x6c\x6e\xf5\x01\xc8\xf9\xd5\x59\x3d\x6f\x3c\xac\x96\x20\xce\xdf\x6f\xca\x44\x3a\xc4\xf0\x93\x85\x20\xd6\x48\x61\xa0\x67\x4a\x08\x2c\xa5\xed\xdc\x64\xb1\xc2\x6f\x4b\xb7\x3b\x73\x5a\x92\xa0\x25\x24\x31\x51\xa8\x07\x5d\x85\x62\x30\xde\xdf\x34\xaa\x5f\x44\xc7\xbd\x95\x66\x39\xe2\x07\xb7\x27\xef\x5a\x9d\x6c\x3f\x35\x8b\x67\xbb\x8f\x29\x6c\x6a\x53\x8a\xae\xe5\x41\xe9\xe3\xc1\x5e\x0e\x23\xf5\x1e\x00\x00\xff\xff\x60\x6f\x0e\xe7\xca\x02\x00\x00")

func jsWaitgroupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsWaitgroupJs,
		"js/waitgroup.js",
	)
}

func jsWaitgroupJs() (*asset, error) {
	bytes, err := jsWaitgroupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/waitgroup.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/event.js": jsEventJs,
	"js/job.js": jsJobJs,
	"js/mock8s.js": jsMock8sJs,
	"js/run.js": jsRunJs,
	"js/run_mock.js": jsRun_mockJs,
	"js/runner.js": jsRunnerJs,
	"js/waitgroup.js": jsWaitgroupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"event.js": &bintree{jsEventJs, map[string]*bintree{}},
		"job.js": &bintree{jsJobJs, map[string]*bintree{}},
		"mock8s.js": &bintree{jsMock8sJs, map[string]*bintree{}},
		"run.js": &bintree{jsRunJs, map[string]*bintree{}},
		"run_mock.js": &bintree{jsRun_mockJs, map[string]*bintree{}},
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
		"waitgroup.js": &bintree{jsWaitgroupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

