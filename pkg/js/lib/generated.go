// Code generated by go-bindata.
// sources:
// js/event.js
// js/job.js
// js/mock8s.js
// js/run.js
// js/run_mock.js
// js/runner.js
// js/waitgroup.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsEventJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4a\xc6\x30\x10\x85\xf7\x39\xc5\xdb\x55\x41\xd2\x13\x74\xe1\x42\x70\xed\x0d\xa6\xc9\xd4\x04\x62\x52\x33\x53\x6b\x91\xde\x5d\x42\x94\x9f\xf2\xef\x86\x79\x8f\xef\x9b\x19\x47\xbc\x7c\x71\xd6\x57\xca\x3e\x71\x85\x67\x71\x35\xce\x2c\xd0\xc0\x48\x51\x14\x65\x01\xb7\x4a\x5b\x91\xe2\xd9\x45\x8f\x28\xa0\x9d\x2a\xa3\x2c\xd6\x2c\x5b\x76\x1a\x4b\xbe\x90\x1e\x1e\xf1\x63\x80\xce\xaf\x47\x47\x20\xfc\x69\xde\x59\xbb\x61\xa5\x4a\x1f\x18\x3c\x29\x0d\x4f\xd8\x43\x74\xa1\xc1\x5b\x34\x17\x7f\x34\x79\x9b\x2b\x7f\x6e\x2c\x6a\x0d\xa0\x21\x8a\x5d\x37\x09\x98\xf0\x6f\x6e\xb2\xf3\x96\xa5\xf4\xd6\xfb\x77\x95\xd3\x18\xfe\x5e\x4b\x55\xb1\x97\xb7\xa7\xcb\xed\xe6\x37\x00\x00\xff\xff\x38\xd9\xc5\x1d\x16\x01\x00\x00")

func jsEventJsBytes() ([]byte, error) {
	return bindataRead(
		_jsEventJs,
		"js/event.js",
	)
}

func jsEventJs() (*asset, error) {
	bytes, err := jsEventJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/event.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsJobJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\xc1\x6e\x1b\x37\x10\xbd\xef\x57\xbc\xea\x24\xb5\xca\xae\x83\xb4\x3d\xc4\xd0\xc1\xa8\x1d\x20\x29\x10\x04\x89\x9b\x1e\x8a\x22\xe0\x72\x67\xb5\x8c\xb9\xe4\x96\x1c\xca\x16\x02\xff\x7b\x31\xa4\xb4\x96\xd5\xf4\x62\x83\x23\xce\x9b\x37\x6f\xde\x70\x9b\x06\xb7\x03\xa1\xa3\x5e\x25\xcb\x30\xa3\xda\x12\x4c\x44\x64\xaf\xef\x90\xda\xe4\x38\xe1\xe5\xaf\xf5\xc5\xcf\xf8\x09\xa3\xba\x23\x28\xd7\x61\x6b\xb8\xae\x76\x2a\x40\x69\xd3\xbd\xcd\x39\x1b\x2c\xe4\xf0\xa2\xa4\xbc\xb6\x8a\x29\xf2\xa2\xaa\x9a\x06\x1f\x82\x67\xcf\xfb\x89\xd0\xfb\x80\x77\xbe\xad\xab\x3e\x39\xcd\xc6\x3b\x39\x2d\x9d\x1a\x69\x0d\x56\xf1\x2e\xae\xf0\xad\x02\x04\x79\xdc\x63\x03\x1e\x4c\xac\x2a\xc0\xf4\x58\xfe\x40\x0f\x93\x0f\x1c\xeb\x2f\xb4\x23\xc7\xe5\x26\xc0\x43\xf0\xf7\x58\xe4\x18\x9c\x67\xf4\x3e\xb9\x6e\x51\x01\x8f\x92\xd9\x34\x78\xaf\x46\xc2\xbd\xb1\x16\x2d\x69\x3f\x12\x78\x20\x4c\x81\x7a\xf3\x90\x09\xe5\xa3\xef\x1a\xed\x5d\x6f\xb6\xa3\x9a\x20\x84\x62\x5d\x21\xd7\xaf\xe5\x84\x4d\x0e\x5e\x16\xc4\x5b\xa1\x2a\x2a\x49\xaa\x35\x91\xe1\xfb\xc2\x1f\xec\x11\x92\xab\x45\xd4\x3d\x54\x20\xd0\x03\xe9\xc4\xd4\xc1\x38\x44\xfa\x27\x91\xd3\x04\xe3\xa2\xe9\x08\xbe\x2f\x78\x0a\x71\x20\x6b\xb1\x6c\x5a\xe3\x9a\x38\xac\xe6\xda\x05\x74\x83\xbf\xfe\xbe\x3c\xc8\x70\x22\xd3\xd9\x9d\xfc\xff\xa4\xef\x2b\x68\x6f\x2d\x15\x9d\x7d\x9f\x1b\x68\x76\xca\x26\xc2\xa4\x4c\x88\x12\x23\xb7\x33\xc1\xbb\x51\xc4\xdb\xa9\x60\x54\x6b\x4f\x3a\x27\xb7\xc3\x06\xdf\x1e\x2f\x0f\x88\xe2\x94\xe2\x10\x31\x81\x72\xf0\x93\x80\x2b\x0b\x56\xdb\x39\xcb\x1c\xfc\x30\x7b\xe3\x72\x26\x24\xe2\xfa\x1e\x37\xef\x3f\x7f\xf9\x7c\xf5\xb1\xe8\x9c\xb1\x3e\x91\x0e\xc4\x07\xe1\x71\x3b\x98\x58\x26\x36\xf9\x29\x89\x95\xb2\xd2\x27\x64\x0b\xe0\x91\x31\xee\x0d\x0f\xf9\x4a\x69\x2f\x5b\x40\x04\x97\x50\xcc\xd0\xf5\xb1\x83\x23\xb2\xdf\x51\x08\x32\x04\x85\x51\xb1\x1e\x8c\xdb\x4a\x81\xec\xbd\x3e\xf8\xf1\x58\x51\x38\xcf\xad\x15\xac\x98\x45\x39\x34\x35\xf9\x2e\x1b\x4c\x76\x86\x18\xed\x5e\xe6\xbf\x5c\xad\x73\x5b\xda\x3b\x56\xc6\x15\xa3\x64\x1f\x89\x51\x8a\xdf\xa0\x03\x29\xa6\x6e\x06\x3f\x20\x1d\x70\x43\x12\xbf\xb8\x2e\xe6\x1f\xf1\xd5\xb7\xe2\xad\xdf\x53\x4b\xc1\x11\x9f\x0c\x49\x2e\x6e\x70\x5c\xa8\xe5\x33\x6b\xb4\x4a\xdf\x6d\x83\xa8\xb1\x3c\xdb\x9e\xa7\x3b\xf7\xca\xf0\x72\x55\xe5\x40\x20\x4e\xc1\x95\xb5\x03\xca\xdc\xcf\x80\xfe\xb7\xd6\x51\x88\x4d\x16\x40\x42\x6b\x9c\x15\xbd\x9c\x41\x9b\x06\x52\xf7\x0f\xc7\xc6\x5e\x7b\x97\xe5\x1b\x28\x94\x17\x42\x8a\xdd\xab\xd0\x45\x68\x3f\x4e\x8a\x4d\x6b\xac\xe1\xfd\x1a\x6d\x62\x74\x9e\xa2\xec\xb9\x0c\xec\x30\xd4\xeb\x9b\x0f\x1f\x6f\x7e\xbb\xba\xbd\xb9\x7e\x8d\x3f\xcb\x9e\x23\xd0\xe8\x77\xd4\xa1\x4b\x41\x26\x7b\x65\xa7\x41\x55\x27\x1d\x3f\x55\x3e\xeb\xe7\x7b\x3a\x9c\x30\xce\x7f\x22\x92\xa4\x43\xe5\x39\x0e\x12\x58\x7c\x4a\x5a\x13\x75\x94\x9f\x9e\xa6\x79\xca\x58\xae\xa0\x95\x13\x4e\x5a\x59\x4b\x1d\xbc\xc3\x93\x9c\x72\x6e\xbf\x92\xe6\x58\xff\x37\xcf\x44\xa8\xc4\x7e\x54\x6c\x24\x77\x7f\x44\x68\xf7\xf3\xe8\x4f\xb3\xde\xf6\x99\x4f\x21\x1f\xb1\x78\xa3\x8c\xa5\x6e\xb1\x2e\x0e\xca\x0f\xa5\x6c\x1b\xe8\x41\x53\x5e\xdc\xfa\x79\x5e\x72\x31\xeb\x3f\xfa\x20\x0b\xa7\x1c\x5e\xfe\x82\xd1\xb8\xc4\x14\xb1\x7c\x75\x71\x81\x1f\xf1\xea\x45\x24\xed\xf3\x76\x31\x85\x9d\xb2\x71\xb5\x9e\xa1\xc1\x66\x24\x9f\xf8\x79\x85\x59\xf3\xef\x59\x47\xe2\x6f\x7c\x90\xcf\xc0\xb8\x5f\x15\x7f\x3c\x56\xd5\xd1\x38\xef\x7c\x8b\x8d\x7c\x24\xaa\x7f\x03\x00\x00\xff\xff\xcc\x7b\xd0\x86\xa9\x06\x00\x00")

func jsJobJsBytes() ([]byte, error) {
	return bindataRead(
		_jsJobJs,
		"js/job.js",
	)
}

func jsJobJs() (*asset, error) {
	bytes, err := jsJobJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/job.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsMock8sJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8a\xdb\x30\x14\x85\xf7\x7e\x8a\x43\xe8\x62\x02\xc1\x43\xb7\x81\xac\x0a\xdd\xb5\x94\x0e\x74\x53\x4a\xb9\x91\x8e\x13\x75\x6c\xc9\xe8\x67\x3a\x50\xfc\xee\x45\xae\xa5\xd8\xd9\xb4\x8b\x6e\x94\x9b\xfb\xf3\x59\xe7\xea\x3c\x3e\xe2\x29\x3a\x4f\x0c\x4e\x3d\x63\x74\x1a\x9a\x9d\xb1\x26\x1a\x67\x03\xae\xf4\x84\x04\xec\xac\x0c\xdc\xe1\x88\x37\x9e\xc1\x25\xaf\xd8\xbc\x88\x9f\x67\x3e\x39\x1d\x70\xc2\xaf\x66\x6a\x9a\x0a\x53\xce\x76\xe6\x32\xc8\xf8\x4f\x88\x77\x73\xf7\x87\xdc\xbd\x80\x72\xe5\x39\x9d\xe9\x2d\x23\xff\x64\x81\x9f\x26\x5e\x3f\x3e\x1d\xd1\x25\xab\xf2\xf5\x1e\x6c\xd8\xcf\x05\xc0\x33\x26\x6f\x17\x98\x67\x03\x4c\x05\x53\x72\x0b\x44\x39\xcf\x2f\x6f\x8f\xcb\xdc\xe8\x74\x09\x81\x0b\xe3\x1a\x2e\x03\xf7\xb5\x56\x3f\xf1\xbd\xed\x8c\xd5\x0f\x45\xf9\xe1\x36\xc0\x7e\xd3\x5f\x27\xd8\xb3\x1d\x18\x45\x4b\x94\x36\x53\x71\x3a\x21\xff\xd6\xd6\x69\xbf\x84\xd3\x61\x09\x94\xa7\x44\xae\x6e\xa3\xd9\xad\xe1\x79\xd1\x49\x29\x52\x53\x1f\xf0\x39\x59\x6b\xec\xe5\x00\xb1\x1a\xef\xc5\xf4\xd4\x10\x4f\x04\x37\x10\x2f\xd2\x1b\x9d\xcf\xc4\xd0\x56\x80\x66\xd7\x86\x28\x31\xcd\xcb\xc5\x78\x95\xc0\x23\x76\x15\xba\xc3\x54\x7b\x8b\xd6\xaf\x79\xa8\x2a\xe9\xe5\xcc\x3e\xb4\x3f\xdc\x39\x6b\xf9\x86\x53\x66\x36\xf7\xeb\xca\xb9\x45\x5b\x53\xce\x59\x25\x5f\x23\x6d\xc8\x26\x2b\x0f\x50\x3d\x73\x7b\x91\xbf\xad\x61\x6b\x9e\xff\x76\xbf\x6c\x1d\xbe\x8e\xce\xc7\xd0\xae\x2c\x5e\xc2\x4d\x6d\xe3\xdd\x6d\xa2\xf6\x6d\x9c\x7c\xfb\x73\xc7\x99\x2d\x5a\x1d\xfc\x3b\x00\x00\xff\xff\xc6\x15\x83\xe4\x98\x03\x00\x00")

func jsMock8sJsBytes() ([]byte, error) {
	return bindataRead(
		_jsMock8sJs,
		"js/mock8s.js",
	)
}

func jsMock8sJs() (*asset, error) {
	bytes, err := jsMock8sJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/mock8s.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x7b\x6f\x1b\x37\x12\xff\x5f\x9f\x62\x4a\x14\xa9\x84\xac\x57\x29\x0a\x1c\x0a\xe5\x84\x83\x6b\x3b\x8d\x92\xf8\x71\xb6\x9b\xbb\x83\x61\x18\xd4\xee\x48\x4b\x8b\x4b\x2e\x48\xae\x1c\x35\xf0\x77\x3f\x0c\xc9\x7d\x48\x96\x92\xe2\x70\xff\xd8\x6b\x72\xde\x9c\xc7\x6f\x3c\x1e\xc3\x6d\x81\x20\x94\x43\xa3\xb8\xb4\xb0\xd0\x06\x4c\xad\x94\x50\x4b\x70\xdc\xae\x6c\x0a\xb7\x85\xb0\x50\xd6\xd6\xc1\x1c\x41\x6a\x9e\x63\x0e\x73\x5c\x68\x83\xc0\xd5\x06\xf4\x02\x5c\x81\x83\xf1\x18\xf4\xfc\x11\x33\x67\xc1\x15\xdc\x41\x6d\x91\x04\x0d\x47\xe9\x60\x3c\xa6\xdb\x63\x29\xe1\x63\x3d\x47\xa3\xd0\xa1\x85\xe3\xab\x19\x64\x5c\x4a\x0b\xb6\xd0\xb5\xcc\x83\xf0\x8c\x4b\xf1\x27\xe6\x50\xa0\xc1\x14\x2e\x5d\x81\x06\x4a\x9d\xd7\x12\x5b\x3a\xa5\x1d\x89\x23\x5e\xf8\x69\xd5\x0a\xfc\x09\x72\x61\x30\x73\x72\x93\x0e\x06\x6b\x6e\xc0\x8a\x1c\x33\x6e\x66\x25\x5f\x22\x4c\x81\xf1\x4c\xe4\x22\x4b\xf9\x9f\xb5\xc1\xcc\xa4\x42\x8f\xd7\x99\x3d\x8a\x54\x13\xc9\x1d\x5a\xc7\x06\x24\xfa\x89\x0b\x07\x8e\xaf\xd0\x02\x87\x47\x3d\x3f\x92\x62\x85\xd1\x3b\xe0\x2a\xf7\x04\x16\x6a\xe5\x84\x04\xe1\xc0\xd6\x59\x86\x98\x5b\xd0\x06\x16\x5c\x48\x9b\x0e\x16\xb5\xca\x9c\xd0\xca\x93\xbe\xd3\xe6\x83\x9e\x0f\x1f\xf5\x7c\x04\x5f\x07\x00\x64\x5d\xb9\x81\x29\xc9\x1e\x0c\xc0\xc7\x7c\x48\x87\x02\xa6\xf0\xe6\x2d\x08\xf8\x3b\xfc\xf2\x86\x3e\x5e\xbf\x0e\x1c\x00\x99\x56\x56\x4b\x4c\xa5\x5e\x0e\x59\x56\x60\xb6\xa2\x17\xb2\x8e\xbb\xda\xd2\x13\x30\x78\x0d\xe5\x26\xad\x74\x7e\xc1\x4b\x1c\x79\x1e\x12\xb9\x82\x29\x74\x41\x4a\x9f\x84\x2b\x2e\x6e\x86\x2c\xc7\x05\xaf\xa5\x63\x1d\x61\xb9\xa9\x74\x4e\xc4\x69\xa6\x0d\x7e\xfe\x99\x44\xa5\x4b\x74\xc3\xbe\xd4\x17\xa6\x7c\xb8\xb9\xbc\x48\xad\x33\x42\x2d\xc5\x62\x33\xf4\x42\x46\xa3\x97\x16\x5f\xe9\x7c\xc7\x44\x78\x0d\x0c\x84\x05\xa1\xbc\x17\x18\xaf\x49\x6b\xf0\x2a\xad\x0a\x6e\x1b\x9d\x62\x01\xc3\x97\x97\x30\x9d\x02\x7b\xc7\x85\xc4\x9c\x35\x81\x02\x70\x85\xd1\x4f\x70\x48\xe5\xc2\x93\x83\xd3\x94\x9d\xf4\x2b\xd3\x65\x25\x91\x1e\x8b\xbd\xf5\x12\x9e\xbf\xa7\xf1\x26\xbc\xf7\x96\x52\x83\xae\x36\x0a\x9c\xa9\xb1\x27\x64\x3c\x86\x1b\x89\x58\xf9\x27\xe6\x90\xe3\x42\x28\xcc\x81\x97\xba\x56\xce\x57\x8e\x28\x31\xf5\xa4\x96\xe8\x86\xbf\x50\xec\x88\x37\x3a\x41\xf7\x39\xe8\xda\xf9\x44\xa2\x27\x27\x49\xd5\x7e\xd7\x82\x4f\x6c\xf0\xec\xb3\x98\xdc\x33\xb5\x8a\x39\x1c\x2c\x50\x80\x6b\x54\x0e\x86\x38\x4a\x61\xe6\x20\xd7\x68\xa9\xa0\x42\xca\x13\x89\x2b\xd0\x93\x77\x81\x41\x2a\xe0\xd0\x04\x04\x09\x93\xfa\xe9\x48\xe2\x1a\x25\x54\x46\x94\xc2\x89\x35\xf6\xf2\x9d\x4a\xfe\x51\xcf\x13\xc0\x10\x9b\xf1\x18\x7e\xfc\x70\xf9\xdb\xd1\x8f\xb7\xb3\xf3\xb3\xa3\x1f\x7f\x9f\xdd\xde\xbc\x3f\x8e\x35\xb0\xfa\xd5\x7a\xdb\x7d\x21\xa4\x2a\xba\x71\x44\x9e\x9d\x72\x87\xa9\xd2\x4f\xc3\x51\x7b\x84\x69\xa6\xcb\x52\xb8\xd4\xd6\xf3\x90\x71\xc3\x37\x09\xfc\x3a\x7a\x1b\xa5\x65\x65\x14\x16\xc5\xc6\x63\x6a\x66\x68\xf6\x5e\x65\x25\x4c\x41\xe1\xd3\xc9\xf9\x30\x30\x8f\xb6\x78\xc2\xe5\xb5\xff\xbe\xd2\xf9\xb0\x93\x94\x78\x83\x05\x75\x16\x9f\x9f\xe1\x26\x2d\xd1\xf1\x9c\x3b\x9e\x4a\x3e\x47\x69\xd3\x47\x3d\x57\xdb\xfe\x1d\xa6\x9d\xa3\xd4\x6a\x69\x9d\x86\x29\x60\x6a\xb0\xd2\x9e\x81\xbe\x24\xcf\x70\xc8\xc6\x2c\xa1\x40\x8c\x0e\x8b\x08\xe1\xf1\xfc\xe1\x73\x10\xe2\x7f\x9c\xe7\x80\x6a\x4d\x9e\xd9\x34\x7a\x88\x6a\xfd\x99\x1b\x0b\x53\xb8\xbb\x27\xb2\x87\x14\x79\x56\xd0\xcb\xa5\xa8\xd6\x09\x34\xef\x39\x5c\x73\x99\xc0\x0a\x37\x4d\xa6\x47\xc6\xb4\xaa\x6d\x31\xfc\x4a\x26\x4e\xe8\x3a\x81\x35\x97\x35\x4e\xe8\xd7\xb3\x7f\x12\xfa\xd9\xe9\xb7\x98\x19\x74\x16\xb8\xdd\x32\xa5\xa7\x36\x52\x1c\x50\xdd\x56\x93\x2e\xb1\x15\xf6\x84\x80\x5f\x2a\x29\x32\xe1\xe4\x06\xe6\x52\x67\xab\xb4\xad\xdd\x87\x34\xd3\xca\x71\xa1\xec\xf0\x8e\x05\x0e\x76\xef\xcd\x1c\xed\x56\x6d\x2c\xd8\x46\xc7\xef\xe8\x5a\x15\x0b\xa3\x4b\x5f\x13\x4b\xb1\x46\x45\xc7\x31\x7f\x76\x23\x11\x05\x76\x01\x89\x07\x3e\x2c\xef\x8c\x2e\x27\xad\x52\x88\xd2\x3f\xe2\xe6\x1a\x17\x13\x88\x51\xc4\xb4\x32\x9a\x46\xcc\x2c\xf7\x6e\x87\x58\x46\x9e\xf0\x7b\x37\xb2\xa7\x9a\x62\x60\x9d\x90\x12\x9e\xb8\x72\x54\xb5\x3c\xcf\xc1\x51\xb1\x3a\xed\x0d\xf7\x59\xda\xce\xc6\x7f\xc0\xbf\x0a\x21\x91\xa6\x96\x2f\x66\x8b\x59\x6d\x84\xdb\x04\x79\xae\x10\x6a\x99\xf8\x86\xc0\xf3\x9c\xba\x8d\x70\xf0\xe4\xa7\xae\x41\x5b\x4b\x47\xdd\xba\xb6\x68\x42\xd3\x98\x23\x91\xf0\xb9\x44\x52\x46\x71\x20\x40\xe0\x85\x04\x79\x75\x65\x9d\x41\x5e\x12\xbe\x08\xd6\x50\x3f\x1d\x84\x07\x8a\x59\x6e\x6d\xf1\xf1\x50\x7a\x6d\x05\x95\x1d\x9f\xcc\x4e\x1f\xae\xcf\xae\x2e\x1f\x3e\x9e\xfd\x87\x6d\x05\x78\x02\x5b\xd2\x62\xb0\x06\xf1\x55\x63\x0e\x3a\x5d\xc5\xc6\xd5\xa6\x20\x81\x1f\x8b\x01\xdc\xe8\x35\x1a\x23\xf2\x00\x6a\xb8\x73\x58\x56\x3e\xa0\x16\x9d\x37\xdd\x2b\xb2\x31\x50\x1a\xac\x2e\xd1\xbb\x0a\x28\xad\xef\xe1\xdb\xb6\x37\x56\x9f\x7c\xba\xbc\x38\x7b\xf8\xe3\xfa\x13\x4b\x76\x6c\xcd\xa4\x56\xf8\xc7\xf5\xa7\x60\xe9\x7e\xee\x9b\x9b\xf7\x7b\x79\xad\x2d\xbe\xc3\xf9\xfb\xec\x76\x2f\xe7\x52\xb8\xef\x70\xbe\x3f\x3b\x3e\x7d\x38\xb9\x3c\x3f\x9f\xdd\x3e\xcc\x4e\xfb\x02\x62\x87\x79\xee\x35\x21\x5b\x61\xd6\x54\x1a\x1a\x7b\xf7\xe6\x9e\x1a\x08\x35\xa1\x20\xbb\x17\xff\x4c\xab\x85\x58\x42\xc9\x2b\x58\x6b\x59\xf7\xbb\xa1\x97\x12\x0e\x7d\x4f\xf2\x0f\xd8\x18\x14\x7a\x73\x12\xf9\xcf\x79\xd5\x96\x4c\x6c\xf9\xcf\xcf\xc9\x16\x03\xeb\x01\x3b\x96\x00\x3d\xe4\xe6\x54\x98\x09\x7c\x7d\x6e\xc7\x72\xd2\x51\x8b\xdc\x58\xce\x92\x58\x95\x13\xf8\x1a\xbf\x2e\xfc\x75\x2c\x79\xf0\xac\xf7\x6f\xbf\xe9\x79\xf0\xe0\x9c\x86\xfb\x61\x37\xfc\xec\xbf\xe2\xae\x98\x00\x1b\x17\x5a\xaf\xd8\xb7\xcd\xdf\xa2\xb7\x26\x63\xdf\xf2\xe1\x85\xf0\xb1\xb5\x05\x4b\xc0\x20\xcf\x2f\x95\xdc\x4c\x3c\x42\x89\xae\xf4\x4a\xa3\xc0\x06\x2f\x37\x13\x22\xfe\x09\xd3\xe6\xeb\xa6\xc2\x6c\x88\x49\x34\x22\xd9\xc2\xd7\xa3\x28\xeb\xf6\xf2\xf4\x72\x42\x0f\xb5\x46\xe3\xda\x36\xc4\x15\x08\x25\x1c\xb4\xc1\x02\x82\xa1\x7e\x19\x80\x9f\xd3\xbf\x05\xd6\x7e\x54\x89\xfa\xa4\x8d\x2c\x45\x32\x2a\xbb\xdf\x33\xfd\xb8\x52\xda\x71\x9a\x18\xf6\x8e\x51\x7f\x99\xa3\xe3\x69\x0f\xf3\x0a\x3d\x26\x81\x47\xdd\x5b\xb1\x7b\x5a\x08\xee\x08\x55\xec\x00\xd8\xa8\xc7\xa3\x8e\x7b\x16\xbd\xfa\xa0\x85\xf2\x21\xf2\x0b\x11\x79\x54\xf2\x15\x02\x27\x78\x40\x28\xa9\xe4\x2a\x9f\xf4\x03\xe0\xc1\x52\x5c\x57\x2a\xa3\xe7\x7c\x2e\x37\xb0\x44\x85\x86\x80\x2e\x07\x5b\xa0\x94\x60\x33\x23\x2a\x97\x10\xfc\x35\x1e\xda\x51\x54\x82\x98\xae\xb9\xf8\xd5\x83\x5a\xd0\x11\x6a\xa8\x44\x85\x84\x5f\x13\xbf\x85\xd4\x96\x08\x14\x3e\x49\xa1\x90\x80\xb4\x75\xc8\x73\x42\x95\xaf\x5e\x35\xaf\x48\xe8\xa6\x24\x58\xcf\x58\x6c\xbb\x34\x6b\xbd\x1f\x4d\xcb\x6d\x49\xda\x9b\xf4\x51\x0b\x35\x64\xf0\xea\x15\xb0\xb6\x89\x66\x65\x4a\xe1\xbe\x63\x25\x17\x2a\xb5\x85\x8f\x61\xe0\x1d\x0c\xfe\xe2\xae\x31\xd8\xd9\x0a\x4e\x0c\x72\xef\x79\x28\x6d\xea\x0c\xf4\x26\x59\xd9\xbd\xae\x8a\xb0\x6c\x3c\xfe\xc6\xda\x91\x95\x7e\xe7\x58\xa5\xf8\xc5\xa1\xb2\x94\x0a\x69\x2b\x32\xcd\x48\x0b\x12\xd1\x41\xfd\x0d\xa0\x3e\x5c\xda\x7f\xc9\x8e\xc0\x1e\x6d\xe9\xad\x51\xd1\x82\x78\xbd\x6b\x45\x5c\xb7\xd3\x34\x0d\x21\x8a\xab\x44\x07\x37\xdf\x12\xa2\x6f\x11\xf6\x4e\x39\xfa\x9d\x39\x09\x63\xbe\x5b\x2f\xfd\x9f\xb7\x7c\x09\xd3\xf0\xd9\x00\x5b\xac\x34\x75\xff\xe9\xee\x0c\x1a\xc4\xec\xf8\xa1\x61\x6c\xb2\xa3\x27\xc8\x6f\xd0\x7b\x97\xe6\x98\x22\x2f\xa6\x3a\xfc\x40\x89\xd7\x88\x7a\xa1\x3c\x0c\xb1\x86\x9b\x82\x0e\xd3\x26\x29\x43\x5b\x23\x8d\x47\x5b\xed\xb0\x41\x09\x93\xd8\x5d\x7b\x6d\xf3\xf3\xc9\x8d\x87\x07\xdd\xc4\x6a\x34\x3e\x27\xfb\x68\x3f\x5d\x9e\x1c\x7f\x7a\xb8\x3a\xbe\x7d\xdf\x71\xf8\x68\x1e\xa0\xbf\x3e\xfb\x3c\xbb\x99\x5d\x5e\xec\x9b\x88\x81\xe1\x3e\xe9\x62\x36\x69\x43\x97\xc4\x75\x38\xf4\x09\xb8\x63\xfd\x18\xb2\x3e\xcf\x55\x2d\xe5\x95\x96\x22\xdb\x10\xdc\x91\x4f\x7c\x63\xa3\xc7\xfd\xc9\xb2\xc7\xf5\x83\x13\xc3\xfb\xd3\x58\x77\xf0\x9d\xe2\x0b\xf9\xb4\x47\xb5\xfe\xff\xa2\xaf\x98\xce\x24\x7c\x2b\x8f\xb7\x76\xab\x4a\xe7\xca\x4f\x47\x7a\xf1\x59\x97\xcb\x91\x39\xd8\xc2\x56\x42\xe5\x6c\xe2\x57\xfb\x68\x01\xe3\x95\xf8\x8c\x86\x4a\x9e\x2e\xd6\x3f\x37\xe7\x4d\x03\x61\x1d\xee\x66\xa4\x81\x4d\xa0\xd1\xd5\x3f\xb6\x15\xcf\xe8\xae\x6d\x56\xed\x6d\x58\xae\x58\x1f\xbe\xb3\x02\x8d\x70\x7c\xe9\x19\xfe\x59\xeb\xd5\x8a\xb7\xf4\xa4\x9a\x2b\xbe\xc4\xfc\xb7\x0d\x8b\x19\xcc\x1a\x10\xdf\x0a\xed\xcd\x2c\x92\x1c\xd1\x7d\x34\x9d\x22\xd5\x37\xdb\xa0\x9f\x10\x21\x31\x48\xe6\x05\xae\xd1\x74\x16\xf6\xe6\x5a\x97\x1a\xd0\xb3\xb7\x73\xdd\x9b\x63\x6a\xd5\x33\x17\x80\xf9\xdc\x63\x93\x2e\xf6\x5b\xb7\x31\x71\xb7\x64\xfb\x8b\xf1\x5c\xa8\x31\xa1\x8b\x9d\x63\x0f\x3b\x9a\x29\xd1\xbb\xbb\xef\x13\x8e\xc7\xf0\x6e\xf6\xef\xf3\xb3\x09\x9c\x14\x5c\x2d\xfd\x06\xc1\x66\x8b\x0b\xed\xae\x0c\x5a\x54\x8e\xbd\xb0\xb0\xab\x0e\xd6\x95\x47\x4b\xd5\x6c\x4a\xf7\xed\xbf\x5f\x9e\x7d\xdf\xdc\x4a\xb8\x93\xf3\xa1\x6f\xe4\xdf\xc8\xad\x93\x06\x65\xfe\x0f\x19\xd6\x05\xba\x9f\x60\xdf\x4b\xb1\xfd\x49\xf6\xfd\x44\x8b\xf9\xd2\xa4\xcd\x4b\x5b\x9a\x37\x98\x00\xc3\xac\xd0\x40\xa8\x43\xd3\x54\xf7\x7f\x2d\xb5\xce\xe7\x1b\x64\x9d\x90\x10\x30\xfc\x52\x69\xe3\x6c\x6a\x6a\x05\x53\x9a\x42\xed\x49\xf7\xbf\x4c\x98\xf6\xfe\xb1\x39\xf8\x6f\x00\x00\x00\xff\xff\x68\x7b\x20\x79\x45\x16\x00\x00")

func jsRunJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunJs,
		"js/run.js",
	)
}

func jsRunJs() (*asset, error) {
	bytes, err := jsRunJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRun_mockJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcd\x4a\x03\x51\x0c\x85\xf7\xf7\x29\x0e\x5d\x75\x68\x4d\x5d\x0a\xd2\x9d\x08\xba\xf6\x05\xee\x5c\xe2\xf4\xb6\x33\xc9\x90\xe4\x52\x41\x7c\x77\x19\xb4\x3f\xdb\x93\x2f\xe7\x7c\x69\xb7\xc3\xc7\xa1\x3a\xe6\x5c\x4e\x79\x60\x4c\x5a\x4e\x8e\x38\x30\xac\x09\x1d\x1d\x9f\x4d\x4a\x54\x15\x27\xbc\x05\x4a\x16\x18\xcf\x63\x2e\x37\x40\x0d\xc1\x1e\x55\x06\x4a\xe9\x82\xe3\x9c\x6b\xbc\xaa\xbd\x6b\xbf\x3e\x6a\xdf\xe1\x3b\x01\x45\xc5\x75\x64\x1a\x75\x58\x42\x92\x3c\x71\x97\x12\x60\x1c\xcd\x04\x61\x8d\xd3\xcf\x5d\x89\x35\x59\xc0\x2d\xf8\xaf\xe0\x9f\xbb\xfc\x62\x83\xd5\xc3\x0a\x1b\xbc\xe4\x60\x12\x3d\xaf\xbb\x6b\xc4\x54\x74\x9a\x6a\x90\xb7\xde\xc3\xaa\x0c\xeb\xc7\x2d\x9e\xba\xe7\x65\x80\xbf\x66\xb5\x70\xba\x49\x62\x7f\x67\x7c\xbd\x5b\x13\xec\x17\x8b\xf4\x1b\x00\x00\xff\xff\xf2\x0f\x52\xe5\x29\x01\x00\x00")

func jsRun_mockJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRun_mockJs,
		"js/run_mock.js",
	)
}

func jsRun_mockJs() (*asset, error) {
	bytes, err := jsRun_mockJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run_mock.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\xdf\x3e\x75\xe3\xd2\xfb\x04\x73\x10\x5d\x51\xf0\xe8\x4d\x44\x42\x52\xdd\x1d\x08\x55\x6d\x55\x7a\x7b\x17\xd9\x77\x97\x74\xdc\x71\x66\xf0\xe0\x31\xf9\xc9\x97\xbf\x3e\xea\xfe\x1e\x5f\x97\x64\x48\x86\xb2\x10\x74\x63\x26\xc5\xae\x7e\x5d\x13\xcf\xb0\xa0\x69\x2d\xa3\x0b\xc2\x26\x99\xc6\x2c\x73\xdf\x7d\x11\x1f\x6b\xf8\xee\xfd\xe7\x0f\x08\xa2\xd4\x0d\xce\x4d\x1b\x87\x92\x84\x31\x25\xa5\x87\x47\xe2\xd2\xd3\x80\x5f\x0e\x78\xf4\x0a\xaa\x17\x9f\x3c\xc7\x4c\x8a\x13\x98\x76\x3c\x5c\x5c\xf5\x83\x73\xc0\x6b\x97\x59\xc8\x90\xf8\x28\x64\x41\x56\xaa\x87\x7d\x49\x61\xc1\xd4\x0f\xb5\x2a\x3d\x51\xd8\x0a\x45\x98\xa0\x2c\xbe\x60\x27\x04\xcf\xf0\x21\x90\x59\x43\xd5\xd7\xa2\x69\x4e\xec\x73\xfb\x1f\x7b\x2a\x8b\x6c\x05\x4a\x3f\xb7\xa4\x75\x84\x5e\xf4\x0e\x4a\x3e\xe7\xe7\x3b\xf8\x9c\x65\x4f\x3c\x0f\xc7\xdb\xcd\x48\x51\xa4\xc1\x56\x6f\x4d\x50\x03\x79\x95\x8d\xe3\xe8\x00\x7a\x5a\x45\x8b\x8d\x3f\x5a\x70\x02\xd5\x49\xd2\x84\xfe\x8d\xd2\x9c\xac\x90\x1e\x83\x5a\x73\x01\x5c\x99\x64\xf9\x03\x5c\x9a\x07\x43\xa4\x29\x31\xc5\xee\x10\x02\x28\x95\x4d\xd9\x01\x2f\xf5\x7c\x4d\xec\x2f\xa5\x0e\xee\x06\x7d\x84\x86\x2c\x3e\x52\x1c\xf1\xb1\xcd\xdb\xe1\x2d\x68\x2c\xcf\x2b\x0d\xe7\x9e\x97\x98\x6f\x2d\xfc\xfe\x5f\x6d\xcf\x7d\x28\x62\x12\xbd\x85\xdf\xb6\xaf\x7b\x30\x55\x43\xff\xf8\xaf\xe6\x53\x4f\x83\x7b\x71\xee\x55\xe9\x79\x91\x70\xfa\xbb\x54\xee\x77\x00\x00\x00\xff\xff\x0b\x8b\xea\xff\xb1\x02\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsWaitgroupJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x8e\x9c\x30\x10\x86\x7b\x3f\xc5\x5f\x82\x14\x99\x27\xd8\x32\x8a\x92\x22\x4d\x22\xa5\x88\x52\x18\x18\x62\x73\xc6\x83\xec\xe1\xd8\xd5\x89\x77\x3f\xd9\xbb\x2c\x48\x57\x5e\x61\xad\xd6\x78\xbe\xff\x9b\xb1\x9b\x06\x7f\x8c\x93\x6f\x91\x97\x19\xab\x71\x92\x30\x70\xc4\xb4\x78\x71\xb3\x27\x8c\xdc\x26\x08\x63\x70\xc1\x25\xab\xf1\x5d\xb0\x3a\xef\x21\x36\xf2\x0a\x13\x40\x31\x72\x54\x4d\x03\x93\x90\x98\x43\xfe\x35\xb9\x0c\x91\x66\x8e\x92\x9e\x87\xb4\x1a\x96\xd0\x89\xe3\x70\x44\x56\x35\xde\x14\x20\xd6\x25\x5d\xa2\x2e\xf8\xfb\x4f\x29\x20\x03\xfb\x3e\xaf\x8c\x0b\xb4\x16\xa4\x30\xc4\x52\xf1\xfc\x9f\xcb\xf7\xd2\x7c\xf4\x82\x1d\x5f\x8d\xdc\xde\xb9\x27\xb2\x9e\x97\x64\xcb\x17\x05\x6c\x8f\x88\xb8\x84\xbc\x12\xe8\x95\xe2\xad\x44\xb8\x50\x22\x0a\xfe\x0b\x4c\xe8\xf3\xdf\x70\x1a\x8d\x58\x9a\xb2\x48\xc7\xd3\xec\x49\x48\xef\x12\x19\x76\x92\xf8\x68\x30\x70\xfc\x6a\x3a\x5b\x3d\xc7\x50\x8d\xfb\x21\x60\xd4\xad\xe9\x5e\x72\x6c\xe8\xab\xba\x6c\x6e\xf5\x01\xc8\xf9\xd5\x59\x3d\x6f\x3c\xac\x96\x20\xce\xdf\x6f\xca\x44\x3a\xc4\xf0\x93\x85\x20\xd6\x48\x61\xa0\x67\x4a\x08\x2c\xa5\xed\xdc\x64\xb1\xc2\x6f\x4b\xb7\x3b\x73\x5a\x92\xa0\x25\x24\x31\x51\xa8\x07\x5d\x85\x62\x30\xde\xdf\x34\xaa\x5f\x44\xc7\xbd\x95\x66\x39\xe2\x07\xb7\x27\xef\x5a\x9d\x6c\x3f\x35\x8b\x67\xbb\x8f\x29\x6c\x6a\x53\x8a\xae\xe5\x41\xe9\xe3\xc1\x5e\x0e\x23\xf5\x1e\x00\x00\xff\xff\x60\x6f\x0e\xe7\xca\x02\x00\x00")

func jsWaitgroupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsWaitgroupJs,
		"js/waitgroup.js",
	)
}

func jsWaitgroupJs() (*asset, error) {
	bytes, err := jsWaitgroupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/waitgroup.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/event.js": jsEventJs,
	"js/job.js": jsJobJs,
	"js/mock8s.js": jsMock8sJs,
	"js/run.js": jsRunJs,
	"js/run_mock.js": jsRun_mockJs,
	"js/runner.js": jsRunnerJs,
	"js/waitgroup.js": jsWaitgroupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"event.js": &bintree{jsEventJs, map[string]*bintree{}},
		"job.js": &bintree{jsJobJs, map[string]*bintree{}},
		"mock8s.js": &bintree{jsMock8sJs, map[string]*bintree{}},
		"run.js": &bintree{jsRunJs, map[string]*bintree{}},
		"run_mock.js": &bintree{jsRun_mockJs, map[string]*bintree{}},
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
		"waitgroup.js": &bintree{jsWaitgroupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

