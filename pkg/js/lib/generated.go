// Code generated by go-bindata.
// sources:
// js/event.js
// js/job.js
// js/mock8s.js
// js/run.js
// js/run_mock.js
// js/runner.js
// js/waitgroup.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsEventJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4a\xc6\x30\x10\x85\xf7\x39\xc5\xdb\x55\x41\xd2\x13\x74\xe1\x42\x70\xed\x0d\xa6\xc9\xd4\x04\x62\x52\x33\x53\x6b\x91\xde\x5d\x42\x94\x9f\xf2\xef\x86\x79\x8f\xef\x9b\x19\x47\xbc\x7c\x71\xd6\x57\xca\x3e\x71\x85\x67\x71\x35\xce\x2c\xd0\xc0\x48\x51\x14\x65\x01\xb7\x4a\x5b\x91\xe2\xd9\x45\x8f\x28\xa0\x9d\x2a\xa3\x2c\xd6\x2c\x5b\x76\x1a\x4b\xbe\x90\x1e\x1e\xf1\x63\x80\xce\xaf\x47\x47\x20\xfc\x69\xde\x59\xbb\x61\xa5\x4a\x1f\x18\x3c\x29\x0d\x4f\xd8\x43\x74\xa1\xc1\x5b\x34\x17\x7f\x34\x79\x9b\x2b\x7f\x6e\x2c\x6a\x0d\xa0\x21\x8a\x5d\x37\x09\x98\xf0\x6f\x6e\xb2\xf3\x96\xa5\xf4\xd6\xfb\x77\x95\xd3\x18\xfe\x5e\x4b\x55\xb1\x97\xb7\xa7\xcb\xed\xe6\x37\x00\x00\xff\xff\x38\xd9\xc5\x1d\x16\x01\x00\x00")

func jsEventJsBytes() ([]byte, error) {
	return bindataRead(
		_jsEventJs,
		"js/event.js",
	)
}

func jsEventJs() (*asset, error) {
	bytes, err := jsEventJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/event.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsJobJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xc1\x6e\x1b\x37\x10\xbd\xef\x57\xbc\xea\x24\xb5\x8a\xd6\x41\xda\x1e\x62\xec\xc1\xa8\x1d\x20\x29\x50\x04\x8d\x8b\x1e\x8a\xa2\x98\xe5\xce\x6a\x19\x73\x49\x95\x1c\x4a\x16\x02\xff\x7b\x41\x72\x25\xaf\x95\xf4\x22\x81\xb3\x9c\xf7\x86\xef\x3d\xb2\xae\x71\x3f\x30\x3a\xee\x29\x1a\x81\x1e\x69\xcb\xd0\x01\x41\x9c\x7a\x40\x6c\xa3\x95\x88\xd7\x3f\x6f\xae\x7e\xc4\x0f\x18\xe9\x81\x41\xb6\xc3\x56\xcb\xa6\xda\x93\x07\x29\xdd\xbd\xcf\x3d\x0d\x16\x69\xf1\xaa\xb4\xbc\x35\x24\x1c\x64\x51\x55\x17\x04\xc2\x7e\xd4\x96\x0c\x78\x8c\x86\xc4\x79\xc8\x40\x82\xcf\xae\x85\x50\x78\x08\x38\x68\x63\xd0\x32\xf8\x91\x55\x14\xee\x10\x6d\xc7\xbe\xb0\x4d\x20\xf7\x27\x8c\x06\x8b\xba\xd5\xb6\x0e\x43\x21\xfa\xe8\x9d\x38\x39\xee\x18\xbd\xf3\xf8\xe0\xda\x4d\xd5\x47\xab\x44\x3b\x9b\x56\x4b\x4b\x23\xaf\x0b\xcf\x0a\x5f\x2a\x20\x81\x8e\x47\x34\x90\x41\x87\xaa\x02\x74\x8f\xe5\x77\xfc\xb8\x73\x5e\xc2\xe6\x1f\xde\xb3\x95\xb2\x13\x90\xc1\xbb\x03\x16\xb9\x06\xeb\x04\xbd\x8b\xb6\x5b\x54\xc0\x53\xea\xac\x6b\xfc\x46\x23\x9f\xe6\x57\x6e\x64\xc8\xc0\xd8\x79\xee\xf5\x63\x1e\x28\x2f\x5d\x57\x2b\x67\x7b\xbd\x1d\x69\x87\x34\x50\xd8\x54\xc8\xfc\x9b\xb4\x42\x93\x8b\xd7\x13\xe4\xa7\x81\x8d\x49\x7e\xa4\x5e\xe1\x0b\xe9\x0e\x83\x56\xc3\x5c\x37\x1f\xed\x49\xaf\x09\x33\x64\x80\xe6\x52\xba\x13\xfe\x7d\xee\x9d\xf0\x8d\x0e\x02\xd7\x4f\x80\xe2\x12\xdc\x26\xb9\x77\x04\xf9\x99\x23\xda\x22\xf0\xbf\x91\xad\x62\x68\x1b\x74\xc7\x70\x7d\xc1\x23\x14\xc2\xe5\xe4\xcb\xea\x3c\x48\x01\x6d\xf0\xd7\xdf\xd7\x93\xce\x33\x1f\x2e\xf6\xe4\xff\x99\xb0\x37\x50\xce\x18\x2e\x46\xba\x3e\x2b\x54\xef\xc9\x44\xc6\x8e\xb4\x0f\xa9\xc6\x76\xaf\xbd\xb3\x63\x72\x67\x4f\x5e\x53\x6b\x66\xd2\xb2\xdd\xa3\xc1\x97\xa7\xf3\xb9\x07\x9e\xb2\x9e\xe2\x4c\x16\x6e\x97\xc0\xc9\x40\x68\x7b\xee\xd2\x53\xb2\xcf\x29\x3f\xb5\xef\x5c\x97\xcd\x4e\x17\x85\x05\xed\x31\x49\xb5\x5c\xad\x33\x9a\x72\x56\x48\xdb\xa2\x69\xf6\x34\x69\x5a\xbc\x87\xf2\x4c\xc2\xdd\x99\x62\x42\x9a\x70\x93\x7f\x81\x6d\x17\xf2\xc7\x72\x2b\x1c\x7e\x8d\x2d\x7b\xcb\x32\x3b\x4f\xda\xd8\xe0\x14\xee\xe5\x0b\x15\x5b\x52\x0f\x5b\x9f\xc2\xb9\xbc\x48\xf2\xf3\x9e\x03\x69\x59\xae\xaa\x5c\xf0\x2c\xd1\xdb\x72\x05\x80\x22\xd1\x05\xd0\xff\x72\x9d\x84\x68\xb2\x00\xa9\xb4\xc6\x05\xe9\xf5\x19\xb4\xae\x91\x78\xff\xb0\xa2\xcd\xad\xb3\x59\xbe\x81\x7d\xb9\xad\x89\xec\x40\xbe\x0b\x50\x6e\xdc\x91\xe8\x56\x1b\x2d\xc7\x35\xda\x28\xe8\x1c\x87\x74\xe7\x06\x6d\xb3\x3b\x75\x8d\xdb\xbb\x8f\xbf\xdf\xfd\x72\x73\x7f\x77\xfb\x16\x7f\x4e\x6f\x86\xe7\xd1\xed\xb9\x43\x17\xbd\xb6\x5b\xdc\x98\xdd\x40\xd5\xec\xc4\xcf\xcc\x17\xe7\xf9\x96\x0e\xb3\x89\xf3\x4f\x40\x4c\xed\xa0\xec\xe3\x90\x0a\x8b\x4f\x51\x29\xe6\x8e\xf3\x33\x50\xd7\xcf\x1d\xcb\x15\x14\xd9\x34\x93\x22\x63\xb8\x83\xb3\x78\x96\x33\xad\xdb\xcf\xac\x24\x6c\xbe\xee\xd3\x01\x14\xc5\x8d\x24\x3a\xf5\x1e\x4f\x08\xed\xf1\x6c\xfd\xbc\xeb\x7d\x9f\xe7\x29\xc3\x07\x2c\xde\x91\x36\xdc\x2d\xd6\x25\x41\xf9\xd1\x0a\x29\xe0\xfc\xa8\x38\x67\x7c\xf3\xb2\x2f\xda\x90\xf5\x1f\x9d\x4f\x0f\x16\x59\xbc\xfe\x09\xa3\xb6\x51\x38\x60\xf9\xe6\xea\x0a\xdf\xe3\xcd\xab\xc0\xca\xd9\x74\xf3\x85\xfd\x9e\x4c\x58\xad\xcf\xd0\x10\x3d\xb2\x8b\xf2\x92\xe1\xac\xf9\xb7\xa2\x93\xea\xef\x9c\x4f\x4f\xf2\x78\xfc\x2a\x30\x25\x2f\x4f\x55\x75\xaa\x7f\x70\x2d\x9a\xf4\x80\x57\xff\x05\x00\x00\xff\xff\x53\xa1\x7e\xaf\xae\x06\x00\x00")

func jsJobJsBytes() ([]byte, error) {
	return bindataRead(
		_jsJobJs,
		"js/job.js",
	)
}

func jsJobJs() (*asset, error) {
	bytes, err := jsJobJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/job.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsMock8sJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8a\xdb\x30\x14\x85\xf7\x7e\x8a\x43\xe8\x62\x02\xc1\x43\xb7\x81\xac\x0a\xdd\xb5\x94\x0e\x74\x53\x4a\xb9\x91\x8e\x13\x75\x6c\xc9\xe8\x67\x3a\x50\xfc\xee\x45\xae\xa5\xd8\xd9\xb4\x8b\x6e\x94\x9b\xfb\xf3\x59\xe7\xea\x3c\x3e\xe2\x29\x3a\x4f\x0c\x4e\x3d\x63\x74\x1a\x9a\x9d\xb1\x26\x1a\x67\x03\xae\xf4\x84\x04\xec\xac\x0c\xdc\xe1\x88\x37\x9e\xc1\x25\xaf\xd8\xbc\x88\x9f\x67\x3e\x39\x1d\x70\xc2\xaf\x66\x6a\x9a\x0a\x53\xce\x76\xe6\x32\xc8\xf8\x4f\x88\x77\x73\xf7\x87\xdc\xbd\x80\x72\xe5\x39\x9d\xe9\x2d\x23\xff\x64\x81\x9f\x26\x5e\x3f\x3e\x1d\xd1\x25\xab\xf2\xf5\x1e\x6c\xd8\xcf\x05\xc0\x33\x26\x6f\x17\x98\x67\x03\x4c\x05\x53\x72\x0b\x44\x39\xcf\x2f\x6f\x8f\xcb\xdc\xe8\x74\x09\x81\x0b\xe3\x1a\x2e\x03\xf7\xb5\x56\x3f\xf1\xbd\xed\x8c\xd5\x0f\x45\xf9\xe1\x36\xc0\x7e\xd3\x5f\x27\xd8\xb3\x1d\x18\x45\x4b\x94\x36\x53\x71\x3a\x21\xff\xd6\xd6\x69\xbf\x84\xd3\x61\x09\x94\xa7\x44\xae\x6e\xa3\xd9\xad\xe1\x79\xd1\x49\x29\x52\x53\x1f\xf0\x39\x59\x6b\xec\xe5\x00\xb1\x1a\xef\xc5\xf4\xd4\x10\x4f\x04\x37\x10\x2f\xd2\x1b\x9d\xcf\xc4\xd0\x56\x80\x66\xd7\x86\x28\x31\xcd\xcb\xc5\x78\x95\xc0\x23\x76\x15\xba\xc3\x54\x7b\x8b\xd6\xaf\x79\xa8\x2a\xe9\xe5\xcc\x3e\xb4\x3f\xdc\x39\x6b\xf9\x86\x53\x66\x36\xf7\xeb\xca\xb9\x45\x5b\x53\xce\x59\x25\x5f\x23\x6d\xc8\x26\x2b\x0f\x50\x3d\x73\x7b\x91\xbf\xad\x61\x6b\x9e\xff\x76\xbf\x6c\x1d\xbe\x8e\xce\xc7\xd0\xae\x2c\x5e\xc2\x4d\x6d\xe3\xdd\x6d\xa2\xf6\x6d\x9c\x7c\xfb\x73\xc7\x99\x2d\x5a\x1d\xfc\x3b\x00\x00\xff\xff\xc6\x15\x83\xe4\x98\x03\x00\x00")

func jsMock8sJsBytes() ([]byte, error) {
	return bindataRead(
		_jsMock8sJs,
		"js/mock8s.js",
	)
}

func jsMock8sJs() (*asset, error) {
	bytes, err := jsMock8sJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/mock8s.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7b\x6f\xdb\x38\x12\xff\xdf\x9f\x62\xca\x2b\xb6\x36\xaa\xc8\x2d\x16\x38\x2c\xdc\x33\x0e\x59\x27\xdd\xba\x6d\x1e\xd7\x64\x7b\x77\x48\x83\x2c\x2d\x8d\x2d\xd6\x14\x29\x90\x94\xb3\xbe\x6e\xbe\xfb\x61\x48\xea\xe1\xc4\x49\x81\x05\xf6\x9f\x44\xd2\xbc\x87\xbf\x79\xd0\xe3\x31\x5c\x16\x08\x42\x39\x34\x8a\x4b\x0b\x4b\x6d\xc0\xd4\x4a\x09\xb5\x02\xc7\xed\xda\xa6\x70\x59\x08\x0b\x65\x6d\x1d\x2c\x10\xa4\xe6\x39\xe6\xb0\xc0\xa5\x36\x08\x5c\x6d\x41\x2f\xc1\x15\x38\x18\x8f\x41\x2f\xbe\x62\xe6\x2c\xb8\x82\x3b\xa8\x2d\x92\xa2\xe1\x28\x1d\x8c\xc7\x44\x3d\x94\x12\x3e\xd4\x0b\x34\x0a\x1d\x5a\x38\x3c\x9f\x43\xc6\xa5\xb4\x60\x0b\x5d\xcb\x3c\x28\xcf\xb8\x14\xff\xc3\x1c\x0a\x34\x98\xc2\x99\x2b\xd0\x40\xa9\xf3\x5a\x62\xcb\xa7\xb4\x23\x75\x24\x0b\x2f\xd6\xad\xc2\x17\x90\x0b\x83\x99\x93\xdb\x74\x40\xf4\x5b\x2e\x1c\x38\xbe\x46\x0b\x1c\xbe\xea\xc5\x81\x14\x6b\x8c\x2e\x02\x57\xb9\x67\xb0\x50\x2b\x27\x24\x08\x07\xb6\xce\x32\xc4\xdc\x82\x36\xb0\xe4\x42\xda\x74\xb0\xac\x55\xe6\x84\x56\x9e\xf5\xad\x36\xef\xf5\x62\xf8\x55\x2f\x12\xc0\x11\x7c\x1b\x00\x6c\xb8\x81\x72\x0b\x53\x52\x3f\x18\x80\xcf\xdd\x90\x3e\x0a\x98\xc2\xab\x37\x20\xe0\x1f\xf0\xe3\x2b\x7a\x78\xf9\x32\x48\x00\x64\x5a\x59\x2d\x31\x95\x7a\x35\x64\x59\x81\xd9\x9a\x32\x6d\x1d\x77\xb5\xa5\x54\x32\x78\x09\xe5\x36\xad\x74\x7e\xca\x4b\x1c\x79\x19\x52\xb9\x86\x29\x74\xc1\xa6\xb7\xc2\x15\xa7\x17\xc3\xca\x68\x8a\x27\xed\x51\x14\x2f\xd1\x56\x3c\xeb\xc9\x96\xdb\x4a\xe7\x24\x9f\x66\xda\xe0\xe7\xd7\xa4\x3d\x5d\xa1\x1b\xf6\x0d\x3d\xf0\xee\xfd\xc5\xd9\x69\x6a\x9d\x11\x6a\x25\x96\xdb\xa1\x57\x32\x1a\x3d\x0c\xe2\x5c\xe7\xf7\xbc\x86\x97\xc0\x40\x58\x10\xca\x07\x86\x91\x4c\x56\x43\xa0\x69\x55\x70\xdb\xd8\x14\x4b\x18\x3e\x24\xc2\x74\x0a\xec\x2d\x17\x12\x73\xd6\xe4\x0e\xc0\x15\x46\xdf\xc2\x63\x26\x97\x9e\x1d\x9c\x26\xe0\xd1\xbf\x4c\x97\x95\x44\x3a\x42\xf6\xc6\x6b\xb8\xfb\x9e\xc5\x8b\x80\x82\x1d\xa3\x06\x5d\x6d\x14\x38\x53\x63\x4f\xc9\x78\x0c\x17\x12\xb1\xf2\xa7\xce\x21\xc7\xa5\x50\x98\x03\x2f\x75\xad\x9c\x2f\x0a\x51\x62\xea\x59\x2d\xf1\x0d\x7f\xa4\xdc\x91\x6c\x0c\x82\xe8\x39\xe8\xda\x79\x78\x11\x0a\x48\x53\xb5\x3f\xb4\x10\x13\x1b\xdc\x79\x6c\x53\x78\xa6\x56\x11\xd9\xc1\x03\x05\xb8\x41\xe5\x60\x88\xa3\x14\xe6\x0e\x72\x8d\x96\x6a\x25\x14\x02\xb1\xb8\x02\x3d\x7b\x97\x18\xa4\xda\x0c\xf5\x2d\x48\x99\xd4\xb7\x07\x12\x37\x28\xa1\x32\xa2\x14\x4e\x6c\xb0\x57\x05\x54\xcd\x7d\xf8\x8f\xc7\xf0\xfc\xfd\xd9\xcf\x07\xcf\x2f\xe7\x27\xc7\x07\xcf\x7f\x99\x5f\x5e\xbc\x3b\x8c\x65\xb1\xfe\xc9\x7a\xdf\x7d\x6d\x78\x4c\x52\x18\x07\x14\xd9\x11\x77\x98\x2a\x7d\x3b\x1c\xb5\x9f\x30\xcd\x74\x59\x0a\x97\xda\x7a\x11\x10\x37\x7c\x95\xc0\x4f\xa3\x37\x51\x5b\x56\x46\x65\x51\x6d\xfc\x4c\x7d\x0a\xcd\x5e\x52\x56\xc2\x14\x14\xde\xce\x4e\x86\x41\x78\xb4\x23\x13\x88\x9f\xfc\xf3\xb9\xce\x87\x9d\xa6\xc4\x3b\x2c\x4a\xbe\x0a\xf8\x0c\x94\xb4\x44\xc7\x73\xee\x78\x2a\xf9\x02\xa5\x4d\xbf\xea\x85\xda\x8d\xef\x71\xde\x05\x4a\xad\x56\xd6\x69\x98\x42\x53\xb0\x06\x2b\xed\xc5\xe8\x49\xf2\x0c\x87\xe3\x2f\xe3\xf1\x2a\xa1\x84\x8c\x1e\x57\x15\xd2\x04\xd3\x36\x63\x83\x70\x0e\x87\x79\x0e\xa8\x36\x14\xa1\x4d\x63\xa4\xa8\x36\x9f\xb9\xb1\x30\x85\xab\x6b\x62\xbb\x49\x91\x67\x05\x9d\x60\x8a\x6a\x93\x40\x73\xae\xc3\x0d\x97\x09\xac\x71\xdb\x20\x3e\x0a\xa6\x55\x6d\x8b\xe1\x37\x72\x72\x42\xe4\x04\x36\x5c\xd6\x38\xa1\x7f\x77\xfe\x68\xe8\x6f\xb0\x7f\xa4\xe1\x16\xc1\x3a\x21\x25\xdc\x72\xe5\x08\x63\x3c\xcf\xc1\x11\xb4\x9c\xf6\xd0\xf3\x39\x6d\x9b\xf4\x3f\xe1\xdf\x85\x90\x48\x9d\xd7\x43\xcf\x62\x56\x1b\xe1\xb6\x41\x9f\x2b\x84\x5a\x25\x1e\xbe\x3c\xcf\xa9\x36\x84\x83\x5b\xdf\xfe\x0d\xda\x5a\x3a\xea\x2d\xb5\x45\x13\x20\xbe\x40\x62\xe1\x0b\x89\x64\x8c\xfc\xa6\xc9\xe4\x95\x04\x7d\x75\x65\x9d\x41\x5e\xd2\xa0\x0b\xde\x50\xf5\x0f\x42\x2b\xd8\x39\x13\x6b\x8b\x0f\x8f\xa5\x22\xf6\x83\x90\x11\x76\x38\x9b\x1f\xdd\x7c\x3a\x3e\x3f\xbb\xf9\x70\xfc\x5f\x96\x44\x62\xcc\xd1\x1e\x9d\xa1\x77\x84\x26\xd0\x9d\x9a\xd3\x55\x2c\xb9\xf6\xfc\x68\x22\x5b\x0c\x13\x57\x6f\xd0\x18\x91\x87\x49\xcb\x9d\xc3\xb2\xf2\xc9\xb5\xe8\x7c\x18\xde\x9c\x8d\x49\xd3\x60\x75\x89\x3e\x6c\x40\x69\x7d\xf7\xd9\x8d\xa0\xf1\x7d\xf6\xf1\xec\xf4\xf8\xe6\xd7\x4f\x1f\x59\xb2\xd7\xe3\x4c\x6a\x85\xbf\x7e\xfa\x18\xfc\xdd\xaf\xe3\xe2\xe2\xdd\x13\x1a\xac\x2d\xbe\x23\xff\xcb\xfc\xf2\x09\xf9\x95\x70\xdf\x91\x7f\x77\x7c\x78\x74\x33\x3b\x3b\x39\x99\x5f\xde\xcc\x8f\x3a\x35\x4d\x69\x3c\x25\x3b\x9b\x77\xfc\x8c\x1a\x3b\x0b\xdc\xb1\xec\x6c\x85\x59\x9a\x69\xe5\xb8\x50\x68\xec\xd5\xab\x6b\x2a\x19\x2a\xbb\xa0\x6d\xd0\x0c\x7f\xea\xf5\xe7\xdc\x15\xb1\x0f\x74\xef\x7f\xfc\x01\x6c\x6c\x4d\xc6\x7a\x47\x9d\x69\xb5\x14\x2b\x28\x79\x05\x1b\x2d\xeb\x7e\xcb\xf0\x06\xc3\x47\x5f\xb0\x1e\x2b\x8d\xb7\xa1\x81\x25\x51\xfe\x84\x57\x13\xf8\xd6\xa7\xc0\xdd\x5d\xb2\x23\xc0\x36\x99\x3d\xb0\x22\xc7\x8c\x1b\x96\x00\x61\x66\x7b\x24\xcc\x04\xbe\xdd\xb5\xb3\x2b\xe9\xb8\x45\x6e\x2c\x67\x09\x95\xa0\x41\x37\x81\x6f\xf1\xe9\xd4\x93\x2d\x66\xd1\xc8\x00\xe0\xfa\xcd\x93\x49\x0a\x11\x9c\x50\x16\x1e\x0f\xa3\x4d\xd2\x04\xd8\xb8\xd0\x7a\xcd\x9e\x76\xbf\xc7\xdf\x3e\x3e\x15\xc6\x03\xfd\x63\x6b\x0b\x96\x80\x41\x9e\x9f\x29\xb9\x9d\xf8\x49\x1e\xa3\xe9\x15\x62\x81\x10\x8d\x36\x1d\x34\xbe\xc2\xb4\x79\xba\xa8\x30\x1b\x62\x12\x8f\x36\x81\x3d\xeb\xd7\x26\xb3\x17\x81\x79\x14\x95\x5f\x9e\x1d\x9d\x4d\xe8\xf0\x36\x68\x5c\xdb\x11\xb9\x02\xa1\x84\x83\x36\x81\x40\x2b\x9d\x5f\x90\xe1\x75\xfa\xf7\x20\xda\xcf\x34\x71\xcf\xda\x6c\x53\x76\xa3\x53\xd7\x7b\xc6\x05\x57\x4a\x3b\x4e\xdd\xdd\x5e\x31\x6a\x75\x0b\x74\xbc\xef\xa6\xd0\x63\x52\x78\xd0\x9d\x1f\xbb\x86\x29\xb0\x2b\x1a\xc7\xf7\x36\xbf\x68\xc7\x8f\xeb\x6b\xd6\x60\x9f\x86\x6b\x49\x5b\x25\xfb\xdb\x33\x12\x22\xfc\xdb\x02\xa5\x24\xb6\x2f\xea\x8b\x6a\xa0\x2f\x96\xe0\xbf\xc7\x7b\x81\xad\xab\x4a\x9b\xd0\xbd\x7e\xb3\xe8\x7e\xa3\x65\xa4\xa4\x85\x9c\x1b\x04\x8b\x12\x33\x87\x79\x02\x12\xdd\x0b\xeb\x87\x08\x35\x35\xb0\x5c\x21\x2d\x59\xbc\x96\xce\xc6\xc6\xdd\x99\xa4\xd5\x6d\xbc\x10\x6a\x6c\x0b\x46\xb5\xb7\x87\xb2\xe0\xb6\x68\x97\xba\xe8\xfc\xcb\x29\x30\xea\xa4\x07\x18\x1c\xee\x5a\xf3\x7b\x2d\x94\x77\xd1\xdf\x81\xe8\xc0\x4a\xbe\x46\xe0\x24\xd9\x38\x3c\xe9\xb9\xe1\xd9\x1e\x6a\x6f\x49\xe9\x57\x2d\xd4\x90\x7d\x51\xac\x1d\x00\x59\x99\xd2\x59\x5d\xb1\x92\x0b\x95\xda\xc2\x1f\x40\x10\x1d\xdc\x5b\xb1\x6b\x4b\x2d\x3d\xf2\x4d\xbe\x28\xca\xf7\x43\xf1\x51\x73\x34\x7f\xe6\xae\x70\xdf\xe4\xcc\x20\xf7\x4b\x69\xe8\x3a\xd4\xb4\xa2\xd5\x16\x64\x2a\xae\x55\xeb\x14\x7f\x77\xa8\x2c\xa1\x2d\x6d\xd9\xd3\x8c\x34\xe0\x30\x2b\x47\x8f\xea\x6e\x96\xdd\xc7\x3b\x4a\x67\xa3\x77\x75\x89\x9a\x83\xd4\x03\xed\xf1\xf6\x9a\xa6\x29\x0b\x1b\x5c\x58\xdf\xbb\x15\xef\x0d\x6d\xd1\xed\x56\x7b\xaf\xb4\xfd\x15\x34\x09\xcb\x4a\x77\xcb\xf3\xaf\x97\x7c\x05\xd3\xf0\xd8\x2c\x93\x58\x69\x9a\x52\xd3\xfd\xd3\x73\x10\x01\xf2\xac\x11\x6f\x00\xd2\x53\xc7\x78\x26\xf2\x71\xaf\xe3\x4d\x24\x77\x68\x5d\x0b\xc6\x47\x36\x14\x78\x36\x05\xd6\xe2\xf9\x11\x47\xc2\x10\x6e\x34\xf9\x96\x56\x61\x06\xd3\x06\xa7\xa1\x71\x92\x07\x07\x3b\x3d\xb7\xd9\x7d\x26\xb1\x85\xf7\x7a\xf3\xe7\xd9\x85\x5f\x7a\xba\xf9\xd9\xd8\xbe\x4b\xf6\xf1\x7e\x3c\x9b\x1d\x7e\xbc\x39\x3f\xbc\x7c\xd7\x49\xf8\x1c\x3f\xc2\xff\xe9\xf8\xf3\xfc\x62\x7e\x76\xba\x6f\x9e\x07\x81\xeb\xa4\xcb\xe1\xa4\x4d\x65\x12\x2f\xa6\xa1\x32\xe1\x8a\xf5\x73\xca\xfa\x32\xe7\xb5\x94\xe7\x5a\x8a\x6c\x4b\x4b\x9c\xbc\xe5\x5b\x1b\x23\xee\x8f\xaf\x3d\xa1\x3f\x3a\x96\x7c\x3c\x8d\x77\xdf\x39\xb7\x78\x62\x1e\xea\xa8\x36\x7f\xc5\x66\x19\x01\x4f\x26\x76\x90\xbe\x73\xe3\xa9\x74\xae\xfc\x38\xa6\xd3\x9f\x77\x68\x8f\xc2\xc1\x23\xb6\x16\x2a\x67\x13\x7f\xe1\x8e\x7e\x30\x5e\x89\xcf\x68\xa8\xd8\x89\xb0\x79\xdd\x7c\x6f\xda\x02\x9b\xb4\x17\x67\x46\x16\xd8\x04\x1a\x5b\xcd\xe7\x70\x99\xe9\x31\x02\xb0\x02\x8d\x70\x7c\x45\xec\xec\x5f\xb5\x5e\xaf\x79\x1b\x38\x29\xe7\x8a\xaf\x30\xff\x79\xcb\x22\x5e\x59\xa4\xb5\x20\x62\xbd\x91\x47\x9a\xc3\x86\x10\xc9\x8c\x72\xd1\x77\xcc\xa0\x75\xdc\xb8\x00\x03\xd2\x79\x8a\x1b\x34\xad\x45\xd6\x1b\x8b\x1d\x10\xa0\xe7\x6f\x17\x9c\x77\x87\xee\xe6\x49\x9f\xe8\x91\xc6\x26\x5d\x76\x77\xa8\x11\xa6\x3b\xba\x3d\xa1\x99\x61\xc9\xbd\xcf\x7e\x8d\x69\x1a\x7d\x8f\x76\xdd\x67\x1c\x8f\xe1\xed\xfc\x3f\x27\xc7\x13\x98\x15\x5c\xad\xfc\x5d\x88\xcd\x97\xa7\xda\x9d\x1b\xb4\xa8\x1c\x7b\xe0\x61\x57\x0b\xac\x2b\x86\x96\xeb\x2e\x3e\x5d\xb7\x3f\x7b\xdc\xf9\xde\xb9\x03\xa9\xd9\xc9\xd0\x37\xe9\x27\xd0\x33\x6b\x16\xd7\x3f\x81\xa1\x2e\xd1\x7d\x08\xed\x07\xd1\xf7\x81\x14\xf1\xd0\xc0\xe2\xa1\xad\x26\xc7\x13\x60\x98\x15\x1a\x68\x87\xd0\xf0\xc3\x0f\xe0\xdf\x56\x5a\xe7\x8b\x2d\xb2\x4e\x49\x48\x08\xfe\x4e\x2b\x8d\x4d\x4d\xad\x60\x4a\x93\xa6\xfd\xd2\xfd\x72\x08\xd3\xde\xcf\x88\x83\xff\x07\x00\x00\xff\xff\x82\x46\x17\xaf\x78\x15\x00\x00")

func jsRunJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunJs,
		"js/run.js",
	)
}

func jsRunJs() (*asset, error) {
	bytes, err := jsRunJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRun_mockJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcd\x4a\x03\x51\x0c\x85\xf7\xf7\x29\x0e\x5d\x75\x68\x4d\x5d\x0a\xd2\x9d\x08\xba\xf6\x05\xee\x5c\xe2\xf4\xb6\x33\xc9\x90\xe4\x52\x41\x7c\x77\x19\xb4\x3f\xdb\x93\x2f\xe7\x7c\x69\xb7\xc3\xc7\xa1\x3a\xe6\x5c\x4e\x79\x60\x4c\x5a\x4e\x8e\x38\x30\xac\x09\x1d\x1d\x9f\x4d\x4a\x54\x15\x27\xbc\x05\x4a\x16\x18\xcf\x63\x2e\x37\x40\x0d\xc1\x1e\x55\x06\x4a\xe9\x82\xe3\x9c\x6b\xbc\xaa\xbd\x6b\xbf\x3e\x6a\xdf\xe1\x3b\x01\x45\xc5\x75\x64\x1a\x75\x58\x42\x92\x3c\x71\x97\x12\x60\x1c\xcd\x04\x61\x8d\xd3\xcf\x5d\x89\x35\x59\xc0\x2d\xf8\xaf\xe0\x9f\xbb\xfc\x62\x83\xd5\xc3\x0a\x1b\xbc\xe4\x60\x12\x3d\xaf\xbb\x6b\xc4\x54\x74\x9a\x6a\x90\xb7\xde\xc3\xaa\x0c\xeb\xc7\x2d\x9e\xba\xe7\x65\x80\xbf\x66\xb5\x70\xba\x49\x62\x7f\x67\x7c\xbd\x5b\x13\xec\x17\x8b\xf4\x1b\x00\x00\xff\xff\xf2\x0f\x52\xe5\x29\x01\x00\x00")

func jsRun_mockJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRun_mockJs,
		"js/run_mock.js",
	)
}

func jsRun_mockJs() (*asset, error) {
	bytes, err := jsRun_mockJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run_mock.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\xdf\x3e\x75\xe3\xd2\xfb\x04\x73\x10\x5d\x51\xf0\xe8\x4d\x44\x42\x52\xdd\x1d\x08\x55\x6d\x55\x7a\x7b\x17\xd9\x77\x97\x74\xdc\x71\x66\xf0\xe0\x31\xf9\xc9\x97\xbf\x3e\xea\xfe\x1e\x5f\x97\x64\x48\x86\xb2\x10\x74\x63\x26\xc5\xae\x7e\x5d\x13\xcf\xb0\xa0\x69\x2d\xa3\x0b\xc2\x26\x99\xc6\x2c\x73\xdf\x7d\x11\x1f\x6b\xf8\xee\xfd\xe7\x0f\x08\xa2\xd4\x0d\xce\x4d\x1b\x87\x92\x84\x31\x25\xa5\x87\x47\xe2\xd2\xd3\x80\x5f\x0e\x78\xf4\x0a\xaa\x17\x9f\x3c\xc7\x4c\x8a\x13\x98\x76\x3c\x5c\x5c\xf5\x83\x73\xc0\x6b\x97\x59\xc8\x90\xf8\x28\x64\x41\x56\xaa\x87\x7d\x49\x61\xc1\xd4\x0f\xb5\x2a\x3d\x51\xd8\x0a\x45\x98\xa0\x2c\xbe\x60\x27\x04\xcf\xf0\x21\x90\x59\x43\xd5\xd7\xa2\x69\x4e\xec\x73\xfb\x1f\x7b\x2a\x8b\x6c\x05\x4a\x3f\xb7\xa4\x75\x84\x5e\xf4\x0e\x4a\x3e\xe7\xe7\x3b\xf8\x9c\x65\x4f\x3c\x0f\xc7\xdb\xcd\x48\x51\xa4\xc1\x56\x6f\x4d\x50\x03\x79\x95\x8d\xe3\xe8\x00\x7a\x5a\x45\x8b\x8d\x3f\x5a\x70\x02\xd5\x49\xd2\x84\xfe\x8d\xd2\x9c\xac\x90\x1e\x83\x5a\x73\x01\x5c\x99\x64\xf9\x03\x5c\x9a\x07\x43\xa4\x29\x31\xc5\xee\x10\x02\x28\x95\x4d\xd9\x01\x2f\xf5\x7c\x4d\xec\x2f\xa5\x0e\xee\x06\x7d\x84\x86\x2c\x3e\x52\x1c\xf1\xb1\xcd\xdb\xe1\x2d\x68\x2c\xcf\x2b\x0d\xe7\x9e\x97\x98\x6f\x2d\xfc\xfe\x5f\x6d\xcf\x7d\x28\x62\x12\xbd\x85\xdf\xb6\xaf\x7b\x30\x55\x43\xff\xf8\xaf\xe6\x53\x4f\x83\x7b\x71\xee\x55\xe9\x79\x91\x70\xfa\xbb\x54\xee\x77\x00\x00\x00\xff\xff\x0b\x8b\xea\xff\xb1\x02\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsWaitgroupJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x8e\x9c\x30\x10\x86\x7b\x3f\xc5\x5f\x82\x14\x99\x27\xd8\x32\x8a\x92\x22\x4d\x22\xa5\x88\x52\x18\x18\x62\x73\xc6\x83\xec\xe1\xd8\xd5\x89\x77\x3f\xd9\xbb\x2c\x48\x57\x5e\x61\xad\xd6\x78\xbe\xff\x9b\xb1\x9b\x06\x7f\x8c\x93\x6f\x91\x97\x19\xab\x71\x92\x30\x70\xc4\xb4\x78\x71\xb3\x27\x8c\xdc\x26\x08\x63\x70\xc1\x25\xab\xf1\x5d\xb0\x3a\xef\x21\x36\xf2\x0a\x13\x40\x31\x72\x54\x4d\x03\x93\x90\x98\x43\xfe\x35\xb9\x0c\x91\x66\x8e\x92\x9e\x87\xb4\x1a\x96\xd0\x89\xe3\x70\x44\x56\x35\xde\x14\x20\xd6\x25\x5d\xa2\x2e\xf8\xfb\x4f\x29\x20\x03\xfb\x3e\xaf\x8c\x0b\xb4\x16\xa4\x30\xc4\x52\xf1\xfc\x9f\xcb\xf7\xd2\x7c\xf4\x82\x1d\x5f\x8d\xdc\xde\xb9\x27\xb2\x9e\x97\x64\xcb\x17\x05\x6c\x8f\x88\xb8\x84\xbc\x12\xe8\x95\xe2\xad\x44\xb8\x50\x22\x0a\xfe\x0b\x4c\xe8\xf3\xdf\x70\x1a\x8d\x58\x9a\xb2\x48\xc7\xd3\xec\x49\x48\xef\x12\x19\x76\x92\xf8\x68\x30\x70\xfc\x6a\x3a\x5b\x3d\xc7\x50\x8d\xfb\x21\x60\xd4\xad\xe9\x5e\x72\x6c\xe8\xab\xba\x6c\x6e\xf5\x01\xc8\xf9\xd5\x59\x3d\x6f\x3c\xac\x96\x20\xce\xdf\x6f\xca\x44\x3a\xc4\xf0\x93\x85\x20\xd6\x48\x61\xa0\x67\x4a\x08\x2c\xa5\xed\xdc\x64\xb1\xc2\x6f\x4b\xb7\x3b\x73\x5a\x92\xa0\x25\x24\x31\x51\xa8\x07\x5d\x85\x62\x30\xde\xdf\x34\xaa\x5f\x44\xc7\xbd\x95\x66\x39\xe2\x07\xb7\x27\xef\x5a\x9d\x6c\x3f\x35\x8b\x67\xbb\x8f\x29\x6c\x6a\x53\x8a\xae\xe5\x41\xe9\xe3\xc1\x5e\x0e\x23\xf5\x1e\x00\x00\xff\xff\x60\x6f\x0e\xe7\xca\x02\x00\x00")

func jsWaitgroupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsWaitgroupJs,
		"js/waitgroup.js",
	)
}

func jsWaitgroupJs() (*asset, error) {
	bytes, err := jsWaitgroupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/waitgroup.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/event.js": jsEventJs,
	"js/job.js": jsJobJs,
	"js/mock8s.js": jsMock8sJs,
	"js/run.js": jsRunJs,
	"js/run_mock.js": jsRun_mockJs,
	"js/runner.js": jsRunnerJs,
	"js/waitgroup.js": jsWaitgroupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"event.js": &bintree{jsEventJs, map[string]*bintree{}},
		"job.js": &bintree{jsJobJs, map[string]*bintree{}},
		"mock8s.js": &bintree{jsMock8sJs, map[string]*bintree{}},
		"run.js": &bintree{jsRunJs, map[string]*bintree{}},
		"run_mock.js": &bintree{jsRun_mockJs, map[string]*bintree{}},
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
		"waitgroup.js": &bintree{jsWaitgroupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

