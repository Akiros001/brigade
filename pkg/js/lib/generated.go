// Code generated by go-bindata.
// sources:
// js/runner.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x59\x7b\x6f\x1b\xb7\x96\xff\x5f\x9f\xe2\xec\xa0\x68\xa4\x44\x19\x25\xc8\xee\xa2\x50\x56\x58\xb8\xb6\x93\x38\xa9\x1d\x5f\x3b\x4d\xef\x45\x60\x18\xd4\xcc\x91\x86\x16\x87\x9c\x92\x1c\x29\x42\xe1\xef\x7e\x71\x0e\x39\x2f\x3f\xea\xe0\x16\x68\x6c\x93\x3c\xbf\xf3\x7e\x90\x33\x7b\x0e\x6b\x65\x96\x42\x41\x55\xbb\xe2\x02\x33\x63\x73\xb8\x06\xa7\x10\x2b\xd8\xd4\x4b\xb4\x1a\x3d\x3a\x70\x98\x9d\x89\x12\xc1\xe2\x5a\x3a\x8f\xf6\x78\x8b\xda\x3b\x40\xfa\xc1\x1b\xce\x15\x9f\x70\x0f\x99\xd1\x2b\xb9\xe6\x95\xe7\xb3\xd1\xec\x39\xe0\xf7\xca\x58\x8f\x39\x7c\x34\x4b\xf8\x43\x48\xff\xde\x9a\xba\x02\x5b\x6b\x3a\x30\x9a\xcd\xe0\x4b\x21\x1d\x48\x07\xbe\x40\x5a\xd6\x68\x61\x67\x45\x55\x49\xbd\x06\x97\x59\x59\xf9\x74\x94\x19\xed\x8c\xc2\x54\x99\xf5\x38\xf9\xcd\x88\x9c\x36\x0f\x0e\x4f\x8e\x20\x33\x16\x93\xc9\xe0\x40\xa7\x49\x6a\xb1\x32\x4e\x7a\x63\xf7\xa9\x16\x25\x4e\x22\x43\x84\x1c\x57\xa2\x56\x1e\x64\x29\xd6\x48\xdc\x9d\x37\xd9\x06\xea\x65\xad\x7d\x0d\xaf\xff\x37\x7d\xf5\xdf\xf0\x02\x4a\xb1\x41\x10\x3a\x87\xb5\xf4\xe9\x68\x2b\x2c\x88\x4c\xe6\x27\x4c\xb3\x80\x84\xfe\x78\x19\x48\xe6\x4a\x78\x74\x3e\x61\x06\x6c\x9c\x0f\x42\xe7\x0a\x2d\xe4\x48\x4a\x2c\x31\x28\xa8\xa4\xf3\x60\x56\xc1\x70\xb4\x24\x3c\x1c\x64\x32\x27\x11\xc4\x4e\x58\x04\xb3\x4a\x47\xab\x5a\x67\x5e\x1a\x3d\x40\x1a\x4f\xe0\xaf\x11\x40\xc0\xb7\xfb\x00\x01\x45\x64\xb3\x46\x1f\x38\x54\xc2\x8a\x12\x9e\xe5\xc2\x8b\x67\x53\xd8\x15\x32\x2b\x1a\xeb\x2e\x4d\xbe\x27\xe6\x6c\x69\xfc\xb3\x46\xe7\xd3\x11\x80\x2f\xa4\x4b\xd7\xd2\x17\xf5\x12\x16\xcc\x03\x38\x1a\xe6\xd0\xc8\x41\xac\x6f\xa7\x71\x43\xa9\x8b\x40\x7b\x67\x7f\x04\x70\x3b\xba\xed\x0c\xd0\xd3\x5c\xe8\x28\x2d\xeb\xbb\x13\x0e\xbc\x95\xeb\x35\x5a\xcc\x53\x3a\x7f\xd0\xec\x4b\x07\x95\x70\x0e\x73\xf0\xa6\xa3\x2a\x84\x56\x39\xda\x94\x3d\x37\x54\x3b\x13\x1a\x6a\x87\xac\x03\x21\x99\xe5\x0d\x66\x9e\xa9\xb3\x3f\x6b\x69\x91\x95\x25\x63\x04\xde\x2d\x5f\x5e\x67\xac\x3b\xd6\x1e\xb7\x31\x3d\x25\x23\xb5\x46\xa7\xf8\x69\x0c\x19\x64\xe0\x95\x31\xa6\xeb\x14\x9e\x91\xbd\x9e\x4d\x1a\x63\xf2\xce\xa2\xcb\x8e\x80\x10\x4d\x3e\x04\x61\xd1\x56\xd6\x94\x77\xbd\x32\x9b\xc1\x3b\x63\x41\xc0\x7b\xe9\x3f\xd4\x4b\x28\x8c\xd9\x4c\x41\xfa\x67\x8d\x9b\xf7\xca\x88\x1c\x2c\x66\x28\xb7\x98\x07\x8c\x70\xb6\x11\xa3\x61\xb8\x20\xdc\x00\x19\xf2\x93\x7e\x78\x21\x75\x80\x0a\x6b\xb5\x15\x6c\x84\x95\xb1\x4c\x7d\x47\x96\x26\x4b\x05\xe4\x92\xad\x25\xec\xbe\x0d\x9e\x88\xba\xa0\x28\x08\x11\x70\x6e\x8d\x37\x7e\x5f\x21\xe3\x7d\x34\xcb\x5e\x50\x7f\x34\xcb\xb1\x66\xfb\x7a\xe1\x36\x2e\x58\x98\x92\xab\xdc\xc3\x22\x78\x32\xf0\xe4\x32\xb2\x93\x4a\xc1\x12\x33\x53\x06\x5f\x56\x16\x57\xf2\x7b\x14\x13\xa1\x32\xf9\x2c\xb0\x2f\x45\xc5\x2e\x71\xe9\x1d\x37\xd0\x8f\xb7\x51\x0b\x62\xd8\x38\xa0\xc9\x45\x96\x82\x42\xc6\xd6\x9a\x63\x6c\x0f\x94\x88\xf8\x1d\xb3\x9a\x2a\x97\xd4\xe0\xc8\x16\x3a\x43\x90\xda\xc9\x9c\x92\x34\xe0\x09\x70\x05\x2a\x05\xe3\xd9\x52\xea\x99\x2b\x26\x2d\xef\x00\xba\x08\xe0\x6f\xa3\x42\x07\x90\x19\xa5\x30\x98\xc1\xac\x58\xb2\xd9\x56\xa8\x9a\xfc\x29\xad\xe3\xca\xa0\xb7\xd2\x1a\x5d\x52\x70\x6c\x85\x95\x62\xa9\x7a\x2a\xa1\xde\xb2\x99\x1b\x44\xca\x88\x50\xc3\xa8\x4c\x09\x0d\xa6\x62\xe7\x28\xf0\x62\xdd\x52\xc9\x58\xb1\xda\xea\xd5\x09\x44\x56\x33\x2b\x38\x3e\xfb\x7a\xfd\xf5\xe0\x22\x18\x90\xb1\x2e\x31\xb3\xe8\xa3\x45\x83\xfb\xd9\x15\x95\xa9\x6a\x2a\x76\x21\x86\x3b\x61\x03\x60\x23\x31\xec\xa4\x2f\xf8\x48\x50\x6f\x65\x6a\xcd\x96\xa4\x25\xc7\xd0\xfd\xc0\x62\x64\xb3\x45\x6b\xc9\xba\x02\x4a\xe1\xb3\x82\x6a\x3c\xe9\x4b\xa1\xd1\x66\x08\x2d\x94\xa2\x6a\x55\x0b\x58\x2e\xc4\x5e\x40\xac\x4c\x7e\x16\x93\xd5\xa1\x87\xe5\x9e\x1c\x3b\x9e\x4c\x59\xad\x41\xe4\x73\x80\xc4\x82\x58\x99\x1c\x32\x8b\xc2\x53\x4d\x8a\xe0\x11\x29\xe2\x52\xcf\x72\xa8\x73\x17\xf2\xe3\xc6\x2c\x29\x68\x3e\xb5\x4d\xb2\x25\xa3\x83\x8b\x41\x71\xe4\xd2\xc9\x7b\x4b\x91\x6d\xd6\x96\xac\xd1\xeb\x53\x93\x6e\x7f\x27\xa4\x1f\x4f\x46\xbc\x60\xd1\xd7\x56\x87\x8c\x00\x08\x3e\xbf\x03\xf2\x28\x9f\xc6\x08\x0b\x56\x9e\x96\xa6\xbd\x16\x3f\x79\xdb\x02\xce\x66\x40\x3c\x7f\xd7\x5e\xaa\x23\xa3\xd9\x6c\x05\xda\x90\xb8\xc4\x68\x27\x6c\xee\x20\x33\x65\x25\xbc\x5c\x4a\x25\xfd\x7e\x0a\xcb\xda\x43\x6e\xd0\x81\x36\x9e\x1c\x15\x9d\x79\x74\x7c\x7e\x71\x7c\x78\xf0\xe5\xf8\x68\x0e\x7f\x84\xc4\x05\x8b\xa5\xa1\x02\x95\xd7\x96\xbb\xb6\xaa\x0a\x31\xea\x69\xdb\x71\xbe\xa3\xcb\x43\x36\xe8\x49\xcc\xff\x38\xa8\x89\x1c\x04\xfb\xaf\xa0\x85\xe4\xb2\xce\x32\xc4\x1c\xf3\x84\x0f\x77\x14\xe3\x09\xf7\x8b\x25\x42\x26\x94\xc2\x1c\x8c\x86\xce\x94\xf4\x37\x77\x0f\x97\xde\xa7\xa3\xca\x57\x7b\x53\x0a\x2f\x89\x76\xdf\x20\x2c\xf7\xad\xcb\xfb\x54\x27\x2b\x96\x27\x08\xef\x20\x79\x27\xa4\xc2\x3c\x99\x86\xc8\xf1\x85\x35\xbb\xd0\x15\xbf\x67\xc8\x09\x9b\x0e\xe9\x6a\xed\xd8\xfe\xa5\xe1\x0e\x26\x34\xbc\xfe\x1f\x28\xa5\xae\x69\x16\x1b\xbf\x79\xf5\x0a\x9e\xc3\x9b\x97\x0e\x33\xc3\x59\xe5\xd1\x6e\x85\x72\x93\x69\x0b\x0d\x5e\x96\x68\x6a\x3f\xe4\xd0\xda\xfc\xa1\xb0\x21\x7e\x63\xca\x35\x09\x0b\x78\xf5\x16\x24\xfc\x1f\xbc\x79\x45\xbf\xbc\x78\xd1\x9c\x01\x18\x4c\x62\x59\x81\xd9\x86\xe7\x34\x2f\x7c\xcd\xe5\x2b\xa1\xb1\x69\xdf\x84\xdf\x24\x52\x11\xec\x06\x16\xbd\x89\x32\xa5\x02\x71\x76\x39\x4e\xe2\x24\x96\xf4\x8f\x96\x7b\xb2\xc2\x02\x36\x29\x8d\x77\x5f\x5f\x13\x5c\xba\x46\x3f\xee\x23\x3f\x20\xd0\xc7\xcb\xcf\x67\xa9\xf3\x14\x67\x72\xb5\x1f\x33\xcc\x64\xf2\x90\xe4\xe7\x26\xbf\x23\x2a\xbc\x80\x84\xdc\x4c\xd5\xde\x53\x7d\x0b\xdb\xc4\x39\x68\x97\x56\x85\x70\x1d\x5f\xb9\x82\xf1\xfd\x6d\x58\x2c\x5a\x6f\x77\x46\x83\xe0\x17\x78\x8c\xed\x8a\x09\x62\x0b\xa2\x1f\x94\x6d\x0a\xc9\x3d\xc9\xdb\x88\x71\xfb\x34\xdf\x2e\xf0\xfb\xac\x9b\x0c\xb2\x35\xde\x81\x9a\xcd\xe0\x92\x07\xfd\x15\x0f\x1a\x39\xae\xa4\xc6\x1c\x44\x69\x6a\x1d\x3a\xa3\x2c\x31\x8d\x87\xf9\x4a\x30\x7e\x13\xac\x79\x3b\xea\x29\x45\xa7\x72\xa0\x60\xa3\xd0\xa2\x70\x20\xbc\xea\x61\x55\x83\x8e\x49\x28\x3f\x61\x56\xe8\x6e\x05\x21\xa3\x39\xf0\x6b\xe5\x65\xa5\x90\xaa\x2c\xf7\xe6\x95\xd4\xd2\x15\x29\x9c\xf8\xd0\x2c\x02\x6f\x4a\x21\x6b\x8d\x25\x18\xe1\xc0\x19\xa3\xe9\xa7\xe0\xe2\x4c\xc3\xbf\xf5\xae\x3d\xd4\x1b\x41\x5a\x96\x31\xfa\x39\x31\x98\xd5\x02\xbe\x5d\xc5\x22\x23\xf2\x9c\xfe\x27\x38\x8d\xbb\xa6\xde\x53\xaf\x20\x39\xa9\x68\x54\x0d\x29\x1d\xed\xa5\xd4\x8d\x59\x0e\x8a\x31\x21\xa7\x54\x7d\x79\xa7\x57\xc7\xc8\xdd\x9c\xec\xc8\x23\x3d\xb1\x88\x3d\x92\xe1\x43\xcb\xf2\x05\xea\x9e\x69\x7c\x81\x65\x2f\x46\xf0\x87\xda\x0e\x4b\xb0\x32\xf6\x58\x64\xc5\xb8\x35\xc3\xf8\xa6\x0b\x94\x9b\x7e\x6b\x8a\x5e\xbe\xdf\x97\xfe\xa6\x04\xb3\xf9\x68\x70\x6a\x05\x83\x33\xc3\x73\x02\xcd\xdd\x54\xf7\x9a\x86\x11\xa2\xbc\x08\xce\x0d\x13\x57\xc0\x2c\x6b\xe7\xa9\x3c\x3b\x2f\xf8\xce\x88\xdf\x3d\x5a\x4d\xf5\x36\x85\xf1\x25\x62\xe7\x37\x56\x36\x4e\x96\x9d\xdc\x93\xa7\x6a\xdc\x0f\xdb\xa2\x55\x37\x5a\xa1\x99\x6b\x5b\x87\x85\x10\x0b\x89\xd3\xbb\x70\x52\x7c\xb6\x6a\xb2\x14\xcd\xa0\x1a\xc3\xa7\xf3\xda\x60\xa8\x56\x66\xf7\x52\xe1\x16\x15\x54\x56\x96\xd2\xcb\x2d\xf6\xc2\x95\x5a\xf8\x8d\x59\x0e\x3a\x78\x73\x2f\xf9\xe9\xe3\xe7\x5f\x5f\xfe\xf4\xe5\xe4\xf4\xf8\xe5\x4f\xef\x4f\xbe\x5c\x7e\x38\x88\xd3\xf4\xe6\x17\x17\x27\x80\x1b\xb3\x0c\xb3\xf0\x0b\x48\x5e\x52\x4e\x1e\x09\x8f\xa9\x36\xbb\xf1\xa4\x5d\xea\xe9\x50\xa0\xc8\xaf\x33\x53\x96\xd2\xa7\x32\x4f\x5d\xbd\x0c\x25\x75\xfc\x6a\x0a\xbf\xf0\xe4\x40\xf0\x59\x19\xd1\x23\x9f\xb8\x1c\x6e\xf0\x0f\x6e\x65\x25\x0d\xe3\xb8\x3b\x3c\x1d\x07\xe2\xc9\x80\x26\x6c\x5e\xf0\xef\xe7\x26\x1f\x77\x48\x5c\x73\xc3\x9f\x69\x89\x5e\xd0\x9d\x29\x55\x62\x89\x8a\x9d\xa9\x87\x5a\x3e\x7e\x76\x89\xca\xe8\xb5\xf3\x06\x16\xf0\xf0\x23\x81\xd9\x11\xdd\xc0\x56\x8f\xbf\x26\x3c\xce\x28\x18\x6f\xc8\x65\x68\xd5\x66\xfe\xce\xf3\x66\xc4\xe5\xa9\x83\xac\x81\x7a\xfb\x55\xd8\x41\x25\xba\x4e\x91\x62\x95\x34\x44\xbd\x9d\x76\x71\xbd\x15\x6a\x0a\x1b\xdc\x4f\x41\x85\x80\x78\xf2\x64\x13\xe4\x91\x4b\xa8\x4a\x7f\x91\x3a\xf3\x00\xc4\xf3\xfa\x9c\x7e\xdc\x86\x29\x71\xf2\xb6\x93\xb5\x99\xb6\x85\x1b\x88\xdd\xe3\x1a\x4f\x3c\xc2\x79\xd4\xb4\x1d\xba\xcd\x35\x60\x3b\xba\x6b\x55\x4a\x66\xd2\xab\x3d\x2c\x95\xc9\x36\xa1\xe9\x50\xab\xbb\x4e\x9b\x89\x7d\xfc\x2d\x09\x14\xc9\x15\x4b\x39\xe9\xf2\x35\xb4\xb8\xd8\x99\x1a\x1e\xef\xd1\xb7\x2c\xda\xeb\xc3\x5a\x6e\x51\x37\xaf\x59\x0f\x18\x22\x02\x76\xf6\x68\xa7\x12\x55\xe3\x3b\x6b\xca\x79\xaf\xb3\x06\xf4\x4f\xb8\xbf\xc0\xd5\x1c\xa2\x11\x23\x36\xab\x1c\xcc\x38\xe8\xba\x9d\x51\x47\x41\xc1\xf0\x70\xf6\xb0\x5b\x06\xd2\x24\x07\x87\x27\x47\xd7\x17\xc7\xe7\x9f\xaf\x3f\x1d\xff\x2b\x19\x48\x36\x8f\xef\x6f\xfd\x82\xd5\x79\xcd\x9b\x2a\x16\x97\xd6\x69\x54\x74\x1d\x86\x82\xdb\xdd\xbb\xf4\x1e\x84\xf7\x58\x56\xfc\x82\x42\x97\xa7\xf6\x06\xe7\x02\x1c\x2d\x9b\x12\x7d\xb8\x9c\x29\xc7\xdd\x67\x28\x74\x23\xee\xe1\x6f\x9f\xcf\x8e\xaf\x7f\xbf\xf8\x2d\x69\x83\xea\xe1\x5c\xca\x94\xd1\x78\x5d\x5b\x15\x24\x7f\x18\xed\xf2\xf2\xc3\x8f\x60\x39\x57\x3c\x85\xf4\xfe\xe4\xcb\x8f\x20\xad\xa5\x7f\x0a\xe9\xc3\xf1\xc1\xd1\xf5\xe1\xe7\xd3\xd3\x93\x2f\xd7\x27\x47\x0f\x02\x0e\xb3\x3e\x80\xc5\xa2\xe1\x2a\xcc\x9a\xe0\x46\xeb\xbe\xbd\xba\x8a\xb7\xfb\xc8\xac\xe7\xc0\xf8\xbe\x42\x77\xf5\xad\x51\x75\xbf\xf4\x30\x4a\x58\xe4\x92\xc1\x11\xd0\x48\x18\xca\xec\x34\xd2\x9f\x8a\xaa\x8d\xd2\x58\xbd\x6f\x6f\x9b\x6c\x99\xb6\x44\x89\xcc\xad\x13\xc9\x34\x86\xf7\x1c\xfe\x8a\xbf\x9d\xf5\xe3\x3b\x90\x5e\xbd\xfd\x5b\x7d\x82\x5c\xa7\x34\x4e\x3e\x2e\x1c\x4f\x9b\xe7\xc2\x17\x73\x48\x66\x85\x31\x9b\x19\x95\xd2\x24\xbe\x37\x3e\x2c\xda\x7d\x1a\xe7\x8a\x64\x0a\x16\x45\xfe\x59\xab\xfd\x9c\xc7\xdd\x28\x61\xb0\xe3\xe7\x26\xca\x7d\xfb\x64\x62\xb4\xda\x53\x0e\xd2\x4a\xed\xd0\x52\xc4\x3b\x30\x9a\x83\x9a\x72\x93\x0a\x1a\x1f\x6d\xd2\xf3\x71\x55\x9b\x27\x96\x96\xa4\x97\x83\x1f\x4d\x1c\xea\xda\x97\xa6\xf0\xb0\xcc\x63\x25\x05\x87\xd0\xf9\x3c\x56\x7f\xea\x8f\x65\x1e\x81\xf8\x7c\x7a\x63\xa4\x1e\x27\xf0\xf3\xcf\x90\x70\x27\xcc\xca\x94\x2c\xf4\x2d\x29\x85\xd4\xa9\x2b\x92\xab\xd8\x57\x4b\x6e\x2b\x3f\x74\xd7\x1a\xdd\xb9\x0f\x1d\x5a\x14\x3c\xba\x77\x6f\x69\xd4\xfc\xb2\xb2\xeb\x6d\x3a\x76\xec\xbf\xb9\x70\x65\x25\xdf\xb6\x36\x29\x0d\x6e\xda\x49\xa3\x9b\xb7\xc1\x52\x54\x69\x78\x5d\xa1\x43\x8f\x72\x6f\x2e\x0d\x8f\xdb\xf9\x07\xa4\x08\xc4\x51\x92\xde\x05\x32\xf2\x8f\xdb\x77\x65\xa0\x65\xa9\xd7\x69\x9a\x06\xf3\xc4\x6b\x53\x37\x85\xf0\x75\xa5\x1d\xc9\x06\xa3\x4a\x65\x72\x96\x8b\xa3\x24\x12\x86\x80\x49\x36\x52\xe7\xc9\x9c\x6f\x7e\xb1\x64\x27\xa2\x92\x5f\xd1\x92\x75\x68\x63\xfb\xba\x59\x6f\x2c\x9d\x74\x3d\x26\x21\xd8\x64\x0e\x91\xc1\xb4\xbf\xec\x2a\x91\xd1\x5e\xeb\xd5\x76\x37\x4c\x21\x49\xbf\x55\x25\x05\x5a\xe9\xc5\x9a\x09\xfe\x51\x9b\xcd\x46\xb4\xe7\x89\xb5\xd0\x62\x8d\xf9\xaf\x7b\xda\x16\x99\xe4\xa7\x93\x5e\xd3\x8a\x12\x92\x3f\xfa\xd2\x59\xe4\x49\xfd\xdc\x28\x99\x31\xe9\x19\xdd\x63\x3a\x41\x3a\xd7\x25\xf3\x98\xfd\x5c\x01\xda\xdf\x3a\x0d\x99\x2b\xdd\x0c\xa7\xfd\x4d\xce\xa4\x64\xde\x3d\x5c\x0e\x76\x63\xea\x0c\xb0\x79\x83\x4b\x02\x65\x46\x6f\xf9\xaa\x4f\x3a\x9b\xc1\xbb\x93\x7f\x9e\x1e\xcf\xe1\xb0\x10\x7a\x8d\x94\x93\xc9\xc9\xea\xcc\xf8\x73\x8b\x0e\xb5\x4f\xee\x49\x71\x5e\x2b\xd5\x29\x7a\xa0\x76\x62\xef\xba\x53\x4d\x93\xbf\x6a\xaf\xc7\xe1\x7a\x3b\x08\x98\xc3\xd3\xf1\x53\x61\x72\xd8\x54\xea\xff\x20\x58\x3a\x63\xf6\x63\xe5\xa9\x68\x79\x38\x5e\x9e\x8e\x99\x18\x13\x4d\x68\xdc\x97\xa5\xa9\x4e\x73\x48\x30\x2b\x0c\x14\xa8\x94\xa1\x2a\xc6\x7f\xad\x8d\xc9\x97\x7b\x4c\x3a\x90\xf6\x3d\x60\xf1\xf8\x7f\xb4\x7d\x2a\xa4\x06\x65\x44\x8e\xf6\xa9\xd3\xf7\xbf\x1b\x62\xce\x9f\x0d\x29\xc5\xa9\xc0\xff\xd7\xf0\x7b\x66\xf3\x18\xc0\xcf\x1a\x67\x66\xf8\xad\xc9\x35\x0f\x24\x09\x3b\x96\x47\xf5\x50\x78\xef\x7f\x38\xea\x3f\xed\x8e\xb0\xf7\x7d\x24\x34\x84\xd3\xf3\x5f\xe7\x70\x02\xb9\xd1\xcf\xf8\x6a\xac\x37\xd4\x1e\x2c\xbf\xbd\xd2\x10\x66\x51\x38\xc3\x0f\x41\x95\x70\xf1\xb9\x59\xea\x69\xfc\x70\x61\xf1\xff\x03\x4c\x12\x86\xbe\xa4\x99\xfe\xc8\x8a\x49\xf7\x05\x36\x99\xf7\x3e\xc7\x92\xcc\x2c\x72\xff\xdb\x64\x4f\xfa\xf6\x23\xe3\xd0\x68\x77\x4a\x6b\x9f\x7a\x32\x19\x0d\xad\x37\xdc\xbd\x63\xfc\xf8\xc1\x93\xfd\x96\xa7\xf0\x4e\xf2\x63\x30\xd5\xfa\xd6\x6c\xe1\xeb\xec\x4a\xc3\x02\x94\x31\x9b\xba\xba\x67\xd6\x21\x03\x3e\x3c\x78\x45\x77\x3b\xe9\xb3\x02\x3a\x92\xe0\xd0\x4c\x38\x84\x84\x0e\x26\xf3\x30\x65\xf7\x70\xc2\x4c\x17\x5f\x2a\x97\x16\xc5\x66\x04\xcd\xe7\xe1\x79\xff\x99\xeb\x77\xbd\xd1\x66\xd7\x7c\x93\x1c\x48\x4e\xc6\xfd\x77\x00\x00\x00\xff\xff\xb4\x9c\x3b\x08\x4a\x1f\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/runner.js": jsRunnerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

