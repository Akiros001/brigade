// Code generated by go-bindata.
// sources:
// js/event.js
// js/job.js
// js/mock8s.js
// js/run.js
// js/run_mock.js
// js/runner.js
// js/waitgroup.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsEventJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4a\xc6\x30\x10\x85\xf7\x39\xc5\xdb\x55\x41\xd2\x13\x74\xe1\x42\x70\xed\x0d\xa6\xc9\xd4\x04\x62\x52\x33\x53\x6b\x91\xde\x5d\x42\x94\x9f\xf2\xef\x86\x79\x8f\xef\x9b\x19\x47\xbc\x7c\x71\xd6\x57\xca\x3e\x71\x85\x67\x71\x35\xce\x2c\xd0\xc0\x48\x51\x14\x65\x01\xb7\x4a\x5b\x91\xe2\xd9\x45\x8f\x28\xa0\x9d\x2a\xa3\x2c\xd6\x2c\x5b\x76\x1a\x4b\xbe\x90\x1e\x1e\xf1\x63\x80\xce\xaf\x47\x47\x20\xfc\x69\xde\x59\xbb\x61\xa5\x4a\x1f\x18\x3c\x29\x0d\x4f\xd8\x43\x74\xa1\xc1\x5b\x34\x17\x7f\x34\x79\x9b\x2b\x7f\x6e\x2c\x6a\x0d\xa0\x21\x8a\x5d\x37\x09\x98\xf0\x6f\x6e\xb2\xf3\x96\xa5\xf4\xd6\xfb\x77\x95\xd3\x18\xfe\x5e\x4b\x55\xb1\x97\xb7\xa7\xcb\xed\xe6\x37\x00\x00\xff\xff\x38\xd9\xc5\x1d\x16\x01\x00\x00")

func jsEventJsBytes() ([]byte, error) {
	return bindataRead(
		_jsEventJs,
		"js/event.js",
	)
}

func jsEventJs() (*asset, error) {
	bytes, err := jsEventJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/event.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsJobJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\x41\x6f\x1b\x37\x13\xbd\xef\xaf\x78\x9f\x4e\xd2\x57\x65\xd7\x41\xda\x1e\x62\xe8\x60\xd4\x0e\x90\x14\x08\x82\xc4\x4d\x0f\x45\x11\x70\xb9\xb3\x5a\xc6\x5c\x72\x4b\x0e\x65\x0b\x81\xff\x7b\x31\xa4\xb4\x96\x95\xf4\x62\x83\x23\xce\x9b\x37\x6f\xde\x70\x9b\x06\xb7\x03\xa1\xa3\x5e\x25\xcb\x30\xa3\xda\x12\x4c\x44\x64\xaf\xef\x90\xda\xe4\x38\xe1\xe5\xaf\xf5\xc5\xcf\xf8\x09\xa3\xba\x23\x28\xd7\x61\x6b\xb8\xae\x76\x2a\x40\x69\xd3\xbd\xcd\x39\x1b\x2c\xe4\xf0\xa2\xa4\xbc\xb6\x8a\x29\xf2\xa2\xaa\x9a\x06\x1f\x82\x67\xcf\xfb\x89\xd0\xfb\x80\x77\xbe\xad\xab\x3e\x39\xcd\xc6\x3b\x39\x2d\x9d\x1a\x69\x0d\x56\xf1\x2e\xae\xf0\xad\x02\x04\x79\xdc\x63\x03\x1e\x4c\xac\x2a\xc0\xf4\x58\xfe\x8f\x1e\x26\x1f\x38\xd6\x5f\x68\x47\x8e\xcb\x4d\x80\x87\xe0\xef\xb1\xc8\x31\x38\xcf\xe8\x7d\x72\xdd\xa2\x02\x1e\x25\xb3\x69\xf0\x5e\x8d\x84\x7b\x63\x2d\x5a\xd2\x7e\x24\xf0\x40\x98\x02\xf5\xe6\x21\x13\xca\x47\xdf\x35\xda\xbb\xde\x6c\x47\x35\x41\x08\xc5\xba\x42\xae\x5f\xcb\x09\x9b\x1c\xbc\x2c\x88\xb7\x42\x55\x54\x92\x54\x6b\x22\xc3\xf7\x85\x3f\xd8\x23\x24\x57\x8b\xa8\x7b\xa8\x40\xa0\x07\xd2\x89\xa9\x83\x71\x88\xf4\x4f\x22\xa7\x09\xc6\x45\xd3\x11\x7c\x5f\xf0\x14\xe2\x40\xd6\x62\xd9\xb4\xc6\x35\x71\x58\xcd\xb5\x0b\xe8\x06\x7f\xfd\x7d\x79\x90\xe1\x44\xa6\xb3\x3b\xf9\xff\x49\xdf\x57\xd0\xde\x5a\x2a\x3a\xfb\x3e\x37\xd0\xec\x94\x4d\x84\x49\x99\x10\x25\x46\x6e\x67\x82\x77\xa3\x88\xb7\x53\xc1\xa8\xd6\x9e\x74\x4e\x6e\x87\x0d\xbe\x3d\x5e\x1e\x10\xc5\x29\xc5\x21\x62\x02\xe5\xe0\x27\x01\x57\x16\xac\xb6\x73\x96\x39\xf8\x61\xf6\xc6\xe5\x4c\x48\xc4\xf5\x3d\x6e\xde\x7f\xfe\xf2\xf9\xea\x63\xd1\x39\x63\x7d\x22\x1d\x88\x0f\xc2\xe3\x76\x30\xb1\x4c\x6c\xf2\x53\x12\x2b\x65\xa5\x4f\xc8\x16\xc0\x23\x63\xdc\x1b\x1e\xf2\x95\xd2\x5e\xb6\x80\x08\x2e\xa1\x98\xa1\xeb\x63\x07\x47\x64\xbf\xa3\x10\x64\x08\x0a\xa3\x62\x3d\x18\xb7\x95\x02\xd9\x7b\x7d\xf0\xe3\xb1\xa2\x70\x9e\x5b\x2b\x58\x31\x8b\x72\x68\x6a\xf2\x5d\x36\x98\xec\x0c\x31\xda\xbd\xcc\x7f\xb9\x5a\xe7\xb6\xb4\x77\xac\x8c\x2b\x46\xc9\x3e\x12\xa3\x14\xbf\x41\x07\x52\x4c\xdd\x0c\x7e\x40\x3a\xe0\x86\x24\x7e\x71\x5d\xcc\x3f\xe2\xab\x6f\xc5\x5b\xbf\xa7\x96\x82\x23\x3e\x19\x92\x5c\xdc\xe0\xb8\x50\xcb\x67\xd6\x68\x95\xbe\xdb\x06\x51\x63\x79\xb6\x3d\x4f\x77\xee\x95\xe1\xe5\xaa\xca\x81\x40\x9c\x82\x2b\x6b\x07\x94\xb9\x9f\x01\xfd\x67\xad\xa3\x10\x9b\x2c\x80\x84\xd6\x38\x2b\x7a\x39\x83\x36\x0d\xa4\xee\x1f\x8e\x8d\xbd\xf6\x2e\xcb\x37\x50\x28\x2f\x84\x14\xbb\x57\xa1\x8b\xd0\x7e\x9c\x14\x9b\xd6\x58\xc3\xfb\x35\xda\xc4\xe8\x3c\x45\xd9\x73\x19\xd8\x61\xa8\xd7\x37\x1f\x3e\xde\xfc\x76\x75\x7b\x73\xfd\x1a\x7f\x96\x3d\x47\xa0\xd1\xef\xa8\x43\x97\x82\x4c\xf6\xca\x4e\x83\xaa\x4e\x3a\x7e\xaa\x7c\xd6\xcf\x8f\x74\x38\x61\x9c\xff\x44\x24\x49\x87\xca\x73\x1c\x24\xb0\xf8\x94\xb4\x26\xea\x28\x3f\x3d\x4d\xf3\x94\xb1\x5c\x41\x2b\x27\x9c\xb4\xb2\x96\x3a\x78\x87\x27\x39\xe5\xdc\x7e\x25\xcd\xb1\xfe\x3e\xcf\x44\xa8\xc4\x7e\x54\x6c\x24\x77\x7f\x44\x68\xf7\xf3\xe8\x4f\xb3\xde\xf6\x99\x4f\x21\x1f\xb1\x78\xa3\x8c\xa5\x6e\xb1\x2e\x0e\xca\x0f\xa5\x6c\x1b\xe8\x41\x53\x5e\xdc\xfa\x79\x5e\x72\x31\xeb\x3f\xfa\x20\x0b\xa7\x1c\x5e\xfe\x82\xd1\xb8\xc4\x14\xb1\x7c\x75\x71\x81\xff\xe3\xd5\x8b\x48\xda\xe7\xed\x62\x0a\x3b\x65\xe3\x6a\x3d\x43\x83\xcd\x48\x3e\xf1\xf3\x0a\xb3\xe6\x3f\xb2\x8e\xc4\xdf\xf8\x20\x9f\x81\x71\xff\x9d\x61\x8a\x5f\x1e\xab\xea\x18\x7f\xe7\x5b\x6c\xe4\xa3\x51\xfd\x1b\x00\x00\xff\xff\x5d\x97\x1d\x50\xb9\x06\x00\x00")

func jsJobJsBytes() ([]byte, error) {
	return bindataRead(
		_jsJobJs,
		"js/job.js",
	)
}

func jsJobJs() (*asset, error) {
	bytes, err := jsJobJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/job.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsMock8sJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8a\xdb\x30\x14\x85\xf7\x7e\x8a\x43\xe8\x62\x02\xc1\x43\xb7\x81\xac\x0a\xdd\xb5\x94\x0e\x74\x53\x4a\xb9\x91\x8e\x13\x75\x6c\xc9\xe8\x67\x3a\x50\xfc\xee\x45\xae\xa5\xd8\xd9\xb4\x8b\x6e\x94\x9b\xfb\xf3\x59\xe7\xea\x3c\x3e\xe2\x29\x3a\x4f\x0c\x4e\x3d\x63\x74\x1a\x9a\x9d\xb1\x26\x1a\x67\x03\xae\xf4\x84\x04\xec\xac\x0c\xdc\xe1\x88\x37\x9e\xc1\x25\xaf\xd8\xbc\x88\x9f\x67\x3e\x39\x1d\x70\xc2\xaf\x66\x6a\x9a\x0a\x53\xce\x76\xe6\x32\xc8\xf8\x4f\x88\x77\x73\xf7\x87\xdc\xbd\x80\x72\xe5\x39\x9d\xe9\x2d\x23\xff\x64\x81\x9f\x26\x5e\x3f\x3e\x1d\xd1\x25\xab\xf2\xf5\x1e\x6c\xd8\xcf\x05\xc0\x33\x26\x6f\x17\x98\x67\x03\x4c\x05\x53\x72\x0b\x44\x39\xcf\x2f\x6f\x8f\xcb\xdc\xe8\x74\x09\x81\x0b\xe3\x1a\x2e\x03\xf7\xb5\x56\x3f\xf1\xbd\xed\x8c\xd5\x0f\x45\xf9\xe1\x36\xc0\x7e\xd3\x5f\x27\xd8\xb3\x1d\x18\x45\x4b\x94\x36\x53\x71\x3a\x21\xff\xd6\xd6\x69\xbf\x84\xd3\x61\x09\x94\xa7\x44\xae\x6e\xa3\xd9\xad\xe1\x79\xd1\x49\x29\x52\x53\x1f\xf0\x39\x59\x6b\xec\xe5\x00\xb1\x1a\xef\xc5\xf4\xd4\x10\x4f\x04\x37\x10\x2f\xd2\x1b\x9d\xcf\xc4\xd0\x56\x80\x66\xd7\x86\x28\x31\xcd\xcb\xc5\x78\x95\xc0\x23\x76\x15\xba\xc3\x54\x7b\x8b\xd6\xaf\x79\xa8\x2a\xe9\xe5\xcc\x3e\xb4\x3f\xdc\x39\x6b\xf9\x86\x53\x66\x36\xf7\xeb\xca\xb9\x45\x5b\x53\xce\x59\x25\x5f\x23\x6d\xc8\x26\x2b\x0f\x50\x3d\x73\x7b\x91\xbf\xad\x61\x6b\x9e\xff\x76\xbf\x6c\x1d\xbe\x8e\xce\xc7\xd0\xae\x2c\x5e\xc2\x4d\x6d\xe3\xdd\x6d\xa2\xf6\x6d\x9c\x7c\xfb\x73\xc7\x99\x2d\x5a\x1d\xfc\x3b\x00\x00\xff\xff\xc6\x15\x83\xe4\x98\x03\x00\x00")

func jsMock8sJsBytes() ([]byte, error) {
	return bindataRead(
		_jsMock8sJs,
		"js/mock8s.js",
	)
}

func jsMock8sJs() (*asset, error) {
	bytes, err := jsMock8sJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/mock8s.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x79\x6f\xdb\x38\x16\xff\xdf\x9f\xe2\x0d\x31\xe8\xc8\xa8\x22\xb7\x18\x60\x31\x70\xd7\x58\x64\x9c\xb4\x75\xdb\x1c\x9b\x64\xba\xbb\x08\x82\x80\x96\x9e\x2d\xd6\x14\x29\x90\x94\x53\x6f\x27\xdf\x7d\xf1\x48\xea\x70\x8e\x16\xbb\xd8\x7f\x12\x59\x7c\xe7\xef\x9d\xd4\x64\x02\x57\x25\x82\x50\x0e\x8d\xe2\xd2\xc2\x4a\x1b\x30\x8d\x52\x42\xad\xc1\x71\xbb\xb1\x19\x5c\x95\xc2\x42\xd5\x58\x07\x4b\x04\xa9\x79\x81\x05\x2c\x71\xa5\x0d\x02\x57\x3b\xd0\x2b\x70\x25\x8e\x26\x13\xd0\xcb\x2f\x98\x3b\x0b\xae\xe4\x0e\x1a\x8b\x24\x28\x19\x67\xa3\xc9\x84\x4e\x0f\xa5\x84\x8f\xcd\x12\x8d\x42\x87\x16\x0e\xcf\x17\x90\x73\x29\x2d\xd8\x52\x37\xb2\x08\xc2\x73\x2e\xc5\xbf\xb1\x80\x12\x0d\x66\x70\xe6\x4a\x34\x50\xe9\xa2\x91\xd8\xd1\x29\xed\x48\x1c\xf1\xc2\x2f\x9b\x4e\xe0\x2f\x50\x08\x83\xb9\x93\xbb\x6c\x44\xe7\x77\x5c\x38\x70\x7c\x83\x16\x38\x7c\xd1\xcb\x03\x29\x36\x18\x4d\x04\xae\x0a\x4f\x60\xa1\x51\x4e\x48\x10\x0e\x6c\x93\xe7\x88\x85\x05\x6d\x60\xc5\x85\xb4\xd9\x68\xd5\xa8\xdc\x09\xad\x3c\xe9\x5b\x6d\x3e\xe8\x65\xf2\x45\x2f\x53\xc0\x31\x7c\x1b\x01\x6c\xb9\x81\x6a\x07\x33\x12\x3f\x1a\x81\xc7\x2e\xa1\x97\x02\x66\xf0\xea\x0d\x08\xf8\x2b\xfc\xfa\x8a\x1e\x5e\xbe\x0c\x1c\x00\xb9\x56\x56\x4b\xcc\xa4\x5e\x27\x2c\x2f\x31\xdf\x10\xd2\xd6\x71\xd7\x58\x82\x92\xc1\x4b\xa8\x76\x59\xad\x8b\x53\x5e\xe1\xd8\xf3\x90\xc8\x0d\xcc\xa0\x77\x36\xbb\x13\xae\x3c\xbd\x4c\x30\x1b\xbc\x53\xbc\x42\x5b\xf3\x7c\xc0\x55\xed\x6a\x5d\x10\x67\x96\x6b\x83\x9f\x5f\x93\xdc\x6c\x8d\x2e\x19\xaa\x78\x64\xd7\x87\xcb\xb3\xd3\xcc\x3a\x23\xd4\x5a\xac\x76\x89\x17\x32\x1e\x3f\x36\xff\x5c\x17\x0f\xec\x85\x97\xc0\x40\x58\x10\xca\xbb\x84\xf1\x98\xb4\x06\x17\xb3\xba\xe4\xb6\xd5\x29\x56\x90\x3c\x3e\x84\xd9\x0c\xd8\x5b\x2e\x24\x16\xac\x45\x0d\xc0\x95\x46\xdf\xc1\x73\x2a\x57\x9e\x1c\x9c\xa6\x94\xa3\x7f\xb9\xae\x6a\x89\x14\x3c\xf6\xc6\x4b\xb8\xff\x91\xc6\xcb\x10\xff\x3d\xa5\x06\x5d\x63\x14\x38\xd3\xe0\x40\xc8\x64\x02\x97\x12\xb1\xf6\xf1\xe6\x50\xe0\x4a\x28\x2c\x80\x57\xba\x51\xce\x97\x83\xa8\x30\xf3\xa4\x96\xe8\x92\x5f\x09\x3b\xe2\x8d\x4e\xd0\x79\x01\xba\x71\x3e\xb1\x28\xfe\x24\xa9\x7e\xda\xb5\xe0\x13\x1b\xdd\xfb\xac\x26\xf7\x4c\xa3\x62\x4e\x07\x0b\x14\xe0\x16\x95\x83\x04\xc7\x19\x2c\x1c\x14\x1a\x2d\x55\x49\x28\x01\x22\x71\x25\x7a\xf2\x1e\x18\xa4\xaa\x0c\x95\x2d\x48\x98\xd4\x77\x07\x12\xb7\x28\xa1\x36\xa2\x12\x4e\x6c\x71\x90\xff\x54\xc7\xc3\xc4\x9f\x4c\xe0\xe7\x0f\x67\xbf\x1f\xfc\x7c\xb5\x38\x39\x3e\xf8\xf9\xdd\xe2\xea\xf2\xfd\x61\x2c\x88\xcd\x6f\xd6\xdb\xee\xab\xc2\xe7\x24\xb9\x71\x40\x9e\x1d\x71\x87\x99\xd2\x77\xc9\xb8\x7b\x85\x59\xae\xab\x4a\xb8\xcc\x36\xcb\x90\x71\xc9\xab\x14\x7e\x1b\xbf\x89\xd2\xf2\x2a\x0a\x8b\x62\xe3\x6b\xea\x50\x68\x9e\x3c\xca\x2b\x98\x81\xc2\xbb\xf9\x49\x12\x98\xc7\x7b\x3c\xe1\xf0\xc2\x3f\x9f\xeb\x22\xe9\x25\xa5\xde\x60\x51\xf1\x75\xc8\xcf\x70\x92\x55\xe8\x78\xc1\x1d\xcf\x24\x5f\xa2\xb4\xd9\x17\xbd\x54\xfb\xfe\x3d\x4f\xbb\x44\xa9\xd5\xda\x3a\x0d\x33\xc0\xcc\x60\xad\x3d\x03\x3d\x49\x9e\x63\xc2\x26\x2c\x25\x20\xc6\xcf\x8b\x08\xf0\x78\xfe\xf0\x38\x0a\xf8\x1f\x16\x05\xa0\xda\x92\x67\x36\x8b\x1e\xa2\xda\x7e\xe6\xc6\xc2\x0c\xae\x6f\x88\xec\x36\x43\x9e\x97\x14\xb9\x0c\xd5\x36\x85\x36\x9e\xc9\x96\xcb\x14\x36\xb8\x6b\x33\x3d\x32\x66\x75\x63\xcb\xe4\x1b\x99\x38\xa5\xe3\x14\xb6\x5c\x36\x38\xa5\x7f\xf7\x3e\x24\xf4\xb7\xd7\x6f\x31\x37\xe8\x2c\x70\xbb\x67\xca\x40\x6d\xa4\x78\x46\x75\x57\x4d\xba\xc2\x4e\xd8\x1d\x02\x7e\xad\xa5\xc8\x85\x93\x3b\x58\x4a\x9d\x6f\xb2\xae\x76\x6f\xb3\x5c\x2b\xc7\x85\xb2\xc9\x35\x0b\x1c\xec\xc6\x9b\x39\x7e\x58\xb5\xb1\x60\x5b\x1d\xef\xd0\x75\x2a\x56\x46\x57\xbe\x26\xd6\x62\x8b\x8a\x5e\xc7\xfc\x79\x88\x44\x14\xd8\x03\x12\x5f\x78\x58\xde\x1a\x5d\x4d\x3b\xa5\x10\xa5\x7f\xc4\xdd\x05\xae\xa6\x10\x51\xc4\xac\x36\x9a\x46\xce\xa2\xf0\x6e\x07\x2c\x23\x4f\xf8\xff\x10\xd9\x23\x4d\x18\x58\x27\xa4\x84\x3b\xae\x1c\x55\x2d\x2f\x0a\x70\x54\xac\x4e\x7b\xc3\x7d\x96\x76\x03\xef\x6f\xf0\x8f\x52\x48\xa4\x29\xe6\x8b\xd9\x62\xde\x18\xe1\x76\x41\x9e\x2b\x85\x5a\xa7\xbe\x21\xf0\xa2\xa0\x6e\x23\x1c\xdc\xf9\x51\x6a\xd0\x36\xd2\x51\xb7\x6e\x2c\x9a\xd0\x34\x96\x48\x24\x7c\x29\x91\x94\x11\x0e\x34\xe5\xbd\x90\x20\xaf\xa9\xad\x33\xc8\x2b\x5a\x1a\x82\x35\xd4\x4f\x47\x21\x40\x31\xcb\xad\x2d\x3f\x3e\x97\x5e\x7b\xa0\xb2\xc3\xf9\xe2\xe8\xf6\xe2\xf8\xfc\xec\xf6\xe3\xf1\xbf\xd8\x1e\xc0\x53\xd8\x93\x16\xc1\x1a\xc5\xa8\xc6\x1c\x74\xba\x8e\x8d\xab\x4b\x41\xda\x68\x2c\x86\x8d\x45\x6f\xd1\x18\x51\x84\x4d\x85\x3b\x87\x55\xed\x01\xb5\xe8\xbc\xe9\x5e\x91\x8d\x40\x69\xb0\xba\x42\xef\x2a\xa0\xb4\xbe\x87\xef\xdb\xde\x5a\x3d\xff\x74\x76\x7a\x7c\xfb\xc7\xc5\x27\x96\x3e\xb0\x35\x97\x5a\xe1\x1f\x17\x9f\x82\xa5\x4f\x73\x5f\x5e\xbe\x7f\x92\xd7\xda\xf2\x07\x9c\xef\x16\x57\x4f\x72\xae\x85\xfb\x01\xe7\xfb\xe3\xc3\xa3\xdb\xf9\xd9\xc9\xc9\xe2\xea\x76\x71\x34\x14\x10\x3b\xcc\x77\x78\xe7\x8b\x9e\x9e\xd1\x30\x64\x81\x3a\xb6\x2c\x5b\x63\xde\xd6\x25\x1a\x7b\xfd\xea\x86\xda\x0d\xb5\xac\x20\x6d\xd4\xae\x4a\x34\x1f\xcf\xb9\x2b\x63\xef\xec\x7f\xff\xf9\x27\xb0\x89\x35\x39\x1b\x04\x36\xd7\x6a\x25\xd6\x50\xf1\x1a\xb6\x5a\x36\xc3\x36\xeb\x15\x86\x97\xbe\xd9\xf9\xcc\x68\xad\x0d\x4d\x3f\x8d\xfc\x27\xbc\xee\x6a\x31\xce\x92\xfb\xfb\x74\x8f\x81\x6d\x73\x7b\x60\x45\x81\x39\x37\x2c\x05\xca\x90\xdd\x91\x30\x53\xf8\x76\xdf\xcd\xfb\xb4\xa7\x16\x85\xb1\x9c\xa5\xb1\xdc\xa7\xf0\x2d\x3e\x9d\xfa\xe3\xd8\x4b\xc0\xb3\xde\xbc\xf9\x2e\x48\xc1\x83\x13\x42\xe1\x79\x37\x3a\x90\xa6\xc0\x26\xa5\xd6\x1b\xf6\x7d\xf3\x07\xf4\xdd\xe3\xf7\xdc\x78\x24\x7f\x62\x6d\xc9\x52\x30\xc8\x8b\x33\x25\x77\x53\xbf\xfd\x44\x6f\x06\x65\x57\x22\x44\xa5\xed\xf4\x89\x3f\x61\xd6\x3e\x5d\xd6\x98\x27\x98\xc6\xd0\xa6\xb0\xb7\xac\x6e\x73\x7b\x19\xc8\xc6\x51\xec\xd5\xd9\xd1\xd9\x94\xc2\xb6\x45\xe3\xba\x6e\xc7\x15\x08\x25\x1c\x74\xd0\x01\xad\xbe\xfe\x22\x01\xaf\xb3\xbf\x04\xd6\x21\xc6\x44\x3d\xef\x70\x26\x5c\xa3\x39\x37\x4f\x0c\x59\xae\x94\x76\x9c\x06\x93\xbd\x66\xd4\xc6\x96\xe8\xf8\xd0\x4c\xa1\x27\x24\xf0\xa0\x8f\x1c\xbb\x81\x19\xb0\x6b\x5a\x5e\x1e\xec\xc9\x51\x8f\x5f\x6e\x6e\xda\x54\xfe\xa0\x85\xf2\x68\xf9\xcb\x14\x79\x54\xf1\x0d\x02\xa7\x2d\x84\x96\xb1\x8a\xab\x62\x3a\x04\xc0\xef\x64\xf1\xaa\x53\x1b\xbd\xe4\x4b\xb9\x83\x35\x2a\x34\xb4\x4f\x73\xb0\x25\x4a\x09\x36\x37\xa2\x76\x29\x6d\xd9\xc6\x6f\x90\x84\x4a\x10\xd3\xf7\x30\x7f\xe3\xa1\x4e\x77\x80\x1a\x6a\x51\x23\xad\xc9\xa9\xbf\xfc\x34\x96\x08\x14\xde\x49\xa1\x90\xf6\x75\xeb\x90\x17\xb4\xbc\xbe\x78\xd1\x06\x94\x96\xa8\x8a\x6e\x0f\xcc\x3b\x43\xed\x9d\xca\xd6\x3b\xd2\xb6\xf6\x8e\xa6\x3b\xc9\xbe\x68\xa1\x12\x06\x2f\x5e\x00\xeb\x9a\x75\x5e\x65\x84\xf7\x35\xab\xb8\x50\x99\x2d\x3d\x88\x81\xb7\xed\x0e\xff\xdd\x05\x67\xf4\xe0\x2a\x32\x37\xc8\x3d\x0e\xa1\xec\xa9\x6b\x50\x84\xf2\xaa\x8f\xb5\x8a\xbb\xe0\x26\xc3\xaf\x0e\x95\xa5\xa0\x67\x1d\x79\x96\x93\x04\x4c\xf2\x6a\xfc\xac\xec\x76\x43\x7f\xbe\xa4\x7b\x1d\x83\xfb\x56\x94\x1c\xb8\x1e\x49\x8f\x97\xed\x2c\xcb\x58\x58\x3b\xc3\x9d\xa3\xdf\x4b\xdf\xd0\xea\xdf\xad\xe2\x0f\x6a\xcb\xdf\x98\xd3\xb0\x0f\xf4\x97\x52\xff\xf3\x8a\xaf\x61\x16\x1e\xdb\x0d\x18\x6b\x4d\x63\x62\xf6\x70\x58\xb5\xe1\xfd\xa9\x65\x6c\xc3\x3b\x10\xc4\x78\x2e\x8a\xc9\xa0\xd9\x4c\x25\x77\x68\x1d\x6b\x63\xfc\x68\xfc\xc3\x4f\x94\x3a\xad\xa8\x47\xca\xc3\xb4\x6b\xb9\x7d\x07\xa9\x31\x87\x59\x9b\x59\xa1\x4f\x91\xd6\x83\xbd\x16\xd7\xae\x14\xd3\xd8\x31\x07\xad\xf0\xf3\xfc\xd2\xef\x12\xfd\xb8\x6a\xb5\xde\xa7\x4f\xd1\x7e\x3a\x9b\x1f\x7e\xba\x3d\x3f\xbc\x7a\xdf\x73\x78\x44\x9f\xa1\xbf\x38\xfe\xbc\xb8\x5c\x9c\x9d\x3e\x35\x3e\x03\xc3\x4d\xda\xe3\x36\xed\xe0\x4b\xe3\xdd\x39\x54\x3b\x5c\xb3\x21\x8e\x6c\xc8\x73\xde\x48\x79\xae\xa5\xc8\x77\xb4\x1b\xc9\x3b\xbe\xb3\xd1\xe3\xe1\xb4\x78\xc2\xf5\x67\xa7\x80\xf7\xa7\xb5\xee\xd9\x58\xc5\x28\xf9\x94\x46\xb5\xfd\xff\xae\x6a\x31\xa5\x49\xf8\x5e\x2e\xef\x5d\xc4\x6a\x5d\x28\x3f\xf1\x28\xe2\x8b\x3e\x9f\x23\x73\xb0\x85\x6d\x84\x2a\xd8\xd4\x7f\x07\x88\x16\x30\x5e\x8b\xcf\x68\xa8\x9c\xe9\x60\xfb\xba\x7d\xdf\x16\x3e\xeb\x97\x74\x46\x1a\xd8\x14\x5a\x5d\xed\xeb\x70\xd7\x62\xc3\x6d\x9e\x95\x68\x84\xe3\x6b\x22\x67\x7f\x6f\xf4\x66\xc3\x3b\x97\x49\x38\x57\x7c\x8d\xc5\xef\x3b\x16\x73\x94\xb5\x3b\x7d\x27\x74\x30\x5b\x48\x72\x5c\xf6\xa3\x71\x84\xc5\xd0\x30\x83\xbe\x93\x87\xd0\x93\xcc\x53\xdc\xa2\xe9\x34\xb2\xc1\xfc\xe9\x83\x0f\x03\x7b\x7b\xe7\xbc\x39\xa6\x51\x03\x73\x01\x98\xcf\x2e\x36\xed\xd1\xdd\x3b\x8d\xa9\xb9\x27\xdb\x1f\x4c\x96\x42\x4d\x68\x21\x78\xf0\xda\x6f\x0a\x6d\x33\x1f\x9c\xdd\x0c\x09\x27\x13\x78\xbb\xf8\xe7\xc9\xf1\x14\xe6\x25\x57\x6b\x7f\xa1\x60\x8b\xd5\xa9\x76\xe7\x06\x2d\x2a\xc7\x1e\x59\xd8\xe7\x3f\xeb\x0b\xa0\xa3\x6a\x2f\x4e\x37\xdd\xd7\x98\x7b\xdf\x1d\xf7\x52\x6a\x7e\x92\xf8\x36\xfc\x9d\xec\x99\xb7\xbb\xe1\xff\x90\x43\x3d\xd0\xc3\x14\x7a\x3a\x89\x7e\x9c\x48\x31\x1f\xda\xb4\x78\xac\xab\xc5\x78\x0a\x0c\xf3\x52\x03\x4d\x7f\x4d\xc3\xd5\xff\x5a\x6b\x5d\x2c\x77\xc8\x7a\x21\x01\x10\xfc\x5a\x6b\xe3\x6c\x66\x1a\x05\x33\x9a\x25\xdd\x9b\xfe\x53\x26\xcc\x06\xdf\x35\x47\xff\x09\x00\x00\xff\xff\x24\x77\x56\xb4\x09\x16\x00\x00")

func jsRunJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunJs,
		"js/run.js",
	)
}

func jsRunJs() (*asset, error) {
	bytes, err := jsRunJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRun_mockJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcd\x4a\x03\x51\x0c\x85\xf7\xf7\x29\x0e\x5d\x75\x68\x4d\x5d\x0a\xd2\x9d\x08\xba\xf6\x05\xee\x5c\xe2\xf4\xb6\x33\xc9\x90\xe4\x52\x41\x7c\x77\x19\xb4\x3f\xdb\x93\x2f\xe7\x7c\x69\xb7\xc3\xc7\xa1\x3a\xe6\x5c\x4e\x79\x60\x4c\x5a\x4e\x8e\x38\x30\xac\x09\x1d\x1d\x9f\x4d\x4a\x54\x15\x27\xbc\x05\x4a\x16\x18\xcf\x63\x2e\x37\x40\x0d\xc1\x1e\x55\x06\x4a\xe9\x82\xe3\x9c\x6b\xbc\xaa\xbd\x6b\xbf\x3e\x6a\xdf\xe1\x3b\x01\x45\xc5\x75\x64\x1a\x75\x58\x42\x92\x3c\x71\x97\x12\x60\x1c\xcd\x04\x61\x8d\xd3\xcf\x5d\x89\x35\x59\xc0\x2d\xf8\xaf\xe0\x9f\xbb\xfc\x62\x83\xd5\xc3\x0a\x1b\xbc\xe4\x60\x12\x3d\xaf\xbb\x6b\xc4\x54\x74\x9a\x6a\x90\xb7\xde\xc3\xaa\x0c\xeb\xc7\x2d\x9e\xba\xe7\x65\x80\xbf\x66\xb5\x70\xba\x49\x62\x7f\x67\x7c\xbd\x5b\x13\xec\x17\x8b\xf4\x1b\x00\x00\xff\xff\xf2\x0f\x52\xe5\x29\x01\x00\x00")

func jsRun_mockJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRun_mockJs,
		"js/run_mock.js",
	)
}

func jsRun_mockJs() (*asset, error) {
	bytes, err := jsRun_mockJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run_mock.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\xdf\x3e\x75\xe3\xd2\xfb\x04\x73\x10\x5d\x51\xf0\xe8\x4d\x44\x42\x52\xdd\x1d\x08\x55\x6d\x55\x7a\x7b\x17\xd9\x77\x97\x74\xdc\x71\x66\xf0\xe0\x31\xf9\xc9\x97\xbf\x3e\xea\xfe\x1e\x5f\x97\x64\x48\x86\xb2\x10\x74\x63\x26\xc5\xae\x7e\x5d\x13\xcf\xb0\xa0\x69\x2d\xa3\x0b\xc2\x26\x99\xc6\x2c\x73\xdf\x7d\x11\x1f\x6b\xf8\xee\xfd\xe7\x0f\x08\xa2\xd4\x0d\xce\x4d\x1b\x87\x92\x84\x31\x25\xa5\x87\x47\xe2\xd2\xd3\x80\x5f\x0e\x78\xf4\x0a\xaa\x17\x9f\x3c\xc7\x4c\x8a\x13\x98\x76\x3c\x5c\x5c\xf5\x83\x73\xc0\x6b\x97\x59\xc8\x90\xf8\x28\x64\x41\x56\xaa\x87\x7d\x49\x61\xc1\xd4\x0f\xb5\x2a\x3d\x51\xd8\x0a\x45\x98\xa0\x2c\xbe\x60\x27\x04\xcf\xf0\x21\x90\x59\x43\xd5\xd7\xa2\x69\x4e\xec\x73\xfb\x1f\x7b\x2a\x8b\x6c\x05\x4a\x3f\xb7\xa4\x75\x84\x5e\xf4\x0e\x4a\x3e\xe7\xe7\x3b\xf8\x9c\x65\x4f\x3c\x0f\xc7\xdb\xcd\x48\x51\xa4\xc1\x56\x6f\x4d\x50\x03\x79\x95\x8d\xe3\xe8\x00\x7a\x5a\x45\x8b\x8d\x3f\x5a\x70\x02\xd5\x49\xd2\x84\xfe\x8d\xd2\x9c\xac\x90\x1e\x83\x5a\x73\x01\x5c\x99\x64\xf9\x03\x5c\x9a\x07\x43\xa4\x29\x31\xc5\xee\x10\x02\x28\x95\x4d\xd9\x01\x2f\xf5\x7c\x4d\xec\x2f\xa5\x0e\xee\x06\x7d\x84\x86\x2c\x3e\x52\x1c\xf1\xb1\xcd\xdb\xe1\x2d\x68\x2c\xcf\x2b\x0d\xe7\x9e\x97\x98\x6f\x2d\xfc\xfe\x5f\x6d\xcf\x7d\x28\x62\x12\xbd\x85\xdf\xb6\xaf\x7b\x30\x55\x43\xff\xf8\xaf\xe6\x53\x4f\x83\x7b\x71\xee\x55\xe9\x79\x91\x70\xfa\xbb\x54\xee\x77\x00\x00\x00\xff\xff\x0b\x8b\xea\xff\xb1\x02\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsWaitgroupJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x8e\x9c\x30\x10\x86\x7b\x3f\xc5\x5f\x82\x14\x99\x27\xd8\x32\x8a\x92\x22\x4d\x22\xa5\x88\x52\x18\x18\x62\x73\xc6\x83\xec\xe1\xd8\xd5\x89\x77\x3f\xd9\xbb\x2c\x48\x57\x5e\x61\xad\xd6\x78\xbe\xff\x9b\xb1\x9b\x06\x7f\x8c\x93\x6f\x91\x97\x19\xab\x71\x92\x30\x70\xc4\xb4\x78\x71\xb3\x27\x8c\xdc\x26\x08\x63\x70\xc1\x25\xab\xf1\x5d\xb0\x3a\xef\x21\x36\xf2\x0a\x13\x40\x31\x72\x54\x4d\x03\x93\x90\x98\x43\xfe\x35\xb9\x0c\x91\x66\x8e\x92\x9e\x87\xb4\x1a\x96\xd0\x89\xe3\x70\x44\x56\x35\xde\x14\x20\xd6\x25\x5d\xa2\x2e\xf8\xfb\x4f\x29\x20\x03\xfb\x3e\xaf\x8c\x0b\xb4\x16\xa4\x30\xc4\x52\xf1\xfc\x9f\xcb\xf7\xd2\x7c\xf4\x82\x1d\x5f\x8d\xdc\xde\xb9\x27\xb2\x9e\x97\x64\xcb\x17\x05\x6c\x8f\x88\xb8\x84\xbc\x12\xe8\x95\xe2\xad\x44\xb8\x50\x22\x0a\xfe\x0b\x4c\xe8\xf3\xdf\x70\x1a\x8d\x58\x9a\xb2\x48\xc7\xd3\xec\x49\x48\xef\x12\x19\x76\x92\xf8\x68\x30\x70\xfc\x6a\x3a\x5b\x3d\xc7\x50\x8d\xfb\x21\x60\xd4\xad\xe9\x5e\x72\x6c\xe8\xab\xba\x6c\x6e\xf5\x01\xc8\xf9\xd5\x59\x3d\x6f\x3c\xac\x96\x20\xce\xdf\x6f\xca\x44\x3a\xc4\xf0\x93\x85\x20\xd6\x48\x61\xa0\x67\x4a\x08\x2c\xa5\xed\xdc\x64\xb1\xc2\x6f\x4b\xb7\x3b\x73\x5a\x92\xa0\x25\x24\x31\x51\xa8\x07\x5d\x85\x62\x30\xde\xdf\x34\xaa\x5f\x44\xc7\xbd\x95\x66\x39\xe2\x07\xb7\x27\xef\x5a\x9d\x6c\x3f\x35\x8b\x67\xbb\x8f\x29\x6c\x6a\x53\x8a\xae\xe5\x41\xe9\xe3\xc1\x5e\x0e\x23\xf5\x1e\x00\x00\xff\xff\x60\x6f\x0e\xe7\xca\x02\x00\x00")

func jsWaitgroupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsWaitgroupJs,
		"js/waitgroup.js",
	)
}

func jsWaitgroupJs() (*asset, error) {
	bytes, err := jsWaitgroupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/waitgroup.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/event.js": jsEventJs,
	"js/job.js": jsJobJs,
	"js/mock8s.js": jsMock8sJs,
	"js/run.js": jsRunJs,
	"js/run_mock.js": jsRun_mockJs,
	"js/runner.js": jsRunnerJs,
	"js/waitgroup.js": jsWaitgroupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"event.js": &bintree{jsEventJs, map[string]*bintree{}},
		"job.js": &bintree{jsJobJs, map[string]*bintree{}},
		"mock8s.js": &bintree{jsMock8sJs, map[string]*bintree{}},
		"run.js": &bintree{jsRunJs, map[string]*bintree{}},
		"run_mock.js": &bintree{jsRun_mockJs, map[string]*bintree{}},
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
		"waitgroup.js": &bintree{jsWaitgroupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

