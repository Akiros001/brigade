// Code generated by go-bindata.
// sources:
// js/event.js
// js/job.js
// js/mock8s.js
// js/run.js
// js/run_mock.js
// js/runner.js
// js/waitgroup.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsEventJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4a\xc6\x30\x10\x85\xf7\x39\xc5\xdb\x55\x41\xd2\x13\x74\xe1\x42\x70\xed\x0d\xa6\xc9\xd4\x04\x62\x52\x33\x53\x6b\x91\xde\x5d\x42\x94\x9f\xf2\xef\x86\x79\x8f\xef\x9b\x19\x47\xbc\x7c\x71\xd6\x57\xca\x3e\x71\x85\x67\x71\x35\xce\x2c\xd0\xc0\x48\x51\x14\x65\x01\xb7\x4a\x5b\x91\xe2\xd9\x45\x8f\x28\xa0\x9d\x2a\xa3\x2c\xd6\x2c\x5b\x76\x1a\x4b\xbe\x90\x1e\x1e\xf1\x63\x80\xce\xaf\x47\x47\x20\xfc\x69\xde\x59\xbb\x61\xa5\x4a\x1f\x18\x3c\x29\x0d\x4f\xd8\x43\x74\xa1\xc1\x5b\x34\x17\x7f\x34\x79\x9b\x2b\x7f\x6e\x2c\x6a\x0d\xa0\x21\x8a\x5d\x37\x09\x98\xf0\x6f\x6e\xb2\xf3\x96\xa5\xf4\xd6\xfb\x77\x95\xd3\x18\xfe\x5e\x4b\x55\xb1\x97\xb7\xa7\xcb\xed\xe6\x37\x00\x00\xff\xff\x38\xd9\xc5\x1d\x16\x01\x00\x00")

func jsEventJsBytes() ([]byte, error) {
	return bindataRead(
		_jsEventJs,
		"js/event.js",
	)
}

func jsEventJs() (*asset, error) {
	bytes, err := jsEventJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/event.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsJobJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\x4f\x6f\x1b\xb7\x13\xbd\xef\xa7\x78\x3f\x9d\xa4\x5f\x95\x5d\x07\x69\x7b\x88\xa1\x83\x51\x3b\x40\x5c\xc0\x0d\x62\x37\x3d\x06\x5c\xee\xac\x96\x31\x97\xdc\x92\x43\xd9\x42\xe0\xef\x5e\x0c\xa9\x7f\x51\x12\x1f\x0c\x70\xc4\x79\x33\xf3\xde\x1b\x6e\xd3\xe0\x61\x20\x74\xd4\xab\x64\x19\x66\x54\x6b\x82\x89\x88\xec\xf5\x23\x52\x9b\x1c\x27\xbc\xfe\xbd\xbe\xf8\x15\xbf\x60\x54\x8f\x04\xe5\x3a\xac\x0d\xd7\xd5\x46\x05\x28\x6d\xba\xf7\x39\x67\x85\x99\x1c\x5e\x95\x94\xb7\x56\x31\x45\x9e\x55\x55\xd3\xe0\x43\xf0\xec\x79\x3b\x11\x7a\x1f\x70\xeb\xdb\xba\xea\x93\xd3\x6c\xbc\x93\xd3\xdc\xa9\x91\x96\x60\x15\x1f\xe3\x02\x5f\x2b\x40\x90\xc7\x2d\x56\xe0\xc1\xc4\xaa\x02\x4c\x8f\xf9\xff\xe8\x79\xf2\x81\x63\xfd\x99\x36\xe4\xb8\xdc\x04\x78\x08\xfe\x09\xb3\x1c\x83\xf3\x8c\xde\x27\xd7\xcd\x2a\xe0\x45\x32\xb5\x77\xd1\x5b\xaa\xad\x5f\xcf\x67\xab\xef\xff\x66\x8b\xb3\x4b\xb7\xf7\x7f\xdd\xd5\x91\x83\x71\x6b\xd3\x6f\xe7\x67\x45\xcf\x6f\xff\x04\xb2\x02\x9a\x06\x77\x6a\x24\x3c\x19\x6b\xd1\x92\xf6\x23\x81\x07\xc2\x14\xa8\x37\xcf\x99\x89\x7c\xf4\x5d\xa3\xbd\xeb\xcd\x7a\x54\x13\x84\x89\x58\x57\xc8\x83\xd7\x72\xc2\x2a\x07\x2f\x0b\xe2\x83\x70\x24\xf2\x48\xaa\x35\x91\xe1\xfb\x42\x1c\xd8\x23\x24\x57\x8b\x9a\x5b\xa8\x40\xa0\x67\xd2\x89\xa9\x83\x71\x88\xf4\x6f\x22\xa7\x09\xc6\x45\xd3\x11\x7c\x5f\xf0\x14\xe2\x40\xd6\x62\xde\xb4\xc6\x35\x71\x58\x1c\x6a\x17\xd0\x55\x01\xbf\xdc\x0d\x74\x05\xed\xad\xa5\xa2\x9c\xef\x73\x67\xcd\x46\xd9\x44\x98\x94\x09\x51\x62\xe4\x36\x26\x78\x37\x8a\x1c\x1b\x15\x8c\x6a\xed\xc9\x48\xe4\x36\x58\xe1\xeb\xcb\x1e\x51\xbc\x57\x3c\x27\xb6\x52\x0e\x7e\x12\x70\x65\xc1\x6a\x7d\xc8\x32\x3b\x87\x1d\xdc\x76\x6c\x48\x58\xf3\x3d\x6e\xee\x3e\x7d\xfe\x74\xf5\xb1\x10\x98\xb1\xee\x49\x07\xe2\x1d\xa3\x78\x18\x4c\x2c\x52\x4c\x7e\x4a\x62\xce\x4c\xe1\x49\xb3\x05\x70\xdf\x31\x9e\x0c\x0f\xf9\x4a\x19\x2f\x9b\x4a\x98\x94\x50\xcc\xd0\xf5\x7e\x82\x3d\xb2\xdf\x50\x08\xc2\xae\xc2\xa8\x58\x0f\xc6\xad\xa5\x40\x76\x73\x1f\xfc\xb8\xaf\x28\x3d\x1f\x46\x2b\x58\x31\x93\xb2\x1b\x6a\xf2\x5d\x76\x8e\x6c\x21\x31\xda\xad\x08\x3b\x5f\x2c\xf3\x58\xda\x3b\x56\xc6\x15\x07\x64\x83\x88\x03\x8a\x91\xa0\x03\x29\xa6\xee\x00\xbe\x43\xda\xe1\x86\x24\x46\x70\x5d\xcc\x3f\xe2\x8b\x6f\xc5\x34\x7f\xa6\x96\x82\x23\x3e\x11\x49\x2e\xae\xb0\x5f\xd1\xf9\x71\xd3\x4c\xac\x5b\xa5\x1f\xd7\x41\xd8\x38\x5f\x8d\xe3\x9d\x27\x65\x78\x9e\x97\x00\x08\xc4\x29\xb8\xb2\xc8\x40\xd1\xfd\x0c\xe8\xa7\xb5\xf6\x44\xac\x32\x01\x12\x5a\xe2\xac\xe8\xe5\x01\xb4\x69\x20\x75\xff\x76\x6c\xec\xb5\x77\x99\xbe\x81\x42\x79\x73\xa4\xd8\x93\x0a\x5d\x84\xf6\xe3\xa4\xd8\xb4\xc6\x1a\xde\x2e\xd1\x26\x46\xe7\x29\xca\xcb\x21\x82\xed\x44\xbd\xbe\xf9\xf0\xf1\xe6\x8f\xab\x87\x9b\xeb\xb7\xf8\xa7\x2c\x30\x02\x8d\x7e\x43\x1d\xba\x24\x6f\x03\xae\xec\x34\xa8\xea\x64\xe2\x63\xe5\xb3\x79\x7e\xc4\xc3\x49\xc7\xf9\x5f\x44\x92\x74\xa8\xac\xe3\x20\x81\xd9\x7d\xd2\x9a\xa8\xa3\xfc\x98\x35\xcd\x31\x63\xbe\x80\x56\x4e\x7a\xd2\xca\x5a\xea\xe0\x1d\x8e\x74\xca\xb9\xfd\x42\x9a\x63\xfd\x7d\x9e\x89\x50\x89\xfd\xa8\xd8\x48\xee\x76\x8f\xd0\x6e\x0f\xd2\x9f\x66\xbd\xef\x73\x3f\xa5\xf9\x88\xd9\x3b\x65\x2c\x75\xb3\x65\x71\x50\x7e\x7a\x65\xdb\x40\xcf\x9a\xf2\xe2\xd6\xdf\xe6\x25\x17\x33\xff\xa3\x0f\xb2\x70\xca\xe1\xf5\x6f\x18\x8d\x4b\x4c\x11\xf3\x37\x17\x17\xf8\x3f\xde\xbc\x8a\xa4\x7d\xde\x2e\xa6\xb0\x51\x36\x2e\x96\x07\x68\xb0\x19\xc9\x27\xfe\xb6\xc2\x81\xf3\x1f\x59\x47\xe2\xef\x7c\x90\x0f\xcb\xb8\x5d\x14\x7f\xbc\x54\xd5\xde\x38\xb7\xbe\xc5\x4a\x3e\x3b\xd5\x7f\x01\x00\x00\xff\xff\xfc\x5b\x92\xde\xfb\x06\x00\x00")

func jsJobJsBytes() ([]byte, error) {
	return bindataRead(
		_jsJobJs,
		"js/job.js",
	)
}

func jsJobJs() (*asset, error) {
	bytes, err := jsJobJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/job.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsMock8sJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8a\xdb\x30\x14\x85\xf7\x7e\x8a\x43\xe8\x62\x02\xc1\x43\xb7\x81\xac\x0a\xdd\xb5\x94\x0e\x74\x53\x4a\xb9\x91\x8e\x13\x75\x6c\xc9\xe8\x67\x3a\x50\xfc\xee\x45\xae\xa5\xd8\xd9\xb4\x8b\x6e\x94\x9b\xfb\xf3\x59\xe7\xea\x3c\x3e\xe2\x29\x3a\x4f\x0c\x4e\x3d\x63\x74\x1a\x9a\x9d\xb1\x26\x1a\x67\x03\xae\xf4\x84\x04\xec\xac\x0c\xdc\xe1\x88\x37\x9e\xc1\x25\xaf\xd8\xbc\x88\x9f\x67\x3e\x39\x1d\x70\xc2\xaf\x66\x6a\x9a\x0a\x53\xce\x76\xe6\x32\xc8\xf8\x4f\x88\x77\x73\xf7\x87\xdc\xbd\x80\x72\xe5\x39\x9d\xe9\x2d\x23\xff\x64\x81\x9f\x26\x5e\x3f\x3e\x1d\xd1\x25\xab\xf2\xf5\x1e\x6c\xd8\xcf\x05\xc0\x33\x26\x6f\x17\x98\x67\x03\x4c\x05\x53\x72\x0b\x44\x39\xcf\x2f\x6f\x8f\xcb\xdc\xe8\x74\x09\x81\x0b\xe3\x1a\x2e\x03\xf7\xb5\x56\x3f\xf1\xbd\xed\x8c\xd5\x0f\x45\xf9\xe1\x36\xc0\x7e\xd3\x5f\x27\xd8\xb3\x1d\x18\x45\x4b\x94\x36\x53\x71\x3a\x21\xff\xd6\xd6\x69\xbf\x84\xd3\x61\x09\x94\xa7\x44\xae\x6e\xa3\xd9\xad\xe1\x79\xd1\x49\x29\x52\x53\x1f\xf0\x39\x59\x6b\xec\xe5\x00\xb1\x1a\xef\xc5\xf4\xd4\x10\x4f\x04\x37\x10\x2f\xd2\x1b\x9d\xcf\xc4\xd0\x56\x80\x66\xd7\x86\x28\x31\xcd\xcb\xc5\x78\x95\xc0\x23\x76\x15\xba\xc3\x54\x7b\x8b\xd6\xaf\x79\xa8\x2a\xe9\xe5\xcc\x3e\xb4\x3f\xdc\x39\x6b\xf9\x86\x53\x66\x36\xf7\xeb\xca\xb9\x45\x5b\x53\xce\x59\x25\x5f\x23\x6d\xc8\x26\x2b\x0f\x50\x3d\x73\x7b\x91\xbf\xad\x61\x6b\x9e\xff\x76\xbf\x6c\x1d\xbe\x8e\xce\xc7\xd0\xae\x2c\x5e\xc2\x4d\x6d\xe3\xdd\x6d\xa2\xf6\x6d\x9c\x7c\xfb\x73\xc7\x99\x2d\x5a\x1d\xfc\x3b\x00\x00\xff\xff\xc6\x15\x83\xe4\x98\x03\x00\x00")

func jsMock8sJsBytes() ([]byte, error) {
	return bindataRead(
		_jsMock8sJs,
		"js/mock8s.js",
	)
}

func jsMock8sJs() (*asset, error) {
	bytes, err := jsMock8sJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/mock8s.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x7b\x6f\x1b\x37\x12\xff\x5f\x9f\x62\x4a\x14\xa9\x84\xac\x57\x29\x0a\x1c\x0a\xe5\x84\x83\x6b\x3b\x8d\x92\xf8\x71\xb6\x9b\xbb\x83\x61\x18\xd4\xee\x48\x4b\x8b\x4b\x2e\x48\xae\x1c\x35\xf0\x77\x3f\x0c\xc9\x7d\x48\x96\x92\xe2\x70\xff\xd8\x6b\x72\x66\x38\xf3\x9b\xb7\xc7\x63\xb8\x2d\x10\x84\x72\x68\x14\x97\x16\x16\xda\x80\xa9\x95\x12\x6a\x09\x8e\xdb\x95\x4d\xe1\xb6\x10\x16\xca\xda\x3a\x98\x23\x48\xcd\x73\xcc\x61\x8e\x0b\x6d\x10\xb8\xda\x80\x5e\x80\x2b\x70\x30\x1e\x83\x9e\x3f\x62\xe6\x2c\xb8\x82\x3b\xa8\x2d\x92\xa0\xe1\x28\x1d\x8c\xc7\x74\x7b\x2c\x25\x7c\xac\xe7\x68\x14\x3a\xb4\x70\x7c\x35\x83\x8c\x4b\x69\xc1\x16\xba\x96\x79\x10\x9e\x71\x29\xfe\xc4\x1c\x0a\x34\x98\xc2\xa5\x2b\xd0\x40\xa9\xf3\x5a\x62\x4b\xa7\xb4\x23\x71\xc4\x0b\x3f\xad\x5a\x81\x3f\x41\x2e\x0c\x66\x4e\x6e\xd2\xc1\x60\xcd\x0d\x58\x91\x63\xc6\xcd\xac\xe4\x4b\x84\x29\x30\x9e\x89\x5c\x64\x29\xff\xb3\x36\x98\x99\x54\xe8\xf1\x3a\xb3\x47\x91\x6a\x22\xb9\x43\xeb\xd8\x80\x44\x3f\x71\xe1\xc0\xf1\x15\x5a\xe0\xf0\xa8\xe7\x47\x52\xac\x30\x5a\x07\x5c\xe5\x9e\xc0\x42\xad\x9c\x90\x20\x1c\xd8\x3a\xcb\x10\x73\x0b\xda\xc0\x82\x0b\x69\xd3\xc1\xa2\x56\x99\x13\x5a\x79\xd2\x77\xda\x7c\xd0\xf3\xe1\xa3\x9e\x8f\xe0\xeb\x00\x80\xb4\x2b\x37\x30\x25\xd9\x83\x01\x78\xcc\x87\x74\x28\x60\x0a\x6f\xde\x82\x80\xbf\xc3\x2f\x6f\xe8\xe3\xf5\xeb\xc0\x01\x90\x69\x65\xb5\xc4\x54\xea\xe5\x90\x65\x05\x66\x2b\xf2\x90\x75\xdc\xd5\x96\x5c\xc0\xe0\x35\x94\x9b\xb4\xd2\xf9\x05\x2f\x71\xe4\x79\x48\xe4\x0a\xa6\xd0\x81\x94\x3e\x09\x57\x5c\xdc\x0c\x59\x8e\x0b\x5e\x4b\xc7\x3a\xc2\x72\x53\xe9\x9c\x88\xd3\x4c\x1b\xfc\xfc\x33\x89\x4a\x97\xe8\x86\x7d\xa9\x2f\x54\xf9\x70\x73\x79\x91\x5a\x67\x84\x5a\x8a\xc5\x66\xe8\x85\x8c\x46\x2f\x35\xbe\xd2\xf9\x8e\x8a\xf0\x1a\x18\x08\x0b\x42\x79\x2b\x30\x5e\xd3\xab\xc1\xaa\xb4\x2a\xb8\x6d\xde\x14\x0b\x18\xbe\xbc\x84\xe9\x14\xd8\x3b\x2e\x24\xe6\xac\x01\x0a\xc0\x15\x46\x3f\xc1\xa1\x27\x17\x9e\x1c\x9c\xa6\xe8\xa4\x5f\x99\x2e\x2b\x89\xe4\x2c\xf6\xd6\x4b\x78\xfe\xde\x8b\x37\xc1\xdf\x5b\x8f\x1a\x74\xb5\x51\xe0\x4c\x8d\x3d\x21\xe3\x31\xdc\x48\xc4\xca\xbb\x98\x43\x8e\x0b\xa1\x30\x07\x5e\xea\x5a\x39\x9f\x39\xa2\xc4\xd4\x93\x5a\xa2\x1b\xfe\x42\xd8\x11\x6f\x34\x82\xee\x73\xd0\xb5\xf3\x81\x44\x2e\x27\x49\xd5\x7e\xd3\x82\x4d\x6c\xf0\xec\xa3\x98\xcc\x33\xb5\x8a\x31\x1c\x34\x50\x80\x6b\x54\x0e\x86\x38\x4a\x61\xe6\x20\xd7\x68\x29\xa1\x42\xc8\x13\x89\x2b\xd0\x93\x77\xc0\x20\x25\x70\x28\x02\x82\x84\x49\xfd\x74\x24\x71\x8d\x12\x2a\x23\x4a\xe1\xc4\x1a\x7b\xf1\x4e\x29\xff\xa8\xe7\x09\x60\xc0\x66\x3c\x86\x1f\x3f\x5c\xfe\x76\xf4\xe3\xed\xec\xfc\xec\xe8\xc7\xdf\x67\xb7\x37\xef\x8f\x63\x0e\xac\x7e\xb5\x5e\x77\x9f\x08\xa9\x8a\x66\x1c\x91\x65\xa7\xdc\x61\xaa\xf4\xd3\x70\xd4\x1e\x61\x9a\xe9\xb2\x14\x2e\xb5\xf5\x3c\x44\xdc\xf0\x4d\x02\xbf\x8e\xde\x46\x69\x59\x19\x85\x45\xb1\xf1\x98\x8a\x19\x9a\xbd\x57\x59\x09\x53\x50\xf8\x74\x72\x3e\x0c\xcc\xa3\x2d\x9e\x70\x79\xed\xbf\xaf\x74\x3e\xec\x24\x25\x5e\x61\x41\x95\xc5\xc7\x67\xb8\x49\x4b\x74\x3c\xe7\x8e\xa7\x92\xcf\x51\xda\xf4\x51\xcf\xd5\xb6\x7d\x87\x69\xe7\x28\xb5\x5a\x5a\xa7\x61\x0a\x98\x1a\xac\xb4\x67\xa0\x2f\xc9\x33\x1c\xb2\x31\x4b\x08\x88\xd1\x61\x11\x01\x1e\xcf\x1f\x3e\x07\x01\xff\xe3\x3c\x07\x54\x6b\xb2\xcc\xa6\xd1\x42\x54\xeb\xcf\xdc\x58\x98\xc2\xdd\x3d\x91\x3d\xa4\xc8\xb3\x82\x3c\x97\xa2\x5a\x27\xd0\xf8\x73\xb8\xe6\x32\x81\x15\x6e\x9a\x48\x8f\x8c\x69\x55\xdb\x62\xf8\x95\x54\x9c\xd0\x75\x02\x6b\x2e\x6b\x9c\xd0\xaf\x67\xef\x12\xfa\xd9\xbd\x6f\x31\x33\xe8\x2c\x70\xbb\xa5\x4a\xef\xd9\x48\x71\xe0\xe9\x36\x9b\x74\x89\xad\xb0\x27\x04\xfc\x52\x49\x91\x09\x27\x37\x30\x97\x3a\x5b\xa5\x6d\xee\x3e\xa4\x99\x56\x8e\x0b\x65\x87\x77\x2c\x70\xb0\x7b\xaf\xe6\x68\x37\x6b\x63\xc2\x36\x6f\xfc\x8e\xae\x7d\x62\x61\x74\xe9\x73\x62\x29\xd6\xa8\xe8\x38\xc6\xcf\x2e\x12\x51\x60\x07\x48\x3c\xf0\xb0\xbc\x33\xba\x9c\xb4\x8f\x42\x94\xfe\x11\x37\xd7\xb8\x98\x40\x44\x11\xd3\xca\x68\x6a\x31\xb3\xdc\x9b\x1d\xb0\x8c\x3c\xe1\xf7\x2e\xb2\xa7\x9a\x30\xb0\x4e\x48\x09\x4f\x5c\x39\xca\x5a\x9e\xe7\xe0\x28\x59\x9d\xf6\x8a\xfb\x28\x6d\x7b\xe3\x3f\xe0\x5f\x85\x90\x48\x5d\xcb\x27\xb3\xc5\xac\x36\xc2\x6d\x82\x3c\x57\x08\xb5\x4c\x7c\x41\xe0\x79\x4e\xd5\x46\x38\x78\xf2\x5d\xd7\xa0\xad\xa5\xa3\x6a\x5d\x5b\x34\xa1\x68\xcc\x91\x48\xf8\x5c\x22\x3d\x46\x38\xd0\x40\xe0\x85\x04\x79\x75\x65\x9d\x41\x5e\xd2\x7c\x11\xb4\xa1\x7a\x3a\x08\x0e\x8a\x51\x6e\x6d\xf1\xf1\x50\x78\x6d\x81\xca\x8e\x4f\x66\xa7\x0f\xd7\x67\x57\x97\x0f\x1f\xcf\xfe\xc3\xb6\x00\x9e\xc0\x96\xb4\x08\xd6\x20\x7a\x35\xc6\xa0\xd3\x55\x2c\x5c\x6d\x08\xd2\xf0\x63\x31\x0c\x37\x7a\x8d\xc6\x88\x3c\x0c\x35\xdc\x39\x2c\x2b\x0f\xa8\x45\xe7\x55\xf7\x0f\xd9\x08\x94\x06\xab\x4b\xf4\xa6\x02\x4a\xeb\x6b\xf8\xb6\xee\x8d\xd6\x27\x9f\x2e\x2f\xce\x1e\xfe\xb8\xfe\xc4\x92\x1d\x5d\x33\xa9\x15\xfe\x71\xfd\x29\x68\xba\x9f\xfb\xe6\xe6\xfd\x5e\x5e\x6b\x8b\xef\x70\xfe\x3e\xbb\xdd\xcb\xb9\x14\xee\x3b\x9c\xef\xcf\x8e\x4f\x1f\x4e\x2e\xcf\xcf\x67\xb7\x0f\xb3\xd3\xbe\x80\x58\x61\x9e\x7b\x45\xc8\x56\x98\x35\x99\x86\xc6\xde\xbd\xb9\xa7\x02\x42\x45\x28\xc8\xee\xe1\x9f\x69\xb5\x10\x4b\x28\x79\x05\x6b\x2d\xeb\x7e\x35\xf4\x52\xc2\xa1\xaf\x49\xde\x81\x8d\x42\xa1\x36\x27\x91\xff\x9c\x57\x6d\xca\xc4\x92\xff\xfc\x9c\x6c\x31\xb0\xde\x60\xc7\x12\x20\x47\x6e\x4e\x85\x99\xc0\xd7\xe7\xb6\x2d\x27\x1d\xb5\xc8\x8d\xe5\x2c\x89\x59\x39\x81\xaf\xf1\xeb\xc2\x5f\xc7\x94\x07\xcf\x7a\xff\xf6\x9b\x96\x07\x0b\xce\xa9\xb9\x1f\x36\xc3\xf7\xfe\x2b\xee\x8a\x09\xb0\x71\xa1\xf5\x8a\x7d\x5b\xfd\x2d\x7a\x6b\x32\xf6\x2d\x1b\x5e\x08\x1f\x5b\x5b\xb0\x04\x0c\xf2\xfc\x52\xc9\xcd\xc4\x4f\x28\xd1\x94\x5e\x6a\x14\xd8\xcc\xcb\x4d\x87\x88\x7f\xc2\xb4\xf9\xba\xa9\x30\x1b\x62\x12\x95\x48\xb6\xe6\xeb\x51\x94\x75\x7b\x79\x7a\x39\x21\x47\xad\xd1\xb8\xb6\x0c\x71\x05\x42\x09\x07\x2d\x58\x40\x63\xa8\x5f\x06\xe0\xe7\xf4\x6f\x81\xb5\x8f\x2a\x51\x9f\xb4\xc8\x12\x92\xf1\xb1\xfb\x3d\xdd\x8f\x2b\xa5\x1d\xa7\x8e\x61\xef\x18\xd5\x97\x39\x3a\x9e\xf6\x66\x5e\xa1\xc7\x24\xf0\xa8\xf3\x15\xbb\xa7\x85\xe0\x8e\xa6\x8a\x9d\x01\x36\xbe\xe3\xa7\x8e\x7b\x16\xad\xfa\xa0\x85\xf2\x10\xf9\x85\x88\x2c\x2a\xf9\x0a\x81\xd3\x78\x40\x53\x52\xc9\x55\x3e\xe9\x03\xe0\x87\xa5\xb8\xae\x54\x46\xcf\xf9\x5c\x6e\x60\x89\x0a\x0d\x0d\xba\x1c\x6c\x81\x52\x82\xcd\x8c\xa8\x5c\x42\xe3\xaf\xf1\xa3\x1d\xa1\x12\xc4\x74\xc5\xc5\xaf\x1e\x54\x82\x8e\x50\x43\x25\x2a\xa4\xf9\x35\xf1\x5b\x48\x6d\x89\x40\xe1\x93\x14\x0a\x69\x90\xb6\x0e\x79\x4e\x53\xe5\xab\x57\x8d\x17\x69\xba\x29\xf3\x38\x81\x84\x7d\xee\x51\x0b\x35\x64\xf0\xea\x15\x30\xef\xb6\xac\x4c\x09\xc7\x3b\x56\x72\xa1\x52\x5b\x78\x70\x02\xdf\x60\xf0\x17\x97\x88\xc1\xce\xb8\x7f\x62\x90\x7b\x93\x42\xce\x52\xca\x13\xd8\x59\xd9\xb9\x4d\xc5\x79\x6b\x3c\xfe\xc6\x3e\x91\x95\x7e\x99\x58\xa5\xf8\xc5\xa1\xb2\xe4\xe3\xb4\x15\x99\x66\xf4\x0a\x12\xd1\xc1\xf7\x9b\x49\xf9\x70\xce\xfe\x25\x3d\x02\x7b\xd4\xa5\xb7\x1f\x45\x0d\xe2\xf5\xae\x16\x71\x8f\x4e\xd3\x34\x40\x14\x77\x84\x6e\x8e\x7c\x4b\xa3\x7a\x3b\x3a\xef\xe4\x99\x5f\x86\x93\xd0\xbf\xbb\xbd\xd1\xff\x79\xcb\x97\x30\x0d\x9f\xcd\xc4\x8a\x95\xa6\xb2\x3e\xdd\x6d\x2e\x83\xd8\x6d\x7f\x68\x18\x9b\x4e\xdb\x13\xe4\x57\xe3\xbd\xdb\x70\x6c\xa0\x2f\xda\x35\xfc\x30\x05\xd6\x6e\x3f\x2f\x1e\x0f\xdd\xa9\xe1\x26\xd0\x61\x1a\x69\x63\xbd\xa2\x17\x8f\xb6\xea\x5c\xd3\xfe\x27\xb1\x6c\xf6\xea\xe1\xe7\x93\x1b\xdf\xf7\xbb\x56\xd4\xbc\xf8\x9c\xec\xa3\xfd\x74\x79\x72\xfc\xe9\xe1\xea\xf8\xf6\x7d\xc7\xe1\xd1\x3c\x40\x7f\x7d\xf6\x79\x76\x33\xbb\xbc\xd8\xd7\xea\x02\xc3\x7d\xd2\x61\x36\x69\xa1\x4b\xe2\x9e\x1b\x0a\x00\xdc\xb1\x3e\x86\xac\xcf\x73\x55\x4b\x79\xa5\xa5\xc8\x36\x34\xc7\xc8\x27\xbe\xb1\xd1\xe2\x7e\xcb\xd8\x63\xfa\xc1\x56\xe0\xed\x69\xb4\x3b\xe8\xa7\xe8\x21\x1f\xf6\xa8\xd6\xff\xdf\xb1\x2a\x86\x33\x09\xdf\x8a\xe3\xad\xa5\xa9\xd2\xb9\xf2\x6d\x8f\x3c\x3e\xeb\x62\x39\x32\x07\x5d\xd8\x4a\xa8\x9c\x4d\xfc\xce\x1e\x35\x60\xbc\x12\x9f\xd1\x50\xca\xd3\xc5\xfa\xe7\xe6\xbc\x29\x20\xac\x1b\xa8\x19\xbd\xc0\x26\xd0\xbc\xd5\x3f\xb6\x15\xcf\xe8\xae\x2d\x56\xed\x6d\xd8\x9a\x58\x7f\x2e\x67\x05\x1a\xe1\xf8\xd2\x33\xfc\xb3\xd6\xab\x15\x6f\xe9\xe9\x69\xae\xf8\x12\xf3\xdf\x36\x2c\x46\x30\x6b\xa6\xf3\x56\x68\xaf\x19\x91\xe4\x38\xb6\x47\xd5\x09\xa9\xbe\xda\x06\x7d\xe9\x0f\x81\x41\x32\x2f\x70\x8d\xa6\xd3\xb0\xd7\xb0\xba\xd0\x80\x9e\xbe\x9d\xe9\x5e\x1d\x5a\xfe\x93\xfe\xa5\x8f\x3d\x36\xe9\xb0\xdf\xba\x8d\x81\xbb\x25\xdb\x5f\x8c\xe7\x42\x8d\x69\x6c\xd8\x39\xf6\xf3\x44\xd3\x25\x7a\x77\xf7\x7d\xc2\xf1\x18\xde\xcd\xfe\x7d\x7e\x36\x81\x93\x82\xab\xa5\x5f\x0d\xd8\x6c\x71\xa1\xdd\x95\x41\x8b\xca\xb1\x17\x1a\x76\xd9\xc1\xba\xf4\x68\xa9\x9a\x15\xe8\xbe\xfd\xbf\xca\xb3\xaf\x9b\x5b\x01\x77\x72\x3e\xf4\x85\xfc\x1b\xb1\x75\xd2\x8c\x8f\xff\x43\x84\x75\x40\xf7\x03\xec\x7b\x21\xb6\x3f\xc8\xbe\x1f\x68\x31\x5e\x9a\xb0\x79\xa9\x4b\xe3\x83\x09\x30\xcc\x0a\x0d\x34\x4e\x68\xea\xe8\xfe\xaf\xa5\xd6\xf9\x7c\x83\xac\x13\x12\x00\xc3\x2f\x95\x36\xce\xa6\xa6\x56\x30\xa5\x2e\xd4\x9e\x74\xff\xa4\x84\x69\xef\x3f\x96\x83\xff\x06\x00\x00\xff\xff\x76\xad\x33\x75\x1e\x16\x00\x00")

func jsRunJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunJs,
		"js/run.js",
	)
}

func jsRunJs() (*asset, error) {
	bytes, err := jsRunJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRun_mockJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcd\x4a\x03\x51\x0c\x85\xf7\xf7\x29\x0e\x5d\x75\x68\x4d\x5d\x0a\xd2\x9d\x08\xba\xf6\x05\xee\x5c\xe2\xf4\xb6\x33\xc9\x90\xe4\x52\x41\x7c\x77\x19\xb4\x3f\xdb\x93\x2f\xe7\x7c\x69\xb7\xc3\xc7\xa1\x3a\xe6\x5c\x4e\x79\x60\x4c\x5a\x4e\x8e\x38\x30\xac\x09\x1d\x1d\x9f\x4d\x4a\x54\x15\x27\xbc\x05\x4a\x16\x18\xcf\x63\x2e\x37\x40\x0d\xc1\x1e\x55\x06\x4a\xe9\x82\xe3\x9c\x6b\xbc\xaa\xbd\x6b\xbf\x3e\x6a\xdf\xe1\x3b\x01\x45\xc5\x75\x64\x1a\x75\x58\x42\x92\x3c\x71\x97\x12\x60\x1c\xcd\x04\x61\x8d\xd3\xcf\x5d\x89\x35\x59\xc0\x2d\xf8\xaf\xe0\x9f\xbb\xfc\x62\x83\xd5\xc3\x0a\x1b\xbc\xe4\x60\x12\x3d\xaf\xbb\x6b\xc4\x54\x74\x9a\x6a\x90\xb7\xde\xc3\xaa\x0c\xeb\xc7\x2d\x9e\xba\xe7\x65\x80\xbf\x66\xb5\x70\xba\x49\x62\x7f\x67\x7c\xbd\x5b\x13\xec\x17\x8b\xf4\x1b\x00\x00\xff\xff\xf2\x0f\x52\xe5\x29\x01\x00\x00")

func jsRun_mockJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRun_mockJs,
		"js/run_mock.js",
	)
}

func jsRun_mockJs() (*asset, error) {
	bytes, err := jsRun_mockJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run_mock.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\xdf\x3e\x75\xe3\xd2\xfb\x04\x73\x10\x5d\x51\xf0\xe8\x4d\x44\x42\x52\xdd\x1d\x08\x55\x6d\x55\x7a\x7b\x17\xd9\x77\x97\x74\xdc\x71\x66\xf0\xe0\x31\xf9\xc9\x97\xbf\x3e\xea\xfe\x1e\x5f\x97\x64\x48\x86\xb2\x10\x74\x63\x26\xc5\xae\x7e\x5d\x13\xcf\xb0\xa0\x69\x2d\xa3\x0b\xc2\x26\x99\xc6\x2c\x73\xdf\x7d\x11\x1f\x6b\xf8\xee\xfd\xe7\x0f\x08\xa2\xd4\x0d\xce\x4d\x1b\x87\x92\x84\x31\x25\xa5\x87\x47\xe2\xd2\xd3\x80\x5f\x0e\x78\xf4\x0a\xaa\x17\x9f\x3c\xc7\x4c\x8a\x13\x98\x76\x3c\x5c\x5c\xf5\x83\x73\xc0\x6b\x97\x59\xc8\x90\xf8\x28\x64\x41\x56\xaa\x87\x7d\x49\x61\xc1\xd4\x0f\xb5\x2a\x3d\x51\xd8\x0a\x45\x98\xa0\x2c\xbe\x60\x27\x04\xcf\xf0\x21\x90\x59\x43\xd5\xd7\xa2\x69\x4e\xec\x73\xfb\x1f\x7b\x2a\x8b\x6c\x05\x4a\x3f\xb7\xa4\x75\x84\x5e\xf4\x0e\x4a\x3e\xe7\xe7\x3b\xf8\x9c\x65\x4f\x3c\x0f\xc7\xdb\xcd\x48\x51\xa4\xc1\x56\x6f\x4d\x50\x03\x79\x95\x8d\xe3\xe8\x00\x7a\x5a\x45\x8b\x8d\x3f\x5a\x70\x02\xd5\x49\xd2\x84\xfe\x8d\xd2\x9c\xac\x90\x1e\x83\x5a\x73\x01\x5c\x99\x64\xf9\x03\x5c\x9a\x07\x43\xa4\x29\x31\xc5\xee\x10\x02\x28\x95\x4d\xd9\x01\x2f\xf5\x7c\x4d\xec\x2f\xa5\x0e\xee\x06\x7d\x84\x86\x2c\x3e\x52\x1c\xf1\xb1\xcd\xdb\xe1\x2d\x68\x2c\xcf\x2b\x0d\xe7\x9e\x97\x98\x6f\x2d\xfc\xfe\x5f\x6d\xcf\x7d\x28\x62\x12\xbd\x85\xdf\xb6\xaf\x7b\x30\x55\x43\xff\xf8\xaf\xe6\x53\x4f\x83\x7b\x71\xee\x55\xe9\x79\x91\x70\xfa\xbb\x54\xee\x77\x00\x00\x00\xff\xff\x0b\x8b\xea\xff\xb1\x02\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsWaitgroupJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x8e\x9c\x30\x10\x86\x7b\x3f\xc5\x5f\x82\x14\x99\x27\xd8\x32\x8a\x92\x22\x4d\x22\xa5\x88\x52\x18\x18\x62\x73\xc6\x83\xec\xe1\xd8\xd5\x89\x77\x3f\xd9\xbb\x2c\x48\x57\x5e\x61\xad\xd6\x78\xbe\xff\x9b\xb1\x9b\x06\x7f\x8c\x93\x6f\x91\x97\x19\xab\x71\x92\x30\x70\xc4\xb4\x78\x71\xb3\x27\x8c\xdc\x26\x08\x63\x70\xc1\x25\xab\xf1\x5d\xb0\x3a\xef\x21\x36\xf2\x0a\x13\x40\x31\x72\x54\x4d\x03\x93\x90\x98\x43\xfe\x35\xb9\x0c\x91\x66\x8e\x92\x9e\x87\xb4\x1a\x96\xd0\x89\xe3\x70\x44\x56\x35\xde\x14\x20\xd6\x25\x5d\xa2\x2e\xf8\xfb\x4f\x29\x20\x03\xfb\x3e\xaf\x8c\x0b\xb4\x16\xa4\x30\xc4\x52\xf1\xfc\x9f\xcb\xf7\xd2\x7c\xf4\x82\x1d\x5f\x8d\xdc\xde\xb9\x27\xb2\x9e\x97\x64\xcb\x17\x05\x6c\x8f\x88\xb8\x84\xbc\x12\xe8\x95\xe2\xad\x44\xb8\x50\x22\x0a\xfe\x0b\x4c\xe8\xf3\xdf\x70\x1a\x8d\x58\x9a\xb2\x48\xc7\xd3\xec\x49\x48\xef\x12\x19\x76\x92\xf8\x68\x30\x70\xfc\x6a\x3a\x5b\x3d\xc7\x50\x8d\xfb\x21\x60\xd4\xad\xe9\x5e\x72\x6c\xe8\xab\xba\x6c\x6e\xf5\x01\xc8\xf9\xd5\x59\x3d\x6f\x3c\xac\x96\x20\xce\xdf\x6f\xca\x44\x3a\xc4\xf0\x93\x85\x20\xd6\x48\x61\xa0\x67\x4a\x08\x2c\xa5\xed\xdc\x64\xb1\xc2\x6f\x4b\xb7\x3b\x73\x5a\x92\xa0\x25\x24\x31\x51\xa8\x07\x5d\x85\x62\x30\xde\xdf\x34\xaa\x5f\x44\xc7\xbd\x95\x66\x39\xe2\x07\xb7\x27\xef\x5a\x9d\x6c\x3f\x35\x8b\x67\xbb\x8f\x29\x6c\x6a\x53\x8a\xae\xe5\x41\xe9\xe3\xc1\x5e\x0e\x23\xf5\x1e\x00\x00\xff\xff\x60\x6f\x0e\xe7\xca\x02\x00\x00")

func jsWaitgroupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsWaitgroupJs,
		"js/waitgroup.js",
	)
}

func jsWaitgroupJs() (*asset, error) {
	bytes, err := jsWaitgroupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/waitgroup.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/event.js": jsEventJs,
	"js/job.js": jsJobJs,
	"js/mock8s.js": jsMock8sJs,
	"js/run.js": jsRunJs,
	"js/run_mock.js": jsRun_mockJs,
	"js/runner.js": jsRunnerJs,
	"js/waitgroup.js": jsWaitgroupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"event.js": &bintree{jsEventJs, map[string]*bintree{}},
		"job.js": &bintree{jsJobJs, map[string]*bintree{}},
		"mock8s.js": &bintree{jsMock8sJs, map[string]*bintree{}},
		"run.js": &bintree{jsRunJs, map[string]*bintree{}},
		"run_mock.js": &bintree{jsRun_mockJs, map[string]*bintree{}},
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
		"waitgroup.js": &bintree{jsWaitgroupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

