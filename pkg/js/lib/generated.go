// Code generated by go-bindata.
// sources:
// js/event.js
// js/job.js
// js/mock8s.js
// js/run.js
// js/run_mock.js
// js/runner.js
// js/waitgroup.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsEventJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4a\xc6\x30\x10\x85\xf7\x39\xc5\xdb\x55\x41\xd2\x13\x74\xe1\x42\x70\xed\x0d\xa6\xc9\xd4\x04\x62\x52\x33\x53\x6b\x91\xde\x5d\x42\x94\x9f\xf2\xef\x86\x79\x8f\xef\x9b\x19\x47\xbc\x7c\x71\xd6\x57\xca\x3e\x71\x85\x67\x71\x35\xce\x2c\xd0\xc0\x48\x51\x14\x65\x01\xb7\x4a\x5b\x91\xe2\xd9\x45\x8f\x28\xa0\x9d\x2a\xa3\x2c\xd6\x2c\x5b\x76\x1a\x4b\xbe\x90\x1e\x1e\xf1\x63\x80\xce\xaf\x47\x47\x20\xfc\x69\xde\x59\xbb\x61\xa5\x4a\x1f\x18\x3c\x29\x0d\x4f\xd8\x43\x74\xa1\xc1\x5b\x34\x17\x7f\x34\x79\x9b\x2b\x7f\x6e\x2c\x6a\x0d\xa0\x21\x8a\x5d\x37\x09\x98\xf0\x6f\x6e\xb2\xf3\x96\xa5\xf4\xd6\xfb\x77\x95\xd3\x18\xfe\x5e\x4b\x55\xb1\x97\xb7\xa7\xcb\xed\xe6\x37\x00\x00\xff\xff\x38\xd9\xc5\x1d\x16\x01\x00\x00")

func jsEventJsBytes() ([]byte, error) {
	return bindataRead(
		_jsEventJs,
		"js/event.js",
	)
}

func jsEventJs() (*asset, error) {
	bytes, err := jsEventJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/event.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsJobJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\x41\x6f\x1b\x37\x13\xbd\xef\xaf\x78\x9f\x4e\xd2\x57\x65\xd7\x41\xda\x1e\x62\xe8\x60\xd4\x0e\x90\x14\x08\x82\xc4\x4d\x0f\x45\x11\x70\xb9\xb3\x5a\xc6\x5c\x72\x4b\x0e\x65\x0b\x81\xff\x7b\x31\xa4\xb4\x96\x95\xf4\x62\x83\x23\xce\x9b\x37\x6f\xde\x70\x9b\x06\xb7\x03\xa1\xa3\x5e\x25\xcb\x30\xa3\xda\x12\x4c\x44\x64\xaf\xef\x90\xda\xe4\x38\xe1\xe5\xaf\xf5\xc5\xcf\xf8\x09\xa3\xba\x23\x28\xd7\x61\x6b\xb8\xae\x76\x2a\x40\x69\xd3\xbd\xcd\x39\x1b\x2c\xe4\xf0\xa2\xa4\xbc\xb6\x8a\x29\xf2\xa2\xaa\x9a\x06\x1f\x82\x67\xcf\xfb\x89\xd0\xfb\x80\x77\xbe\xad\xab\x3e\x39\xcd\xc6\x3b\x39\x2d\x9d\x1a\x69\x0d\x56\xf1\x2e\xae\xf0\xad\x02\x04\x79\xdc\x63\x03\x1e\x4c\xac\x2a\xc0\xf4\x58\xfe\x8f\x1e\x26\x1f\x38\xd6\x5f\x68\x47\x8e\xcb\x4d\x80\x87\xe0\xef\xb1\xc8\x31\x38\xcf\xe8\x7d\x72\xdd\xa2\x02\x1e\x25\xb3\x69\xf0\x5e\x8d\x84\x7b\x63\x2d\x5a\xd2\x7e\x24\xf0\x40\x98\x02\xf5\xe6\x21\x13\xca\x47\xdf\x35\xda\xbb\xde\x6c\x47\x35\x41\x08\xc5\xba\x42\xae\x5f\xcb\x09\x9b\x1c\xbc\x2c\x88\xb7\x42\x55\x54\x92\x54\x6b\x22\xc3\xf7\x85\x3f\xd8\x23\x24\x57\x8b\xa8\x7b\xa8\x40\xa0\x07\xd2\x89\xa9\x83\x71\x88\xf4\x4f\x22\xa7\x09\xc6\x45\xd3\x11\x7c\x5f\xf0\x14\xe2\x40\xd6\x62\xd9\xb4\xc6\x35\x71\x58\xcd\xb5\x0b\xe8\x06\x7f\xfd\x7d\x79\x90\xe1\x44\xa6\xb3\x3b\xf9\xff\x49\xdf\x57\xd0\xde\x5a\x2a\x3a\xfb\x3e\x37\xd0\xec\x94\x4d\x84\x49\x99\x10\x25\x46\x6e\x67\x82\x77\xa3\x88\xb7\x53\xc1\xa8\xd6\x9e\x74\x4e\x6e\x87\x0d\xbe\x3d\x5e\x1e\x10\xc5\x29\xc5\x21\x62\x02\xe5\xe0\x27\x01\x57\x16\xac\xb6\x73\x96\x39\xf8\x61\xf6\xc6\xe5\x4c\x48\xc4\xf5\x3d\x6e\xde\x7f\xfe\xf2\xf9\xea\x63\xd1\x39\x63\x7d\x22\x1d\x88\x0f\xc2\xe3\x76\x30\xb1\x4c\x6c\xf2\x53\x12\x2b\x65\xa5\x4f\xc8\x16\xc0\x23\x63\xdc\x1b\x1e\xf2\x95\xd2\x5e\xb6\x80\x08\x2e\xa1\x98\xa1\xeb\x63\x07\x47\x64\xbf\xa3\x10\x64\x08\x0a\xa3\x62\x3d\x18\xb7\x95\x02\xd9\x7b\x7d\xf0\xe3\xb1\xa2\x70\x9e\x5b\x2b\x58\x31\x8b\x72\x68\x6a\xf2\x5d\x36\x98\xec\x0c\x31\xda\xbd\xcc\x7f\xb9\x5a\xe7\xb6\xb4\x77\xac\x8c\x2b\x46\xc9\x3e\x12\xa3\x14\xbf\x41\x07\x52\x4c\xdd\x0c\x7e\x40\x3a\xe0\x86\x24\x7e\x71\x5d\xcc\x3f\xe2\xab\x6f\xc5\x5b\xbf\xa7\x96\x82\x23\x3e\x19\x92\x5c\xdc\xe0\xb8\x50\xcb\x67\xd6\x68\x95\xbe\xdb\x06\x51\x63\x79\xb6\x3d\x4f\x77\xee\x95\xe1\xe5\xaa\xca\x81\x40\x9c\x82\x2b\x6b\x07\x94\xb9\x9f\x01\xfd\x67\xad\xa3\x10\x9b\x2c\x80\x84\xd6\x38\x2b\x7a\x39\x83\x36\x0d\xa4\xee\x1f\x8e\x8d\xbd\xf6\x2e\xcb\x37\x50\x28\x2f\x84\x14\xbb\x57\xa1\x8b\xd0\x7e\x9c\x14\x9b\xd6\x58\xc3\xfb\x35\xda\xc4\xe8\x3c\x45\xd9\x73\x19\xd8\x61\xa8\xd7\x37\x1f\x3e\xde\xfc\x76\x75\x7b\x73\xfd\x1a\x7f\x96\x3d\x47\xa0\xd1\xef\xa8\x43\x97\x82\x4c\xf6\xca\x4e\x83\xaa\x4e\x3a\x7e\xaa\x7c\xd6\xcf\x8f\x74\x38\x61\x9c\xff\x44\x24\x49\x87\xca\x73\x1c\x24\xb0\xf8\x94\xb4\x26\xea\x28\x3f\x3d\x4d\xf3\x94\xb1\x5c\x41\x2b\x27\x9c\xb4\xb2\x96\x3a\x78\x87\x27\x39\xe5\xdc\x7e\x25\xcd\xb1\xfe\x3e\xcf\x44\xa8\xc4\x7e\x54\x6c\x24\x77\x7f\x44\x68\xf7\xf3\xe8\x4f\xb3\xde\xf6\x99\x4f\x21\x1f\xb1\x78\xa3\x8c\xa5\x6e\xb1\x2e\x0e\xca\x0f\xa5\x6c\x1b\xe8\x41\x53\x5e\xdc\xfa\x79\x5e\x72\x31\xeb\x3f\xfa\x20\x0b\xa7\x1c\x5e\xfe\x82\xd1\xb8\xc4\x14\xb1\x7c\x75\x71\x81\xff\xe3\xd5\x8b\x48\xda\xe7\xed\x62\x0a\x3b\x65\xe3\x6a\x3d\x43\x83\xcd\x48\x3e\xf1\xf3\x0a\xb3\xe6\x3f\xb2\x8e\xc4\xdf\xf8\x20\x9f\x81\x71\xff\x9d\x61\x8a\x5f\x1e\xab\xea\x18\x7f\xe7\x5b\x6c\xe4\xa3\x51\xfd\x1b\x00\x00\xff\xff\x5d\x97\x1d\x50\xb9\x06\x00\x00")

func jsJobJsBytes() ([]byte, error) {
	return bindataRead(
		_jsJobJs,
		"js/job.js",
	)
}

func jsJobJs() (*asset, error) {
	bytes, err := jsJobJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/job.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsMock8sJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8a\xdb\x30\x14\x85\xf7\x7e\x8a\x43\xe8\x62\x02\xc1\x43\xb7\x81\xac\x0a\xdd\xb5\x94\x0e\x74\x53\x4a\xb9\x91\x8e\x13\x75\x6c\xc9\xe8\x67\x3a\x50\xfc\xee\x45\xae\xa5\xd8\xd9\xb4\x8b\x6e\x94\x9b\xfb\xf3\x59\xe7\xea\x3c\x3e\xe2\x29\x3a\x4f\x0c\x4e\x3d\x63\x74\x1a\x9a\x9d\xb1\x26\x1a\x67\x03\xae\xf4\x84\x04\xec\xac\x0c\xdc\xe1\x88\x37\x9e\xc1\x25\xaf\xd8\xbc\x88\x9f\x67\x3e\x39\x1d\x70\xc2\xaf\x66\x6a\x9a\x0a\x53\xce\x76\xe6\x32\xc8\xf8\x4f\x88\x77\x73\xf7\x87\xdc\xbd\x80\x72\xe5\x39\x9d\xe9\x2d\x23\xff\x64\x81\x9f\x26\x5e\x3f\x3e\x1d\xd1\x25\xab\xf2\xf5\x1e\x6c\xd8\xcf\x05\xc0\x33\x26\x6f\x17\x98\x67\x03\x4c\x05\x53\x72\x0b\x44\x39\xcf\x2f\x6f\x8f\xcb\xdc\xe8\x74\x09\x81\x0b\xe3\x1a\x2e\x03\xf7\xb5\x56\x3f\xf1\xbd\xed\x8c\xd5\x0f\x45\xf9\xe1\x36\xc0\x7e\xd3\x5f\x27\xd8\xb3\x1d\x18\x45\x4b\x94\x36\x53\x71\x3a\x21\xff\xd6\xd6\x69\xbf\x84\xd3\x61\x09\x94\xa7\x44\xae\x6e\xa3\xd9\xad\xe1\x79\xd1\x49\x29\x52\x53\x1f\xf0\x39\x59\x6b\xec\xe5\x00\xb1\x1a\xef\xc5\xf4\xd4\x10\x4f\x04\x37\x10\x2f\xd2\x1b\x9d\xcf\xc4\xd0\x56\x80\x66\xd7\x86\x28\x31\xcd\xcb\xc5\x78\x95\xc0\x23\x76\x15\xba\xc3\x54\x7b\x8b\xd6\xaf\x79\xa8\x2a\xe9\xe5\xcc\x3e\xb4\x3f\xdc\x39\x6b\xf9\x86\x53\x66\x36\xf7\xeb\xca\xb9\x45\x5b\x53\xce\x59\x25\x5f\x23\x6d\xc8\x26\x2b\x0f\x50\x3d\x73\x7b\x91\xbf\xad\x61\x6b\x9e\xff\x76\xbf\x6c\x1d\xbe\x8e\xce\xc7\xd0\xae\x2c\x5e\xc2\x4d\x6d\xe3\xdd\x6d\xa2\xf6\x6d\x9c\x7c\xfb\x73\xc7\x99\x2d\x5a\x1d\xfc\x3b\x00\x00\xff\xff\xc6\x15\x83\xe4\x98\x03\x00\x00")

func jsMock8sJsBytes() ([]byte, error) {
	return bindataRead(
		_jsMock8sJs,
		"js/mock8s.js",
	)
}

func jsMock8sJs() (*asset, error) {
	bytes, err := jsMock8sJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/mock8s.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x7b\x6f\x1b\xb9\x11\xff\x5f\x9f\x62\x8e\x38\xe4\x56\xc8\x7a\x95\xe0\x80\xe2\xa0\x54\x28\x7c\xb6\x93\x28\x89\x1f\xb5\x7d\x69\x0b\xc3\x30\xa8\xdd\x91\x96\x11\x97\x5c\x90\x5c\x39\x6a\xce\xdf\xbd\x18\x92\xfb\x90\x6d\x25\x68\xd1\x7f\x92\x15\x39\xcf\xdf\x3c\xe9\xc9\x04\xae\x4b\x04\xa1\x1c\x1a\xc5\xa5\x85\xa5\x36\x60\x1a\xa5\x84\x5a\x81\xe3\x76\x6d\x33\xb8\x2e\x85\x85\xaa\xb1\x0e\x16\x08\x52\xf3\x02\x0b\x58\xe0\x52\x1b\x04\xae\xb6\xa0\x97\xe0\x4a\x1c\x4d\x26\xa0\x17\x5f\x30\x77\x16\x5c\xc9\x1d\x34\x16\x49\x50\x32\xce\x46\x93\x09\xdd\x1e\x4a\x09\x1f\x9b\x05\x1a\x85\x0e\x2d\x1c\x5e\xcc\x21\xe7\x52\x5a\xb0\xa5\x6e\x64\x11\x84\xe7\x5c\x8a\x7f\x63\x01\x25\x1a\xcc\xe0\xdc\x95\x68\xa0\xd2\x45\x23\xb1\xa3\x53\xda\x91\x38\xe2\x85\x5f\xd6\x9d\xc0\x5f\xa0\x10\x06\x73\x27\xb7\xd9\x88\xee\xef\xb9\x70\xe0\xf8\x1a\x2d\x70\xf8\xa2\x17\x07\x52\xac\x31\x9a\x08\x5c\x15\x9e\xc0\x42\xa3\x9c\x90\x20\x1c\xd8\x26\xcf\x11\x0b\x0b\xda\xc0\x92\x0b\x69\xb3\xd1\xb2\x51\xb9\x13\x5a\x79\xd2\xb7\xda\x7c\xd0\x8b\xe4\x8b\x5e\xa4\x80\x63\xf8\x36\x02\xd8\x70\x03\xd5\x16\x66\x24\x7e\x34\x02\x8f\x5d\x42\x87\x02\x66\xf0\xea\x0d\x08\xf8\x2b\xfc\xfa\x8a\x3e\x5e\xbe\x0c\x1c\x00\xb9\x56\x56\x4b\xcc\xa4\x5e\x25\x2c\x2f\x31\x5f\x13\xd2\xd6\x71\xd7\x58\x82\x92\xc1\x4b\xa8\xb6\x59\xad\x8b\x33\x5e\xe1\xd8\xf3\x90\xc8\x35\xcc\xa0\x77\x36\xbb\x17\xae\x3c\xbb\x4a\x30\x1b\x9c\x29\x5e\xa1\xad\x79\x3e\xe0\xaa\xb6\xb5\x2e\x88\x33\xcb\xb5\xc1\xcf\xaf\x49\x6e\xb6\x42\x97\x0c\x55\x3c\xb1\xeb\xc3\xd5\xf9\x59\x66\x9d\x11\x6a\x25\x96\xdb\xc4\x0b\x19\x8f\x9f\x9a\x7f\xa1\x8b\x47\xf6\xc2\x4b\x60\x20\x2c\x08\xe5\x5d\xc2\x78\x4d\x5a\x83\x8b\x59\x5d\x72\xdb\xea\x14\x4b\x48\x9e\x5e\xc2\x6c\x06\xec\x2d\x17\x12\x0b\xd6\xa2\x06\xe0\x4a\xa3\xef\x61\x9f\xca\xa5\x27\x07\xa7\x29\xe5\xe8\xbf\x5c\x57\xb5\x44\x0a\x1e\x7b\xe3\x25\x3c\xfc\x48\xe3\x55\x88\xff\x8e\x52\x83\xae\x31\x0a\x9c\x69\x70\x20\x64\x32\x81\x2b\x89\x58\xfb\x78\x73\x28\x70\x29\x14\x16\xc0\x2b\xdd\x28\xe7\xcb\x41\x54\x98\x79\x52\x4b\x74\xc9\xaf\x84\x1d\xf1\x46\x27\xe8\xbe\x00\xdd\x38\x9f\x58\x14\x7f\x92\x54\x3f\xef\x5a\xf0\x89\x8d\x1e\x7c\x56\x93\x7b\xa6\x51\x31\xa7\x83\x05\x0a\x70\x83\xca\x41\x82\xe3\x0c\xe6\x0e\x0a\x8d\x96\xaa\x24\x94\x00\x91\xb8\x12\x3d\x79\x0f\x0c\x52\x55\x86\xca\x16\x24\x4c\xea\xfb\x03\x89\x1b\x94\x50\x1b\x51\x09\x27\x36\x38\xc8\x7f\xaa\xe3\x61\xe2\x4f\x26\xf0\xf3\x87\xf3\xdf\x0f\x7e\xbe\x9e\x9f\x9e\x1c\xfc\xfc\x6e\x7e\x7d\xf5\xfe\x30\x16\xc4\xfa\x37\xeb\x6d\xf7\x55\xe1\x73\x92\xdc\x38\x20\xcf\x8e\xb9\xc3\x4c\xe9\xfb\x64\xdc\x1d\x61\x96\xeb\xaa\x12\x2e\xb3\xcd\x22\x64\x5c\xf2\x2a\x85\xdf\xc6\x6f\xa2\xb4\xbc\x8a\xc2\xa2\xd8\x78\x4c\x1d\x0a\xcd\xb3\x57\x79\x05\x33\x50\x78\x7f\x74\x9a\x04\xe6\xf1\x0e\x4f\xb8\xbc\xf4\xdf\x17\xba\x48\x7a\x49\xa9\x37\x58\x54\x7c\x15\xf2\x33\xdc\x64\x15\x3a\x5e\x70\xc7\x33\xc9\x17\x28\x6d\xf6\x45\x2f\xd4\xae\x7f\xfb\x69\x17\x28\xb5\x5a\x59\xa7\x61\x06\x98\x19\xac\xb5\x67\xa0\x2f\xc9\x73\x4c\xd8\x84\xa5\x04\xc4\x78\xbf\x88\x00\x8f\xe7\x0f\x9f\xa3\x80\xff\x61\x51\x00\xaa\x0d\x79\x66\xb3\xe8\x21\xaa\xcd\x67\x6e\x2c\xcc\xe0\xe6\x96\xc8\xee\x32\xe4\x79\x49\x91\xcb\x50\x6d\x52\x68\xe3\x99\x6c\xb8\x4c\x61\x8d\xdb\x36\xd3\x23\x63\x56\x37\xb6\x4c\xbe\x91\x89\x53\xba\x4e\x61\xc3\x65\x83\x53\xfa\xef\xc1\x87\x84\xfe\xed\xf5\x5b\xcc\x0d\x3a\x0b\xdc\xee\x98\x32\x50\x1b\x29\xf6\xa8\xee\xaa\x49\x57\xd8\x09\xbb\x47\xc0\xaf\xb5\x14\xb9\x70\x72\x0b\x0b\xa9\xf3\x75\xd6\xd5\xee\x5d\x96\x6b\xe5\xb8\x50\x36\xb9\x61\x81\x83\xdd\x7a\x33\xc7\x8f\xab\x36\x16\x6c\xab\xe3\x1d\xba\x4e\xc5\xd2\xe8\xca\xd7\xc4\x4a\x6c\x50\xd1\x71\xcc\x9f\xc7\x48\x44\x81\x3d\x20\xf1\xc0\xc3\xf2\xd6\xe8\x6a\xda\x29\x85\x28\xfd\x23\x6e\x2f\x71\x39\x85\x88\x22\x66\xb5\xd1\x34\x72\xe6\x85\x77\x3b\x60\x19\x79\xc2\xff\x8f\x91\x3d\xd6\x84\x81\x75\x42\x4a\xb8\xe7\xca\x51\xd5\xf2\xa2\x00\x47\xc5\xea\xb4\x37\xdc\x67\x69\x37\xf0\xfe\x06\xff\x28\x85\x44\x9a\x62\xbe\x98\x2d\xe6\x8d\x11\x6e\x1b\xe4\xb9\x52\xa8\x55\xea\x1b\x02\x2f\x0a\xea\x36\xc2\xc1\xbd\x1f\xa5\x06\x6d\x23\x1d\x75\xeb\xc6\xa2\x09\x4d\x63\x81\x44\xc2\x17\x12\x49\x19\xe1\x40\x53\xde\x0b\x09\xf2\x9a\xda\x3a\x83\xbc\xa2\xa5\x21\x58\x43\xfd\x74\x14\x02\x14\xb3\xdc\xda\xf2\xe3\xbe\xf4\xda\x01\x95\x1d\x1e\xcd\x8f\xef\x2e\x4f\x2e\xce\xef\x3e\x9e\xfc\x8b\xed\x00\x3c\x85\x1d\x69\x11\xac\x51\x8c\x6a\xcc\x41\xa7\xeb\xd8\xb8\xba\x14\xa4\x8d\xc6\x62\xd8\x58\xf4\x06\x8d\x11\x45\xd8\x54\xb8\x73\x58\xd5\x1e\x50\x8b\xce\x9b\xee\x15\xd9\x08\x94\x06\xab\x2b\xf4\xae\x02\x4a\xeb\x7b\xf8\xae\xed\xad\xd5\x47\x9f\xce\xcf\x4e\xee\xfe\xb8\xfc\xc4\xd2\x47\xb6\xe6\x52\x2b\xfc\xe3\xf2\x53\xb0\xf4\x79\xee\xab\xab\xf7\xcf\xf2\x5a\x5b\xfe\x80\xf3\xdd\xfc\xfa\x59\xce\x95\x70\x3f\xe0\x7c\x7f\x72\x78\x7c\x77\x74\x7e\x7a\x3a\xbf\xbe\x9b\x1f\x0f\x05\xc4\x0e\xf3\x30\x68\x42\xb6\xc6\xbc\xad\x34\x34\xf6\xe6\xd5\x2d\x35\x10\x6a\x42\x41\xf6\xa8\x5d\x7e\x68\xe2\x5d\x70\x57\xc6\x6e\xd8\xff\xfe\xf3\x4f\x60\x13\x6b\x72\x36\x08\x55\xae\xd5\x52\xac\xa0\xe2\x35\x6c\xb4\x6c\x86\x8d\xd3\x2b\x0c\x87\xbe\x7d\xf9\x58\xb7\xb6\x87\x36\x9e\x46\xfe\x53\x5e\x77\xd5\x15\xa7\xc3\xc3\x43\xba\xc3\xc0\x36\xb9\x3d\xb0\xa2\xc0\x9c\x1b\x96\x02\xc5\x7c\x7b\x2c\xcc\x14\xbe\x3d\x74\x13\x3c\xed\xa9\x45\x61\x2c\x67\x69\x2c\xe0\x29\x7c\x8b\x5f\x67\xfe\x3a\x76\x07\xf0\xac\xb7\x6f\xbe\x0b\x52\xf0\xe0\x94\x50\xd8\xef\x46\x07\xd2\x14\xd8\xa4\xd4\x7a\xcd\xbe\x6f\xfe\x80\xbe\xfb\xfc\x9e\x1b\x4f\xe4\x4f\xac\x2d\x59\x0a\x06\x79\x71\xae\xe4\x76\xea\xf7\x99\xe8\xcd\xa0\x90\x4a\x84\xa8\xb4\x9d\x27\xf1\x27\xcc\xda\xaf\xab\x1a\xf3\x04\xd3\x18\xda\x14\x76\xd6\xcf\x4d\x6e\xaf\x02\xd9\x38\x8a\xbd\x3e\x3f\x3e\x9f\x52\xd8\x36\x68\x5c\xd7\xbf\xb8\x02\xa1\x84\x83\x0e\x3a\xa0\x65\xd6\x3f\x0d\xe0\x75\xf6\x97\xc0\x3a\xc4\x98\xa8\x8f\x3a\x9c\x09\xd7\x68\xce\xed\x33\x63\x93\x2b\xa5\x1d\xa7\x51\x63\x6f\x18\x35\xa6\x05\x3a\x3e\x34\x53\xe8\x09\x09\x3c\xe8\x23\xc7\x6e\x61\x06\xec\x86\xd6\x91\x47\x9b\x6f\xd4\xe3\xd7\x95\xdb\x36\x95\x3f\x68\xa1\x3c\x5a\xfe\x79\x44\x1e\x55\x7c\x8d\xc0\x69\xaf\xa0\xf5\xaa\xe2\xaa\x98\x0e\x01\xf0\x5b\x56\x7c\xbc\xd4\x46\x2f\xf8\x42\x6e\x61\x85\x0a\x0d\x6d\xc8\x1c\x6c\x89\x52\x82\xcd\x8d\xa8\x5d\x4a\x7b\xb3\xf1\x3b\x21\xa1\x12\xc4\xf4\x5d\xc9\xbf\x61\xa8\x77\x1d\xa0\x86\x5a\xd4\x48\x8b\x6f\xea\x9f\x33\x8d\x25\x02\x85\xf7\x52\x28\xa4\x0d\xdc\x3a\xe4\x05\xad\xa3\x2f\x5e\xb4\x01\xa5\xb5\xa8\xa2\xf7\x00\xf3\xce\x50\xc3\xa6\xb2\xf5\x8e\xb4\xcd\xba\xa3\xe9\x6e\xb2\x2f\x5a\xa8\x84\xc1\x8b\x17\xc0\xba\xf6\x9b\x57\x19\xe1\x7d\xc3\x2a\x2e\x54\x66\x4b\x0f\x62\xe0\x6d\xbb\xc3\x7f\xf7\x64\x19\x3d\x7a\x5c\x1c\x19\xe4\x1e\x87\x50\xf6\xd4\x35\x28\x42\x79\xd5\xc7\x5a\xc5\xed\x6e\x9d\xe1\x57\x87\xca\x52\xd0\xb3\x8e\x3c\xcb\x49\x02\x26\x79\x35\xde\x2b\xbb\xdd\xb9\xf7\x97\x74\xaf\x63\xf0\x82\x8a\x92\x03\xd7\x13\xe9\xf1\xf9\x9c\x65\x19\x0b\x8b\x64\x78\x45\xf4\x9b\xe6\x1b\x5a\xe6\xbb\xe5\xfa\x51\x6d\xf9\x37\x70\x1a\x26\x7c\xff\xcc\xf4\x3f\xaf\xf9\x0a\x66\xe1\xb3\xdd\x69\xb1\xd6\xd4\xf8\x67\x8f\xc7\x4f\x1b\xde\x9f\x5a\xc6\x36\xbc\x03\x41\x8c\xe7\xa2\x98\x0c\x9a\xcd\x54\x72\x87\xd6\xb1\x36\xc6\x4f\x06\x3a\xfc\x44\xa9\xd3\x8a\x7a\xa2\x3c\xcc\xaf\x96\xdb\x77\x90\x1a\x73\x98\xb5\x99\x15\xfa\x14\x69\x3d\xd8\x69\x71\xed\x92\x30\x8d\x1d\x73\xd0\x0a\x3f\x1f\x5d\xf9\xed\xa0\x1f\x58\xad\xd6\x87\xf4\x39\xda\x4f\xe7\x47\x87\x9f\xee\x2e\x0e\xaf\xdf\xf7\x1c\x1e\xd1\x3d\xf4\x97\x27\x9f\xe7\x57\xf3\xf3\xb3\xe7\x06\x62\x60\xb8\x4d\x7b\xdc\xa6\x1d\x7c\x69\x7c\x0d\x87\x6a\x87\x1b\x36\xc4\x91\x0d\x79\x2e\x1a\x29\x2f\xb4\x14\xf9\x96\xb6\x1d\x79\xcf\xb7\x36\x7a\x3c\x9c\x16\xcf\xb8\xbe\x77\x0a\x78\x7f\x5a\xeb\xf6\xc6\x2a\x46\xc9\xa7\x34\xaa\xcd\xff\x77\xf9\x8a\x29\x4d\xc2\x77\x72\x79\xe7\x69\x55\xeb\x42\xf9\x89\x47\x11\x9f\xf7\xf9\x1c\x99\x83\x2d\x6c\x2d\x54\xc1\xa6\xfe\x65\x1f\x2d\x60\xbc\x16\x9f\xd1\x50\x39\xd3\xc5\xe6\x75\x7b\xde\x16\x3e\xeb\xd7\x6e\x46\x1a\xd8\x14\x5a\x5d\xed\x71\x78\x3d\xb1\xe1\x7e\xce\x4a\x34\xc2\xf1\x15\x91\xb3\xbf\x37\x7a\xbd\xe6\x9d\xcb\x24\x9c\x2b\xbe\xc2\xe2\xf7\x2d\x8b\x39\xca\xda\x2d\xbd\x13\x3a\x98\x2d\x24\x39\xae\xef\xd1\x38\xc2\x62\x68\x98\x41\xdf\xc9\x43\xe8\x49\xe6\x19\x6e\xd0\x74\x1a\xd9\x60\xfe\xf4\xc1\x87\x81\xbd\xbd\x73\xde\x1c\xd3\xa8\x81\xb9\x00\xcc\x67\x17\x9b\xf6\xe8\xee\xdc\xc6\xd4\xdc\x91\xed\x2f\x26\x0b\xa1\x26\xb4\x10\x3c\x3a\xf6\x9b\x42\xdb\xcc\x07\x77\xb7\x43\xc2\xc9\x04\xde\xce\xff\x79\x7a\x32\x85\xa3\x92\xab\x95\x7f\x22\xb0\xf9\xf2\x4c\xbb\x0b\x83\x16\x95\x63\x4f\x2c\xec\xf3\x9f\xf5\x05\xd0\x51\xb5\x4f\xa1\xdb\xee\xef\x2b\x0f\xbe\x3b\xee\xa4\xd4\xd1\x69\xe2\xdb\xf0\x77\xb2\xe7\xa8\xdd\x0d\xff\x87\x1c\xea\x81\x1e\xa6\xd0\xf3\x49\xf4\xe3\x44\x8a\xf9\xd0\xa6\xc5\x53\x5d\x2d\xc6\x53\x60\x98\x97\x1a\x68\xfa\x6b\x1a\xae\xfe\xd7\x4a\xeb\x62\xb1\x45\xd6\x0b\x09\x80\xe0\xd7\x5a\x1b\x67\x33\xd3\x28\x98\xd1\x2c\xe9\x4e\xfa\x3f\x4e\xc2\x6c\xf0\x97\xca\xd1\x7f\x02\x00\x00\xff\xff\x63\xfe\x12\xaf\xdb\x15\x00\x00")

func jsRunJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunJs,
		"js/run.js",
	)
}

func jsRunJs() (*asset, error) {
	bytes, err := jsRunJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRun_mockJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcd\x4a\x03\x51\x0c\x85\xf7\xf7\x29\x0e\x5d\x75\x68\x4d\x5d\x0a\xd2\x9d\x08\xba\xf6\x05\xee\x5c\xe2\xf4\xb6\x33\xc9\x90\xe4\x52\x41\x7c\x77\x19\xb4\x3f\xdb\x93\x2f\xe7\x7c\x69\xb7\xc3\xc7\xa1\x3a\xe6\x5c\x4e\x79\x60\x4c\x5a\x4e\x8e\x38\x30\xac\x09\x1d\x1d\x9f\x4d\x4a\x54\x15\x27\xbc\x05\x4a\x16\x18\xcf\x63\x2e\x37\x40\x0d\xc1\x1e\x55\x06\x4a\xe9\x82\xe3\x9c\x6b\xbc\xaa\xbd\x6b\xbf\x3e\x6a\xdf\xe1\x3b\x01\x45\xc5\x75\x64\x1a\x75\x58\x42\x92\x3c\x71\x97\x12\x60\x1c\xcd\x04\x61\x8d\xd3\xcf\x5d\x89\x35\x59\xc0\x2d\xf8\xaf\xe0\x9f\xbb\xfc\x62\x83\xd5\xc3\x0a\x1b\xbc\xe4\x60\x12\x3d\xaf\xbb\x6b\xc4\x54\x74\x9a\x6a\x90\xb7\xde\xc3\xaa\x0c\xeb\xc7\x2d\x9e\xba\xe7\x65\x80\xbf\x66\xb5\x70\xba\x49\x62\x7f\x67\x7c\xbd\x5b\x13\xec\x17\x8b\xf4\x1b\x00\x00\xff\xff\xf2\x0f\x52\xe5\x29\x01\x00\x00")

func jsRun_mockJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRun_mockJs,
		"js/run_mock.js",
	)
}

func jsRun_mockJs() (*asset, error) {
	bytes, err := jsRun_mockJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/run_mock.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\xdf\x3e\x75\xe3\xd2\xfb\x04\x73\x10\x5d\x51\xf0\xe8\x4d\x44\x42\x52\xdd\x1d\x08\x55\x6d\x55\x7a\x7b\x17\xd9\x77\x97\x74\xdc\x71\x66\xf0\xe0\x31\xf9\xc9\x97\xbf\x3e\xea\xfe\x1e\x5f\x97\x64\x48\x86\xb2\x10\x74\x63\x26\xc5\xae\x7e\x5d\x13\xcf\xb0\xa0\x69\x2d\xa3\x0b\xc2\x26\x99\xc6\x2c\x73\xdf\x7d\x11\x1f\x6b\xf8\xee\xfd\xe7\x0f\x08\xa2\xd4\x0d\xce\x4d\x1b\x87\x92\x84\x31\x25\xa5\x87\x47\xe2\xd2\xd3\x80\x5f\x0e\x78\xf4\x0a\xaa\x17\x9f\x3c\xc7\x4c\x8a\x13\x98\x76\x3c\x5c\x5c\xf5\x83\x73\xc0\x6b\x97\x59\xc8\x90\xf8\x28\x64\x41\x56\xaa\x87\x7d\x49\x61\xc1\xd4\x0f\xb5\x2a\x3d\x51\xd8\x0a\x45\x98\xa0\x2c\xbe\x60\x27\x04\xcf\xf0\x21\x90\x59\x43\xd5\xd7\xa2\x69\x4e\xec\x73\xfb\x1f\x7b\x2a\x8b\x6c\x05\x4a\x3f\xb7\xa4\x75\x84\x5e\xf4\x0e\x4a\x3e\xe7\xe7\x3b\xf8\x9c\x65\x4f\x3c\x0f\xc7\xdb\xcd\x48\x51\xa4\xc1\x56\x6f\x4d\x50\x03\x79\x95\x8d\xe3\xe8\x00\x7a\x5a\x45\x8b\x8d\x3f\x5a\x70\x02\xd5\x49\xd2\x84\xfe\x8d\xd2\x9c\xac\x90\x1e\x83\x5a\x73\x01\x5c\x99\x64\xf9\x03\x5c\x9a\x07\x43\xa4\x29\x31\xc5\xee\x10\x02\x28\x95\x4d\xd9\x01\x2f\xf5\x7c\x4d\xec\x2f\xa5\x0e\xee\x06\x7d\x84\x86\x2c\x3e\x52\x1c\xf1\xb1\xcd\xdb\xe1\x2d\x68\x2c\xcf\x2b\x0d\xe7\x9e\x97\x98\x6f\x2d\xfc\xfe\x5f\x6d\xcf\x7d\x28\x62\x12\xbd\x85\xdf\xb6\xaf\x7b\x30\x55\x43\xff\xf8\xaf\xe6\x53\x4f\x83\x7b\x71\xee\x55\xe9\x79\x91\x70\xfa\xbb\x54\xee\x77\x00\x00\x00\xff\xff\x0b\x8b\xea\xff\xb1\x02\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsWaitgroupJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x8e\x9c\x30\x10\x86\x7b\x3f\xc5\x5f\x82\x14\x99\x27\xd8\x32\x8a\x92\x22\x4d\x22\xa5\x88\x52\x18\x18\x62\x73\xc6\x83\xec\xe1\xd8\xd5\x89\x77\x3f\xd9\xbb\x2c\x48\x57\x5e\x61\xad\xd6\x78\xbe\xff\x9b\xb1\x9b\x06\x7f\x8c\x93\x6f\x91\x97\x19\xab\x71\x92\x30\x70\xc4\xb4\x78\x71\xb3\x27\x8c\xdc\x26\x08\x63\x70\xc1\x25\xab\xf1\x5d\xb0\x3a\xef\x21\x36\xf2\x0a\x13\x40\x31\x72\x54\x4d\x03\x93\x90\x98\x43\xfe\x35\xb9\x0c\x91\x66\x8e\x92\x9e\x87\xb4\x1a\x96\xd0\x89\xe3\x70\x44\x56\x35\xde\x14\x20\xd6\x25\x5d\xa2\x2e\xf8\xfb\x4f\x29\x20\x03\xfb\x3e\xaf\x8c\x0b\xb4\x16\xa4\x30\xc4\x52\xf1\xfc\x9f\xcb\xf7\xd2\x7c\xf4\x82\x1d\x5f\x8d\xdc\xde\xb9\x27\xb2\x9e\x97\x64\xcb\x17\x05\x6c\x8f\x88\xb8\x84\xbc\x12\xe8\x95\xe2\xad\x44\xb8\x50\x22\x0a\xfe\x0b\x4c\xe8\xf3\xdf\x70\x1a\x8d\x58\x9a\xb2\x48\xc7\xd3\xec\x49\x48\xef\x12\x19\x76\x92\xf8\x68\x30\x70\xfc\x6a\x3a\x5b\x3d\xc7\x50\x8d\xfb\x21\x60\xd4\xad\xe9\x5e\x72\x6c\xe8\xab\xba\x6c\x6e\xf5\x01\xc8\xf9\xd5\x59\x3d\x6f\x3c\xac\x96\x20\xce\xdf\x6f\xca\x44\x3a\xc4\xf0\x93\x85\x20\xd6\x48\x61\xa0\x67\x4a\x08\x2c\xa5\xed\xdc\x64\xb1\xc2\x6f\x4b\xb7\x3b\x73\x5a\x92\xa0\x25\x24\x31\x51\xa8\x07\x5d\x85\x62\x30\xde\xdf\x34\xaa\x5f\x44\xc7\xbd\x95\x66\x39\xe2\x07\xb7\x27\xef\x5a\x9d\x6c\x3f\x35\x8b\x67\xbb\x8f\x29\x6c\x6a\x53\x8a\xae\xe5\x41\xe9\xe3\xc1\x5e\x0e\x23\xf5\x1e\x00\x00\xff\xff\x60\x6f\x0e\xe7\xca\x02\x00\x00")

func jsWaitgroupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsWaitgroupJs,
		"js/waitgroup.js",
	)
}

func jsWaitgroupJs() (*asset, error) {
	bytes, err := jsWaitgroupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/waitgroup.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/event.js": jsEventJs,
	"js/job.js": jsJobJs,
	"js/mock8s.js": jsMock8sJs,
	"js/run.js": jsRunJs,
	"js/run_mock.js": jsRun_mockJs,
	"js/runner.js": jsRunnerJs,
	"js/waitgroup.js": jsWaitgroupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"event.js": &bintree{jsEventJs, map[string]*bintree{}},
		"job.js": &bintree{jsJobJs, map[string]*bintree{}},
		"mock8s.js": &bintree{jsMock8sJs, map[string]*bintree{}},
		"run.js": &bintree{jsRunJs, map[string]*bintree{}},
		"run_mock.js": &bintree{jsRun_mockJs, map[string]*bintree{}},
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
		"waitgroup.js": &bintree{jsWaitgroupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

