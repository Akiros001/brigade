// Code generated by go-bindata.
// sources:
// js/runner.js
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsRunnerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x59\x7b\x6f\x1b\xb7\x96\xff\x5f\x9f\xe2\xec\xa0\x68\xa4\x44\x19\x25\xc8\xee\xa2\x50\x56\x58\xb8\xb6\x93\x38\xa9\x1d\x5f\x3b\x4d\xef\x45\x60\x18\xd4\xcc\x91\x86\x16\x87\x9c\x92\x1c\x29\x42\xe1\xef\x7e\x71\x0e\x39\x2f\x3f\xea\xe0\x16\x68\x6c\x93\x3c\xbf\xf3\x7e\x90\x33\x7b\x0e\x6b\x65\x96\x42\x41\x55\xbb\xe2\x02\x33\x63\x73\xb8\x06\xa7\x10\x2b\xd8\xd4\x4b\xb4\x1a\x3d\x3a\x70\x98\x9d\x89\x12\xc1\xe2\x5a\x3a\x8f\xf6\x78\x8b\xda\x3b\x40\xfa\xc1\x1b\xce\x15\x9f\x70\x0f\x99\xd1\x2b\xb9\xe6\x95\xe7\xb3\xd1\xec\x39\xe0\xf7\xca\x58\x8f\x39\x7c\x34\x4b\xf8\x43\x48\xff\xde\x9a\xba\x02\x5b\x6b\x3a\x30\x9a\xcd\xe0\x4b\x21\x1d\x48\x07\xbe\x40\x5a\xd6\x68\x61\x67\x45\x55\x49\xbd\x06\x97\x59\x59\xf9\x74\x94\x19\xed\x8c\xc2\x54\x99\xf5\x38\xf9\xcd\x88\x9c\x36\x0f\x0e\x4f\x8e\x20\x33\x16\x93\xc9\xe0\x40\xa7\x49\x6a\xb1\x32\x4e\x7a\x63\xf7\xa9\x16\x25\x4e\x22\x43\x84\x1c\x57\xa2\x56\x1e\x64\x29\xd6\x48\xdc\x9d\x37\xd9\x06\xea\x65\xad\x7d\x0d\xaf\xff\x37\x7d\xf5\xdf\xf0\x02\x4a\xb1\x41\x10\x3a\x87\xb5\xf4\xe9\x68\x2b\x2c\x88\x4c\xe6\x27\x4c\xb3\x80\x84\xfe\x78\x19\x48\xe6\x4a\x78\x74\x3e\x61\x06\x6c\x9c\x0f\x42\xe7\x0a\x2d\xe4\x48\x4a\x2c\x31\x28\xa8\xa4\xf3\x60\x56\xc1\x70\xb4\x24\x3c\x1c\x64\x32\x27\x11\xc4\x4e\x58\x04\xb3\x4a\x47\xab\x5a\x67\x5e\x1a\x3d\x40\x1a\x4f\xe0\xaf\x11\x40\xc0\xb7\xfb\x00\x01\x45\x64\xb3\x46\x1f\x38\x54\xc2\x8a\x12\x9e\xe5\xc2\x8b\x67\x53\xd8\x15\x32\x2b\x1a\xeb\x2e\x4d\xbe\x27\xe6\x6c\x69\xfc\xb3\x46\xe7\xd3\x11\x80\x2f\xa4\x4b\xd7\xd2\x17\xf5\x12\x16\xcc\x03\x38\x1a\xe6\xd0\xc8\x41\xac\x6f\xa7\x71\x43\xa9\x8b\x40\x7b\x67\x7f\x04\x70\x3b\xba\xed\x0c\xd0\xd3\x5c\xe8\x28\x2d\xeb\xbb\x13\x0e\xbc\x95\xeb\x35\x5a\xcc\x53\x3a\x7f\xd0\xec\x4b\x07\x95\x70\x0e\x73\xf0\xa6\xa3\x2a\x84\x56\x39\xda\x94\x3d\x37\x54\x3b\x13\x1a\x6a\x87\xac\x03\x21\x99\xe5\x0d\x66\x9e\xa9\xb3\x3f\x6b\x69\x91\x95\x25\x63\x04\xde\x2d\x5f\x5e\x67\xac\x3b\xd6\x1e\xb7\x31\x3d\x25\x23\xb5\x46\xa7\xf8\x69\x0c\x19\x64\xe0\x95\x31\xa6\xeb\x14\x9e\x05\xf3\xa5\x64\xb6\x67\x93\xc6\xa6\x7c\x60\xd1\x25\x49\x00\x8a\x96\x1f\x62\xb1\x84\x2b\x6b\xca\xbb\xce\x99\xcd\xe0\x9d\xb1\x20\xe0\xbd\xf4\x1f\xea\x25\x14\xc6\x6c\xa6\x20\xfd\xb3\xc6\xdb\x7b\x65\x44\x0e\x16\x33\x94\x5b\xcc\x03\x46\x38\xdb\x88\xd1\x30\x5c\x10\x6e\x80\x0c\x69\x4a\x3f\xbc\x90\x3a\x40\x85\xb5\xda\x0a\xb6\xc5\xca\x58\xa6\xbe\x23\x4b\x93\xac\x02\x72\xc9\x46\x13\x76\xdf\xc6\x50\x44\x5d\x50\x30\x84\x40\x38\xb7\xc6\x1b\xbf\xaf\x90\xf1\x3e\x9a\x65\x2f\xb6\x3f\x9a\xe5\x58\xb3\x99\xbd\x70\x1b\x17\x0c\x4d\x39\x56\xee\x61\x11\x1c\x1a\x78\x72\x35\xd9\x49\xa5\x60\x89\x99\x29\x83\x4b\x2b\x8b\x2b\xf9\x3d\x8a\x89\x50\x99\x7c\x16\xd8\x97\xa2\x62\xcf\xb8\xf4\x8e\x1b\xe8\xc7\xdb\xa8\x05\x31\x6c\x1c\xd0\xa4\x24\x4b\x41\x91\x63\x6b\xcd\xa1\xb6\x07\xca\x47\xfc\x8e\x59\x4d\x05\x4c\x6a\x70\x64\x0b\x9d\x21\x48\xed\x64\x4e\xb9\x1a\xf0\x04\xb8\x02\x95\x82\xf1\x6c\x29\xf5\xcc\x15\x93\x96\x77\x00\x5d\x04\xf0\xb7\x51\xa1\x03\xc8\x8c\x52\x18\xcc\x60\x56\x2c\xd9\x6c\x2b\x54\x4d\xfe\x94\xd6\x71\x81\xd0\x5b\x69\x8d\x2e\x29\x38\xb6\xc2\x4a\xb1\x54\x3d\x95\x50\x6f\xd9\xcc\x0d\x22\x25\x46\x28\x65\x54\xad\x84\x06\x53\xb1\x73\x14\x78\xb1\x6e\xa9\x64\x2c\x5c\x6d\x11\xeb\x04\x22\xab\x99\x15\x1c\x9f\x7d\xbd\xfe\x7a\x70\x11\x0c\xc8\x58\x97\x98\x59\xf4\xd1\xa2\xc1\xfd\xec\x8a\xca\x54\x35\xd5\xbc\x10\xc3\x9d\xb0\x01\xb0\x91\x18\x76\xd2\x17\x7c\x24\xa8\xb7\x32\xb5\x66\x4b\xd2\x92\x63\xe8\x7e\x60\x31\xb2\xd9\xa2\xb5\x64\x5d\x01\xa5\xf0\x59\x41\xa5\x9e\xf4\xa5\xd0\x68\x33\x84\x16\x4a\x51\xb5\xaa\x05\x2c\x17\x62\x2f\x20\x56\x26\x3f\x8b\x39\xeb\xd0\xc3\x72\x4f\x8e\x1d\x4f\xa6\xac\xd6\x20\xf2\x39\x40\x62\x5d\xac\x4c\x0e\x99\x45\xe1\xa9\x34\x45\xf0\x88\x14\x71\xa9\x75\x39\xd4\xb9\x0b\xf9\x71\x63\x96\x14\x34\x9f\xda\x5e\xd9\x92\xd1\xc1\xc5\xa0\x46\x72\x05\xe5\xbd\xa5\xc8\x36\x6b\x4b\xd6\xe8\xb5\xab\x49\xb7\xbf\x13\xd2\x8f\x27\x23\x5e\xb0\xe8\x6b\xab\x43\x46\x00\x04\x9f\xdf\x01\x79\x94\x4f\x63\x84\x05\x2b\x4f\x4b\xd3\x5e\xa7\x9f\xbc\x6d\x01\x67\x33\x20\x9e\xbf\x6b\x2f\xd5\x91\xd1\x6c\xb6\x02\x6d\x48\x5c\x62\xb4\x13\x36\x77\x90\x99\xb2\x12\x5e\x2e\xa5\x92\x7e\x3f\x85\x65\xed\x21\x37\xe8\x40\x1b\x4f\x8e\x8a\xce\x3c\x3a\x3e\xbf\x38\x3e\x3c\xf8\x72\x7c\x34\x87\x3f\x42\xe2\x82\xc5\xd2\x50\x81\xca\x6b\xcb\xcd\x5b\x55\x85\x18\xf5\xb4\xed\x38\xdf\xd1\xe5\x21\x1b\xf4\x24\xe6\x7f\x1c\xd4\x44\x0e\x82\xfd\x57\xd0\x42\x72\x59\x67\x19\x62\x8e\x79\xc2\x87\x3b\x8a\xf1\x84\xdb\xc6\x12\x21\x13\x4a\x61\x0e\x46\x43\x67\x4a\xfa\x9b\x9b\x88\x4b\xef\xd3\x51\xe5\xab\xbd\x29\x85\x97\x44\xbb\x6f\x10\x96\xfb\xd6\xe5\x7d\xaa\x93\x15\xcb\x13\x84\x77\x90\xbc\x13\x52\x61\x9e\x4c\x43\xe4\xf8\xc2\x9a\x5d\x68\x8e\xdf\x33\xe4\x84\x4d\x87\x74\xb5\x76\x6c\xff\xd2\x70\x23\x13\x1a\x5e\xff\x0f\x94\x52\xd7\x34\x92\x8d\xdf\xbc\x7a\x05\xcf\xe1\xcd\x4b\x87\x99\xe1\xac\xf2\x68\xb7\x42\xb9\xc9\xb4\x85\x06\x2f\x4b\x34\xb5\x1f\x72\x68\x6d\xfe\x50\xd8\x10\xbf\x31\xe5\x9a\x84\x05\xbc\x7a\x0b\x12\xfe\x0f\xde\xbc\xa2\x5f\x5e\xbc\x68\xce\x00\x0c\x06\xb2\xac\xc0\x6c\xc3\xe3\x9a\x17\xbe\xe6\xf2\x95\xd0\xf4\xb4\x6f\xc2\x6f\x12\xa9\x08\x76\x03\x8b\xde\x60\x99\x52\x81\x38\xbb\x1c\x27\x71\x20\x4b\xfa\x47\xcb\x3d\x59\x61\x01\x9b\x94\xa6\xbc\xaf\xaf\x09\x2e\x5d\xa3\x1f\xf7\x91\x1f\x10\xe8\xe3\xe5\xe7\xb3\xd4\x79\x8a\x33\xb9\xda\x8f\x19\x66\x32\x79\x48\xf2\x73\x93\xdf\x11\x15\x5e\x40\x42\x6e\xa6\x6a\xef\xa9\xbe\x85\x6d\xe2\x1c\xb4\x4b\xab\x42\xb8\x8e\xaf\x5c\xc1\xf8\xfe\x36\x2c\x16\xad\xb7\x3b\xa3\x41\xf0\x0b\x3c\xc6\x76\xc5\x04\xb1\x05\xd1\x0f\xca\x36\x85\xe4\x9e\xe4\x6d\xc4\xb8\x7d\x9a\x6f\x17\xf8\x7d\xd6\x4d\x06\xd9\x1a\xef\x40\xcd\x66\x70\xc9\xf3\xfe\x8a\x07\x8d\x1c\x57\x52\x63\x0e\xa2\x34\xb5\x0e\x9d\x51\x96\x98\xc6\xc3\x7c\x33\x18\xbf\x09\xd6\xbc\x1d\xf5\x94\xa2\x53\x39\x50\xb0\x51\x68\x51\x38\x10\x5e\xf5\xb0\xaa\x41\xc7\x24\x94\x9f\x30\x2b\x74\x97\x83\x90\xd1\x1c\xf8\xb5\xf2\xb2\x52\x48\x55\x96\x7b\xf3\x4a\x6a\xe9\x8a\x14\x4e\x7c\x68\x16\x81\x37\xa5\x90\xb5\xc6\x12\x8c\x70\xe0\x8c\xd1\xf4\x53\x70\x71\xa6\x3b\x80\xf5\xae\x3d\xd4\x1b\x41\x5a\x96\x31\xfa\x39\x31\x98\xd5\x02\xbe\x5d\xc5\x22\x23\xf2\x9c\xfe\x27\x38\x8d\xbb\xa6\xde\x53\xaf\x20\x39\xa9\x68\x54\x0d\x29\x1d\xed\xa5\xd4\x8d\x59\x0e\x8a\x31\x21\xf3\x88\xc8\x3b\xbd\x3a\x46\xee\xe6\x64\x47\x9e\xec\x89\x45\xec\x91\x0c\x1f\x5a\x96\x2f\x50\xf7\x4c\xe3\x0b\x2c\x7b\x31\x82\x3f\xd4\x76\x58\x82\x95\xb1\xc7\x22\x2b\xc6\xad\x19\xc6\x37\x5d\xa0\xdc\xf4\x5b\x53\xf4\xf2\xfd\xbe\xf4\x37\x25\x98\xcd\x47\x83\x53\x2b\x18\x9c\x19\x9e\x13\x68\xfc\xa6\xba\xd7\x34\x8c\x10\xe5\x45\x70\x6e\x98\xb8\x02\x66\x59\x3b\x4f\xe5\xd9\x79\xc1\x57\x47\xfc\xee\xd1\x6a\xaa\xb7\x29\x8c\x2f\x11\x3b\xbf\xb1\xb2\x71\xb2\xec\xe4\x9e\x3c\x55\xe3\x7e\xd8\x16\xad\xba\xd1\x0a\xcd\x5c\xdb\x3a\x2c\x84\x58\x48\x9c\xde\xbd\x93\xe2\xb3\x55\x93\xa5\x68\x06\xd5\x18\x3e\x9d\xd7\x06\x43\xb5\x32\xbb\x97\x0a\xb7\xa8\xa0\xb2\xb2\x94\x5e\x6e\xb1\x17\xae\xd4\xc2\x6f\xcc\x72\xd0\xc1\x9b\xeb\xc9\x4f\x1f\x3f\xff\xfa\xf2\xa7\x2f\x27\xa7\xc7\x2f\x7f\x7a\x7f\xf2\xe5\xf2\xc3\x41\x9c\xa6\x37\xbf\xb8\x38\x01\xdc\x98\x65\x98\x85\x5f\x40\xf2\x92\x72\xf2\x48\x78\x4c\xb5\xd9\x8d\x27\xed\x52\x4f\x87\x02\x45\x7e\x9d\x99\xb2\x94\x3e\x95\x79\xea\xea\x65\x28\xa9\xe3\x57\x53\xf8\x85\x27\x07\x82\xcf\xca\x88\x1e\xf9\xc4\xe5\x70\x91\x7f\x70\x2b\x2b\x69\x18\xc7\xdd\xe1\xe9\x38\x10\x4f\x06\x34\x61\xf3\x82\x7f\x3f\x37\xf9\xb8\x43\xe2\x9a\x1b\xfe\x4c\x4b\xf4\x82\xee\x4c\xa9\x12\x4b\x54\xec\x4c\x3d\xd4\xf2\xf1\xb3\x4b\x54\x46\xaf\x9d\x37\xb0\x80\x87\xdf\x0a\xcc\x8e\xe8\x06\xb6\x7a\xfc\x51\xe1\x71\x46\xc1\x78\x43\x2e\x43\xab\x36\xf3\x77\x9e\x37\x23\x2e\x4f\x1d\x64\x0d\xd4\xdb\xaf\xc2\x0e\x2a\xd1\x75\x8a\x14\xab\xa4\x21\xea\xed\xb4\x8b\xeb\xad\x50\x53\xd8\xe0\x7e\x0a\x2a\x04\xc4\x93\x27\x9b\x20\x8f\x5c\x42\x55\xfa\x8b\xd4\x99\x07\x20\x9e\xd7\xe7\xf4\xe3\x36\x4c\x89\x93\xb7\x9d\xac\xcd\xb4\x2d\xdc\x40\xec\x1e\xd7\x78\xe2\x11\xce\xa3\xa6\xed\xd0\x6d\xae\x01\xdb\xd1\x5d\xab\x52\x32\x93\x5e\xed\x61\xa9\x4c\xb6\x09\x4d\x87\x5a\xdd\x75\xda\x4c\xec\xe3\x6f\x49\xa0\x48\xae\x58\xca\x49\x97\xaf\xa1\xc5\xc5\xce\xd4\xf0\x78\x8f\xbe\x65\xd1\x5e\x1f\xd6\x72\x8b\xba\x79\xd4\x7a\xc0\x10\x11\xb0\xb3\x47\x3b\x95\xa8\x1a\xdf\x59\x53\xce\x7b\x9d\x35\xa0\x7f\xc2\xfd\x05\xae\xe6\x10\x8d\x18\xb1\x59\xe5\x60\xc6\x41\xd7\xed\x8c\x3a\x0a\x0a\x86\xf7\xb3\x87\xdd\x32\x90\x26\x39\x38\x3c\x39\xba\xbe\x38\x3e\xff\x7c\xfd\xe9\xf8\x5f\xc9\x40\xb2\x79\x7c\x86\xeb\x17\xac\xce\x6b\xde\x54\xb1\xb8\xb4\x4e\xa3\xa2\xeb\x30\x14\xdc\xee\xde\xa5\xf7\x20\xbc\xc7\xb2\xe2\x87\x14\xba\x3c\xb5\x37\x38\x17\xe0\x68\xd9\x94\xe8\xc3\xe5\x4c\x39\xee\x3e\x43\xa1\x1b\x71\x0f\x7f\xfb\x7c\x76\x7c\xfd\xfb\xc5\x6f\x49\x1b\x54\x0f\xe7\x52\xa6\x8c\xc6\xeb\xda\xaa\x20\xf9\xc3\x68\x97\x97\x1f\x7e\x04\xcb\xb9\xe2\x29\xa4\xf7\x27\x5f\x7e\x04\x69\x2d\xfd\x53\x48\x1f\x8e\x0f\x8e\xae\x0f\x3f\x9f\x9e\x9e\x7c\xb9\x3e\x39\x7a\x10\x70\x98\xf5\x01\x2c\x16\x0d\x57\x61\xd6\x04\x37\x5a\xf7\xed\xd5\x55\xbc\xdd\x47\x66\x3d\x07\xc6\xf7\x15\xba\xab\x6f\x8d\xaa\xfb\xa5\x87\x51\xc2\x22\x97\x0c\x8e\x80\x46\xc2\x50\x66\xa7\x91\xfe\x54\x54\x6d\x94\xc6\xea\x7d\x7b\xdb\x64\xcb\xb4\x25\x4a\x64\x6e\x9d\x48\xa6\x31\xbc\xe7\xf0\x57\xfc\xed\xac\x1f\xdf\x81\xf4\xea\xed\xdf\xea\x13\xe4\x3a\xa5\x71\xf2\x71\xe1\x78\xda\x3c\x17\xbe\x98\x43\x32\x2b\x8c\xd9\xcc\xa8\x94\x26\xf1\xd9\xf1\x61\xd1\xee\xd3\x38\x57\x24\x53\xb0\x28\xf2\xcf\x5a\xed\xe7\x3c\xee\x46\x09\x83\x1d\x3f\x37\x51\xee\xdb\x27\x13\xa3\xd5\x9e\x72\x90\x56\x6a\x87\x96\x22\xde\x81\xd1\x1c\xd4\x94\x9b\x54\xd0\xf8\x68\x93\x9e\x8f\xab\xda\x3c\xb1\xb4\x24\xbd\x1c\xfc\x68\xe2\x50\xd7\xbe\x34\x85\xf7\x65\x1e\x2b\x29\x38\x84\xce\xe7\xb1\xfa\x53\x7f\x2c\xf3\x08\xc4\xe7\xd3\x1b\x23\xf5\x38\x81\x9f\x7f\x86\x84\x3b\x61\x56\xa6\x64\xa1\x6f\x49\x29\xa4\x4e\x5d\x91\x5c\xc5\xbe\x5a\x72\x5b\xf9\xa1\xbb\xd6\xe8\xce\x7d\xe8\xd0\xa2\xe0\xd1\xbd\x7b\x4b\xa3\xe6\x97\x95\x5d\x6f\xd3\xb1\x63\xff\xcd\x85\x2b\x2b\xf9\xb6\xb5\x49\x69\x70\xd3\x4e\x1a\xdd\xbc\x0d\x96\xa2\x4a\xc3\xeb\x0a\x1d\x7a\x94\x7b\x73\x69\x78\xdc\xce\x3f\x20\x45\x20\x8e\x92\xf4\x2e\x90\x91\x7f\xdc\xbe\x2b\x03\x2d\x4b\xbd\x4e\xd3\x34\x98\x27\x5e\x9b\xba\x29\x84\xaf\x2b\xed\x48\x36\x18\x55\x2a\x93\xb3\x5c\x1c\x25\x91\x30\x04\x4c\xb2\x91\x3a\x4f\xe6\x7c\xf3\x8b\x25\x3b\x11\x95\xfc\x8a\x96\xac\x43\x1b\xdb\xd7\xcd\x7a\x63\xe9\xa4\xeb\x31\x09\xc1\x26\x73\x88\x0c\xa6\xfd\x65\x57\x89\x8c\xf6\x5a\xaf\xb6\xbb\x61\x0a\x49\xfa\xad\x2a\x29\xd0\x4a\x2f\xd6\x4c\xf0\x8f\xda\x6c\x36\xa2\x3d\x4f\xac\x85\x16\x6b\xcc\x7f\xdd\xd3\xb6\xc8\x24\x3f\x9d\xf4\x9a\x56\x94\x90\xfc\xd1\x97\xce\x22\x4f\xea\xe7\x46\xc9\x8c\x49\xcf\xe8\x1e\xd3\x09\xd2\xb9\x2e\x99\xc7\xec\xe7\x0a\xd0\xfe\xd6\x69\xc8\x5c\xe9\x66\x38\xed\x6f\x72\x26\x25\xf3\xee\xe1\x72\xb0\x1b\x53\x67\x80\xcd\x1b\x5c\x12\x28\x33\x7a\xcb\x57\x7d\xd2\xd9\x0c\xde\x9d\xfc\xf3\xf4\x78\x0e\x87\x85\xd0\x6b\xa4\x9c\x4c\x4e\x56\x67\xc6\x9f\x5b\x74\xa8\x7d\x72\x4f\x8a\xf3\x5a\xa9\x4e\xd1\x03\xb5\x13\x7b\xd7\x9d\x6a\x9a\xfc\x55\x7b\x3d\x0e\xd7\xdb\x41\xc0\x1c\x9e\x8e\x9f\x0a\x93\xc3\xa6\x52\xff\x07\xc1\xd2\x19\xb3\x1f\x2b\x4f\x45\xcb\xc3\xf1\xf2\x74\xcc\xc4\x98\x68\x42\xe3\xbe\x2c\x4d\x75\x9a\x43\x82\x59\x61\xa0\x40\xa5\x0c\x55\x31\xfe\x6b\x6d\x4c\xbe\xdc\x63\xd2\x81\xb4\xef\x01\x8b\xc7\xff\xa3\xed\x53\x21\x35\x28\x23\x72\xb4\x4f\x9d\xbe\xff\xf9\x10\x73\xfe\x7a\x48\x29\x4e\x05\xfe\xbf\x86\x9f\x35\x9b\xc7\x00\x7e\xd6\x38\x33\xc3\x4f\x4e\xae\x79\x20\x49\xd8\xb1\x3c\xaa\x87\xc2\x7b\xff\xfb\x51\xff\x69\x77\x84\xbd\xef\x23\xa1\x21\x9c\x9e\xff\x3a\x87\x13\xc8\x8d\x7e\xc6\x57\x63\xbd\xa1\xf6\x60\xf9\xed\x95\x86\x30\x8b\xc2\x19\x7e\x08\xaa\x84\x8b\xcf\xcd\x52\x4f\xe3\x87\x0b\x8b\xff\x1f\x60\x92\x30\xf4\x25\xcd\xf4\x47\x56\x4c\xba\x0f\xb1\xc9\xbc\xf7\x55\x96\x64\x66\x91\xfb\x9f\x28\x7b\xd2\xb7\xdf\x1a\x87\x46\xbb\x53\x5a\xfb\xd4\x93\xc9\x68\x68\xbd\xe1\xee\x1d\xe3\xc7\xef\x9e\xec\xb7\x3c\x85\x77\x92\x1f\x83\xa9\xd6\xb7\x66\x0b\x1f\x69\x57\x1a\x16\xa0\x8c\xd9\xd4\xd5\x3d\xb3\x0e\x19\xf0\xe1\xc1\x2b\xba\xdb\x49\x9f\x15\xd0\x91\x04\x87\x66\xc2\x21\x24\xbd\x2f\x75\xc9\x3c\x0c\xdb\x3d\xb8\xb4\xb7\x3d\x8e\xef\x96\x4b\x8b\x62\x33\x82\xe6\x9b\xf1\xbc\xff\xe8\xf5\xbb\xde\x68\xb3\x6b\x3e\x54\x0e\xf4\x20\x53\xff\x3b\x00\x00\xff\xff\x5c\x0c\x1f\xdb\x5f\x1f\x00\x00")

func jsRunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRunnerJs,
		"js/runner.js",
	)
}

func jsRunnerJs() (*asset, error) {
	bytes, err := jsRunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/runner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/runner.js": jsRunnerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"runner.js": &bintree{jsRunnerJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

