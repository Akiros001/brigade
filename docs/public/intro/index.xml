<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting Started on Brigade</title>
    <link>/intro/</link>
    <description>Recent content in Getting Started on Brigade</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="/intro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Brigade Overview</title>
      <link>/intro/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intro/overview/</guid>
      <description>Brigade is a Kubernetes-native tool for doing event-driven scripting. Here&amp;rsquo;s what that means:
 Brigade is for running scriptable automated tasks in the cloud. Brigade does not require you to manage host servers. Brigade is particularly well suited for CI and CD workloads such as:  Automated testing GitHub hook integration Building artifacts and releases Managing deployments  Brigade is built directly on Kubernetes APIs, which means&amp;hellip;  You can deploy Brigade onto any stock Kubernetes system, from Azure to Minikube You can monitor Brigade and its jobs using Kubernetes tools (or with Brigade&amp;rsquo;s own tools, of course) Brigade uses Kubernetes resource types Brigade can be deployed and managed with helm.</description>
    </item>
    
    <item>
      <title>Installing Brigade</title>
      <link>/intro/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intro/install/</guid>
      <description>This part is a work-in-progress because Brigade is still developer-oriented
The Brigade server is deployed via its Helm chart and Brigade projects are managed via brig. Here are the steps:
 Make sure helm is installed, and helm version returns the correct server. Add the Brigade repo: helm repo add brigade https://azure.github.io/brigade-charts Install Brigade: helm install brigade/brigade --name brigade-server Create a Brigade project: brig project create  At this point, you have a running Brigade service.</description>
    </item>
    
    <item>
      <title>Tutorial 1: Writing a CI pipeline</title>
      <link>/intro/tutorial01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intro/tutorial01/</guid>
      <description>Writing your first CI pipeline, Part 1 Let’s learn by example.
Throughout this tutorial, we’ll walk you through the creation of a basic web application with a Brigade CI pipeline for testing the application.
It’ll consist of two parts:
 A public site that lets people generate UUIDs. A brigade.js that tests the site  We’ll assume you have Brigade, git (a version control system), and pip (a package management system for Python) installed already.</description>
    </item>
    
    <item>
      <title>Tutorial 2: Setup GitHub</title>
      <link>/intro/tutorial02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intro/tutorial02/</guid>
      <description>Writing your first CI pipeline, Part 2 This tutorial begins where Tutorial 1 left off. We’ll walk through the process for using Git locally on your personal computer, and using Github to back it up. We&amp;rsquo;ll walk through creating your personal Github account, setting up Git on your computer, starting your first Git repository, and connecting that repository to a Github repository.
What are git and Github? Git is a widely-used version control system used to manage code.</description>
    </item>
    
    <item>
      <title>Tutorial 3: Projects &amp; Events</title>
      <link>/intro/tutorial03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intro/tutorial03/</guid>
      <description>Writing your first CI pipeline, Part 3 This tutorial begins where Tutorial 2 left off. We’ll walk through the process for configuring your newly created Github repository with Brigade for testing new features. We&amp;rsquo;ll configure a new Brigade project, and have Github push events to trigger Brigade builds.
Create a Brigade project The Brigade server tracks separate configuration for each project you set up. To create and manage these configurations, we use the brig cli.</description>
    </item>
    
    <item>
      <title>Tutorial 4: Writing a Test</title>
      <link>/intro/tutorial04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intro/tutorial04/</guid>
      <description>Writing your first CI pipeline, Part 4 This tutorial begins where Tutorial 3 left off. We’ll walk through the process for writing your first feature for our UUID generator app, then test the feature on Github using Brigade.
Test the application Let’s check that the application shows a UUID if we access the root of the application (/). Let&amp;rsquo;s create a test directory to write our tests:
$ mkdir tests/ $ touch tests/__init__.</description>
    </item>
    
    <item>
      <title>Tutorial 5: Writing Efficient Pipelines</title>
      <link>/intro/writing-efficient-pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intro/writing-efficient-pipelines/</guid>
      <description>Advanced tutorial: Writing efficient pipelines FIXME: This tutorial could use some love
This advanced tutorial begins where [Tutorial 4][part4] left off. We’ll be parallelizing a few operations in brigade.js into separate jobs so the job can fail faster and run as fast as possible.
If you haven’t recently completed Tutorials 1–4, we strongly encourage you to review these so that your example project matches the one described below.
Here are a few things to help you:</description>
    </item>
    
    <item>
      <title>What to Read Next</title>
      <link>/intro/readnext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intro/readnext/</guid>
      <description>What to Read Next So you’ve read all the introductory material and have decided you’d like to keep using Brigade to test your applications. We’ve only just scratched the surface.
So what’s next?
Well, we’ve always been big fans of learning by doing. At this point you should know enough to start a project of your own and start fooling around. As you need to learn new tricks, come back to the documentation.</description>
    </item>
    
  </channel>
</rss>